<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyYoshiのログ置き場</title>
    <link>https://github.pyyoshi.com/blog/</link>
    <description>Recent content on PyYoshiのログ置き場</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>&amp;#183; PyYoshi</copyright>
    <lastBuildDate>Wed, 31 Oct 2018 14:21:48 +0000</lastBuildDate>
    <atom:link href="https://github.pyyoshi.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>XPS 13(9360 Intel 8th gen)のi915設定</title>
      <link>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AEi915%E8%A8%AD%E5%AE%9A/</link>
      <pubDate>Wed, 31 Oct 2018 14:21:48 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AEi915%E8%A8%AD%E5%AE%9A/</guid>
      <description>i915.modeset=1 i915.enable_rc6=1 i915.enable_fbc=1 i915.enable_guc_loading=1 i915.enable_guc_submission=1 i915.disable_power_well=0 ちらつきまたはラップトップ側のディスプレイがブラックアウトする場合は&#xA;i915.enable_psr=0 にする.&#xA;$ dmesg で&#xA;[drm:intel_dp_start_link_train [i915]] *ERROR* [CONNECTOR:71:eDP-1] Link Training failed at link rate = 540000, lane count = 4 が見られる場合もまた&#xA;i915.enable_psr=0 にする必要がある.&#xA;i915ドライバーの設定情報は以下で参照できる.&#xA;$ modinfo -p i915 GRUB設定を更新する /etc/default/grub の&#xA;GRUB_CMDLINE_LINUX_DEFAULT に上の設定値を追加する.&#xA;設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う.&#xA;$ sudo grub-mkconfig -o /boot/grub/grub.cfg </description>
    </item>
    <item>
      <title>XPS 13(9360 Intel 8th gen)のNVMEの省電力機能を有効にする</title>
      <link>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AENVME%E3%81%AE%E7%9C%81%E9%9B%BB%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 31 Oct 2018 13:53:07 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AENVME%E3%81%AE%E7%9C%81%E9%9B%BB%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/</guid>
      <description>NVMEのモデルと設定値を調べる $ sudo nvme list 東芝の512GBの場合はカーネルコマンドラインに以下を指定&#xA;nvme_core.default_ps_max_latency_us=170000 1TBの場合は以下を指定&#xA;nvme_core.default_ps_max_latency_us=180000 GRUB設定を更新する /etc/default/grub の&#xA;GRUB_CMDLINE_LINUX_DEFAULT に上で調べた設定値を追加する&#xA;東芝512GBモデルの場合は以下のようになる&#xA;GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;nvme_core.default_ps_max_latency_us=170000&amp;#34; 設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う&#xA;$ sudo grub-mkconfig -o /boot/grub/grub.cfg </description>
    </item>
    <item>
      <title>Ubuntu 18.04で起動時間が遅い場合の対処</title>
      <link>https://github.pyyoshi.com/blog/2018/10/Ubuntu-18.04%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E9%96%93%E3%81%8C%E9%81%85%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
      <pubDate>Tue, 09 Oct 2018 19:19:21 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2018/10/Ubuntu-18.04%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E9%96%93%E3%81%8C%E9%81%85%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
      <description>起動時のコンソールに以下が表示されたあとにログイン画面が表示される場合は&#xA;give up waiting for suspend/resume device $ cat /etc/initramfs-tools/conf.d/resume RESUME=none すれば解決する.&#xA;ハイバネーションを利用しない場合に限る</description>
    </item>
    <item>
      <title>ローカル環境にElasticSearchをインストール</title>
      <link>https://github.pyyoshi.com/blog/2018/05/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%ABElasticSearch%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Tue, 22 May 2018 15:36:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2018/05/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%ABElasticSearch%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>ローカルにElasticSearch開発環境を構築します.&#xA;ターゲットは日本語データです.&#xA;必須環境 Ubuntu or Debian&#xA;Basicライセンスの取得 https://www.elastic.co/jp/subscriptions&#xA;https://register.elastic.co/ でBasicライセンスを取得する&#xA;メールでライセンスダウンロードURLが送られてくるのでそのJSONファイルをダウンロードしておく&#xA;ElasticSearchのインストール wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - echo &amp;#34;deb https://artifacts.elastic.co/packages/6.x/apt stable main&amp;#34; | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list sudo apt update sudo apt install elasticsearch sudo systemctl disable elasticsearch.service sudo service elasticsearch status sudo service elasticsearch start sudo service elasticsearch status X-Packのインストール sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install x-pack sudo service elasticsearch restart sudo service elasticsearch status sudo /usr/share/elasticsearch/bin/x-pack/setup-passwords interactive ElasticSearchライセンスの更新 curl -XPUT -u elastic &amp;#39;http://localhost:9200/_xpack/license?</description>
    </item>
    <item>
      <title>Ubuntuのバックアップ環境 - 調査</title>
      <link>https://github.pyyoshi.com/blog/2018/01/Ubuntu%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83-%E8%AA%BF%E6%9F%BB/</link>
      <pubDate>Fri, 05 Jan 2018 19:14:38 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2018/01/Ubuntu%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83-%E8%AA%BF%E6%9F%BB/</guid>
      <description>以前まではバックアップソフトは使わず必要なものはプライベートリポジトリに入れたりGdriveに入れたりしてた. (macOSはTimeMachineを常用)&#xA;これで十分だったけど, どうせならエンジニアらしくそれらをそれらしく自動化するのもおもしろそうなのでやっていく.&#xA;■ 欲しい機能 暗号化 バックアップ用ストレージは基本持って歩かないけれど, 仕事でもつかうので.&#xA;できるならば秘密鍵はYubiKey(PGP)で管理したい.&#xA;フルバックアップ 月1ペースでクリーンアップしたい.&#xA;差分バックアップ リストアは全体より単一ファイルで行う用途のほうが圧倒的に多い.&#xA;メンテが止まってもベースとなるツール(rsyncなど)でリストアが可能 これは大前提.&#xA;どうせ新しいUbuntuが出たら乗り換えるとおもうけど, そのリリースでも使えるかどうかはわからん.&#xA;あくまでバックアップだけど, リストアしたいときにメンテされて無くてリストアできないのは大変困る.&#xA;ディスクベースじゃなくてディレクトリベースで管理 ファイルシステムになるべく依存したくない.&#xA;NASへアップロードしたい.&#xA;■ TimeShift https://launchpad.net/timeshift&#xA;システムのバックアップ･リストアにフォーカスしている.&#xA;なのでHomeとかキャッシュとかそういうのは除外リストに入ってる.&#xA;Homeなどのユーザデータは別アプリに頼るべき.&#xA;暗号化されたファイルシステムのバックアップは可能.&#xA;ファイル自体の暗号化はたぶんできない(要調査).&#xA;なのでファイルシステム側で暗号化したほうがいいかも.&#xA;フルバックアップ後のバックアップは差分バックアップで行っていくようだ.&#xA;■ Deja Dup https://launchpad.net/deja-dup&#xA;ubuntuに標準で搭載されてるあれ.&#xA;Homeディレクトリ以下はこれでバックアップしたほうがよいっぽい.&#xA;差分バックアップの他にフルバックアップも用意されているので, 差分バックアップは2時間おき, フルバックアップは1ヶ月おきくらいで良いかもしれない.&#xA;これにすることで, あたらしいフルバックアップが作られたとき, 差分バックアップはそれをベースに行っていくみたい.&#xA;パスワードやPGPによる暗号化が可能.&#xA;■ Back In Time https://github.com/bit-team/backintime&#xA;TimeShift同様シンプル.&#xA;EncFSによるファイルシステムベースでの暗号化.&#xA;SSHでファイル転送できる.&#xA;EncFS使ってるので正直使いたいとは思えない…&#xA;■ Systemback https://launchpad.net/systemback&#xA;メンテしないようなので使わない.&#xA;■ 参考: https://wiki.ubuntulinux.jp/UbuntuTips/Install/Backup http://gihyo.jp/admin/serial/01/ubuntu-recipe/0399 https://allabout.co.jp/gm/gc/436735/ </description>
    </item>
    <item>
      <title>2018年やりたいリスト</title>
      <link>https://github.pyyoshi.com/blog/2017/12/2018%E5%B9%B4%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%83%AA%E3%82%B9%E3%83%88/</link>
      <pubDate>Sun, 31 Dec 2017 15:00:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/12/2018%E5%B9%B4%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%83%AA%E3%82%B9%E3%83%88/</guid>
      <description>Rust まだシンタックスとかそういう根本的なところでつまずいて, スムーズに書くことはできてないので今年こそはやりたいことをそれなりに書けるくらいにはなりたい.&#xA;WebAssembly with Rust コードハイライターとかMarkdownパーザとか書きたい.&#xA;WebRTC 主にP2P部分に興味あり.&#xA;PeerCastのような仕組みをWebRTC上で作ってトラッカー以外は依存しない配信システムの仕組みを作っていきたい.&#xA;ダイエット 3年弱, 忙しすぎて体調管理できてなかったので健康的な肉体になるように頑張る.&#xA;語学 英語 記事などのアウトプットも英語で書いていく.&#xA;Duolingoを頑張る.&#xA;余裕が出てきたら英会話教室みたいなやつにいく.&#xA;副業 家賃程度は稼げるようになりたい.&#xA;そのための地盤がためを今年1年に割り当てたい.&#xA;稼いだお金は自分に投資したい.&#xA;WebIDEを試す iPad Proなどの軽い端末で出先で開発できる環境がほしいとずっと思っていたので, 今年こそはいろいろ試していきたい.&#xA;AWS Cloud9とかCodeMirrorとかCloud Shellとか.&#xA;Ethereum上でなにか作りたい. Ethereum上でアプリを動かせる仕組みがあるみたいなので簡単なものをつくってみたい.&#xA;技能試験の勉強 FP カラーコーディネーター 3Dプリンタ 小物作りに使いたい.&#xA;精度とか出来とか気になるタイプなので本番はDMMとかでやると思うけど, PoCづくりにやっすいやつは用意しておきたい.</description>
    </item>
    <item>
      <title>2017年とこれから</title>
      <link>https://github.pyyoshi.com/blog/2017/12/2017%E5%B9%B4%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89/</link>
      <pubDate>Sun, 31 Dec 2017 01:38:05 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/12/2017%E5%B9%B4%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89/</guid>
      <description>今年もいろいろありましたが, 中でも3年CTOとして働いていたIdemoの役員を退任したことがなにより大きな出来事だったかと思います.&#xA;なかなか成長させることができずの退任でとても悔しさが残りますが, たくさんのことが学ぶことができ, 血肉となり感謝してもしきれないくらいです.&#xA;いつかまたIdemoのようなEdTechに関わりたいなという気持ちは残っています.&#xA;2018年は具体的にこうしていきたい!っていうのはあまり無いのですが,&#xA;これまでエンジニアとしてフルスタックにやってきました.&#xA;やってきたというか, 実現するために必要なものはすべて学ぶスタンスが私をそうしたのだと思います.&#xA;これはいい面もあり悪い面もあると認識しています.&#xA;どちらの技術も知っているので客観的に問題を捉えて解決できたりだとか, 0から1, 1から5くらいまではとても活躍するだとか, マルチタレント寄りに活躍できるいい面があります.&#xA;逆に, 広く浅く技術を学んでしまい, 大きな課題を解決するためにはスペシャリスト寄りの技術力が求められるシーンではなかなか活躍できない可能性もあります.&#xA;そういった悪い面を今後どう克服するか悩んでいるところであり, キャリアにも関わってくる要素であると考えています.&#xA;2018年はそういった部分を考えながら過ごしていきたいと考えています.&#xA;あとはもうちょっとアウトプットを増やそうと考えています. RFCとかそういった技術にこったものだったりOSSコントリビュートだったり.&#xA;来年からは東京でお仕事する予定です. やっと人並みの生活がおくれそう(年収面で)です.&#xA;勉強会にも積極的に参加して刺激をたくさん受けモチベ向上に力を入れていくつもりです.&#xA;では2018年もどうぞよろしくお願いします.</description>
    </item>
    <item>
      <title>WebAssemblyをブラウザで実行するときにハマった</title>
      <link>https://github.pyyoshi.com/blog/2017/11/WebAssembly%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F/</link>
      <pubDate>Tue, 14 Nov 2017 16:55:30 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/11/WebAssembly%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F/</guid>
      <description>せっかくRustちまちま書けるようになってきたのでWebAssemblyを触り始めた.&#xA;基本的にChromeで実行していて気づかなかったのだけど, Firefoxで実行しようとしたとき, 以下の初期化コードでは動かなかった.&#xA;fetch(&amp;#39;wasm/hello.wasm&amp;#39;) .then((response) =&amp;gt; response.arrayBuffer()) .then((buffer) =&amp;gt; { Module.wasmBinary = buffer const scriptElem = document.createElement(&amp;#34;script&amp;#34;); scriptElem.src = &amp;#34;wasm/hello.js&amp;#34;; scriptElem.addEventListener(&amp;#39;load&amp;#39;, (e) =&amp;gt; { const mainScriptElem = document.createElement(&amp;#39;script&amp;#39;); mainScriptElem.src = &amp;#39;main.js&amp;#39;; document.body.appendChild(mainScriptElem); }); document.body.appendChild(scriptElem); }) それで, このコードの&#xA;... scriptElem.addEventListener(&amp;#39;load&amp;#39;, (e) =&amp;gt; { const mainScriptElem = document.createElement(&amp;#39;script&amp;#39;); mainScriptElem.src = &amp;#39;main.js&amp;#39;; document.body.appendChild(mainScriptElem); }); ... が良くなかった.&#xA;何が良くないかというとwasm/hello.jsの読み込みが終わっただけで, WebAssemblyのランタイムの準備が整ったわけではなく, このあとmain.jsがロードされてもwasmの初期化がされていないのでエラーになることがある.&#xA;この問題, Chromeのパースがはやいのか気づかなかった. Firefoxでいざ実行してみたらwasmが準備できてないのに実行するなみたいなエラーが出た.&#xA;Assertion failed: you need to wait for the runtime to be ready (e.</description>
    </item>
    <item>
      <title>react-native bundle/start実行時にbundlingが0%のまま進まない場合</title>
      <link>https://github.pyyoshi.com/blog/2017/11/react-native-bundle/start%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%ABbundling%E3%81%8C0%E3%81%AE%E3%81%BE%E3%81%BE%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</link>
      <pubDate>Sun, 05 Nov 2017 01:59:59 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/11/react-native-bundle/start%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%ABbundling%E3%81%8C0%E3%81%AE%E3%81%BE%E3%81%BE%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</guid>
      <description>$ react-native run-ios を実行してシミュレータが立ち上がってコードのロードを始めるが一向に進捗が0%のまま動かない問題に遭遇した.&#xA;nodeのバージョンを変えてもダメ, react-nativeのバージョンを変えてもダメでどうしたものかと悩んで, キャッシュ削除試してみようとしたときに&#xA;$ watchman watch-del-all を実行しても終了しないでずっと実行し続ける状態であることに気づいた.&#xA;これはwatchmanが悪さしているのだろうと思い, プロセスを殺したら正しく動いた…&#xA;$ pkill watchman </description>
    </item>
    <item>
      <title>githubなどのwebhookをうけとる便利なGo製サーバー adnanh/webhook</title>
      <link>https://github.pyyoshi.com/blog/2017/10/github%E3%81%AA%E3%81%A9%E3%81%AEwebhook%E3%82%92%E3%81%86%E3%81%91%E3%81%A8%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AAGo%E8%A3%BD%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-adnanh/webhook/</link>
      <pubDate>Wed, 25 Oct 2017 21:45:08 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/10/github%E3%81%AA%E3%81%A9%E3%81%AEwebhook%E3%82%92%E3%81%86%E3%81%91%E3%81%A8%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AAGo%E8%A3%BD%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-adnanh/webhook/</guid>
      <description>hugoでビルド&amp;amp;プッシュしたgitリポジトリをサーバに反映させるためにwebhookが有効だと思ったのでいろいろ調べてみた結果&#xA;https://github.com/adnanh/webhook&#xA;が, シングルバイナリのこれが一番使い勝手が良かった.&#xA;設定ファイル(hooks.json)は以下&#xA;[{ &amp;#34;id&amp;#34;: &amp;#34;update-script&amp;#34;, &amp;#34;execute-command&amp;#34;: &amp;#34;/tmp/update-script.sh&amp;#34;, &amp;#34;command-working-directory&amp;#34;: &amp;#34;/tmp&amp;#34;, &amp;#34;trigger-rule&amp;#34;: { &amp;#34;and&amp;#34;: [{ &amp;#34;match&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;payload-hash-sha1&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;&amp;lt;&amp;lt;SECRET KEY&amp;gt;&amp;gt;&amp;#34;, &amp;#34;parameter&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;header&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;X-Hub-Signature&amp;#34; } } }, { &amp;#34;match&amp;#34;: { &amp;#34;parameter&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;header&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;X-GitHub-Event&amp;#34; }, &amp;#34;type&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;push&amp;#34; } } ] } }] これでSECRET KEYで認証が行えるのと pushイベント以外は弾くようにできる.&#xA;http://&amp;lt;&amp;lt;HOSTADDR:PORT&amp;gt;&amp;gt;/hooks/update-scriptにgithubからpostが飛んでくるとあとは設定したスクリプトが実行される.&#xA;あとはsystemdなりにサービス登録しておわり.&#xA;[Unit] Description=webhook [Service] User=root Group=root WorkingDirectory=/tmp ExecStart=/usr/local/bin/webhook -hooks /tmp/hooks.json -verbose -hotreload [Install] WantedBy=multi-user.target 自分の環境はlet&#39;s encrypt + nginxでhttpsなリバプロでセキュアなフックサーバを建てた.</description>
    </item>
    <item>
      <title>WebStormの時代は終わったのかもしれない</title>
      <link>https://github.pyyoshi.com/blog/2017/10/WebStorm%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AF%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</link>
      <pubDate>Thu, 12 Oct 2017 21:18:42 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/10/WebStorm%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AF%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</guid>
      <description>JavaScriptの補完もTypeScriptの補完もVSCodeがとても賢く余計なことはしないでシンプル&#xA;一方WebStormは頼んでいない補完をサジェストしてくるは関係ない(名前が同じ)コンポネントを拾ってくるわでひどいなっと思った&#xA;どう困っているかというと下の画像の通り, import済みのコンポネントがあるのに繰り返し, このコンポネントじゃね?ってサジェストしてきてコードを書くことに集中できない…&#xA;ちな, EAPでも治らなかった…&#xA;IDEA, PyCharm, PHPStormっと使ってきて本当にありがたい気持ちでいっぱいだったけど, 正直がっかりした</description>
    </item>
    <item>
      <title>react-native-cameraをAndroidで使うときのちょっとした罠</title>
      <link>https://github.pyyoshi.com/blog/2017/10/react-native-camera%E3%82%92Android%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E7%BD%A0/</link>
      <pubDate>Mon, 09 Oct 2017 17:49:35 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/10/react-native-camera%E3%82%92Android%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E7%BD%A0/</guid>
      <description>なぜかカメラプレビューが真っ白/真っ黒で映らない&#xA;これはAndroid 6.0以上の端末でたぶん陥ります&#xA;で, なんでかというとアプリにカメラ権限が付与されていないから&#xA;AndroidのときはPermissionsAndroidを利用して権限リクエスト･管理をしっかり行いましょう&#xA;あと同じように位置情報取得とか連絡先取得そういうのもリクエストが必要です&#xA;PermissionsAndroid - React Native 実行時のパーミッション リクエスト | Android Developers Normal パーミッションと Dangerous パーミッション | Android Developers 少し親切なRuntime Permission対応 - Qiita </description>
    </item>
    <item>
      <title>Firebase Databaseでパスにuidを含めたユーザ権限周りをFirestoreでやるには</title>
      <link>https://github.pyyoshi.com/blog/2017/10/Firebase-Database%E3%81%A7%E3%83%91%E3%82%B9%E3%81%ABuid%E3%82%92%E5%90%AB%E3%82%81%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E6%A8%A9%E9%99%90%E5%91%A8%E3%82%8A%E3%82%92Firestore%E3%81%A7%E3%82%84%E3%82%8B%E3%81%AB%E3%81%AF/</link>
      <pubDate>Fri, 06 Oct 2017 08:42:49 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/10/Firebase-Database%E3%81%A7%E3%83%91%E3%82%B9%E3%81%ABuid%E3%82%92%E5%90%AB%E3%82%81%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E6%A8%A9%E9%99%90%E5%91%A8%E3%82%8A%E3%82%92Firestore%E3%81%A7%E3%82%84%E3%82%8B%E3%81%AB%E3%81%AF/</guid>
      <description>あきらめましょう&#xA;通常のKVSのようにドキュメントにオーナーのユーザIDを含めてセキュリティルールでオーナー以外を弾く設定をしましょう&#xA;おわり&#xA;.&#xA;.&#xA;.&#xA;.&#xA;.&#xA;.&#xA;っとしても良いのだけどどうせならexampleでも&#xA;まずベースとなるモデルを定義します.&#xA;このモデルをベースにモデルを作ります.&#xA;// BaseModel.ts export default abstract class BaseModel { // ドキュメントオーナーのID readonly userID: string; // ドキュメントのID id: string | null; // ドキュメントの作成･更新日時 timestamp: Date; constructor(userID: string, timestamp: Date) { this.userID = userID; this.timestamp = timestamp; } // Firestoreに保存するとき用 abstract toJSON(): Object; } toJSONはデータベースに保存する際に特定のプロパティのみを保存するためにあります.&#xA;これを定義すればidを保存対象から無視できます.&#xA;このBaseModelを継承したToDoModelを実装します.&#xA;// ToDoModel.ts import BaseModel from &amp;#39;./BaseModel&amp;#39;; export default class ToDoModel extends BaseModel { // タイトル title: string; // ToDoが完了したかどうか completed: boolean = false; constructor(userID: string, title: string, timestamp: Date) { super(userID, timestamp); this.</description>
    </item>
    <item>
      <title>react-nativeのpackagerが&#34;Ambiguous resolution of react-native&#34;とエラーを吐いたら試すこと</title>
      <link>https://github.pyyoshi.com/blog/2017/09/react-native%E3%81%AEpackager%E3%81%8CAmbiguous-resolution-of-react-native%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E5%90%90%E3%81%84%E3%81%9F%E3%82%89%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8/</link>
      <pubDate>Wed, 27 Sep 2017 03:36:06 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/09/react-native%E3%81%AEpackager%E3%81%8CAmbiguous-resolution-of-react-native%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E5%90%90%E3%81%84%E3%81%9F%E3%82%89%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8/</guid>
      <description>$ npm cache clean &amp;amp;&amp;amp; yarn cache clean $ watchman watch-del-all $ rm -rf node_module/ $ rm -rf ios/build/ $ npm start -- --reset-cache 上記各パターンを試す&#xA;それで解決しなかったら知らね&#xA;ちなみに一番最後の--reset-cacheのやつで私は解決した</description>
    </item>
    <item>
      <title>XcodeでCoreFoundationなどのフレームワークのビルドに失敗した</title>
      <link>https://github.pyyoshi.com/blog/2017/09/Xcode%E3%81%A7CoreFoundation%E3%81%AA%E3%81%A9%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F/</link>
      <pubDate>Tue, 26 Sep 2017 16:40:51 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/09/Xcode%E3%81%A7CoreFoundation%E3%81%AA%E3%81%A9%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F/</guid>
      <description>Xcodeがぶっ壊れたと思って入れ直したり8.3.3に戻したりしたが治らずに利用しているモジュールの強豪が原因かと思ってしらべてみてもダメでもう諦めようかと思ったときに&#xA;Xcodeがお前のそのプロジェクト更新したるわ!ってサジェストされたので実行したら問題なく動いた／(^o^)＼&#xA;で, 何が原因かというと&#xA;そのモジュールは&#xA;IPHONEOS_DEPLOYMENT_TARGET = 7.0; で&#xA;自分のは&#xA;IPHONEOS_DEPLOYMENT_TARGET = 10.3; で食い違っていたことが原因? でした. というか7.0がだめだったくさい. 他のモジュールは8.0でも問題はありませんでした.&#xA;その時の修正がこちら&#xA;以上</description>
    </item>
    <item>
      <title>お仕事探してます</title>
      <link>https://github.pyyoshi.com/blog/2017/08/%E3%81%8A%E4%BB%95%E4%BA%8B%E6%8E%A2%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99/</link>
      <pubDate>Mon, 07 Aug 2017 15:00:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/08/%E3%81%8A%E4%BB%95%E4%BA%8B%E6%8E%A2%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99/</guid>
      <description>追記: 2017/08/08 なんだかんだで1年ほどバタバタしていましたが, 今月よりお仕事探しを本格的にやっていきます. 以下と大体同じ内容ですがポートフォーリオも用意しています.&#xA;現在(2017/08現在)は宮城に住んでいます.&#xA;リモート勤務または東京周辺でのお仕事を希望しています.&#xA;副業可能だととてもうれしいです.&#xA;PythonとかGoとかJavascript(React.js)とか使える会社探し中.&#xA;バックエンドからフロントエンドまで幅広くできるので, そういう会社を探してる.&#xA;ただメインはバックエンドでサービス基盤の開発をやりたいと思ってる.&#xA;とりあえず触れるもの一覧 言語 Go(現在のプロダクトで使ってる) Javascript(現在のプロダクトで使ってる) PHP(現在のプロダクトで使ってる) Python(Goが出るまで愛用. 今でもたまにflaskで遊んだり) Ruby(2013〜14のRailsを一年ほど. 最近はまったく) フレームワーク Go Gin Goa(最近これでAPI周りの設計やってる) net/http Javascript AngularJS(not Angular) React Native(iOS/Android) PHP PhalconPHP ツール/ミドルウェアなど Ansible(主に開発環境構築) Docker Jenkins MySQL nginx Packer(主に開発環境構築) Redis Vagrant(主に開発環境構築) プラットフォーム Google Cloud Platform お仕事(過去/現在) 広告配信基盤(CMS的な部分とJSによる配信部分) リアルタイム系(Socket.ioとRailsを利用したiPad向けアプリ) ブラウザ拡張(NPAPIを利用. Chrome/Firefox) ソシャゲ攻略系アプリ(Android) EdTech(サービス) サイトとか Github Wantedly ポートフォーリオ 連絡先 Githubに掲載しているメールアドレス,&#xA;またはWantedlyよりお願いします.</description>
    </item>
    <item>
      <title>brotli</title>
      <link>https://github.pyyoshi.com/blog/2017/02/brotli/</link>
      <pubDate>Tue, 28 Feb 2017 09:29:30 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/02/brotli/</guid>
      <description>webpackで1つにまとめたjsファイルをbrotliの各クオリティで圧縮した時の結果&#xA;466672 01.bro 373460 02.bro 366124 03.bro 350601 04.bro 323214 05.bro 316377 06.bro 310214 07.bro 308041 08.bro 305842 09.bro 282184 10.bro 1715473 original.js 458685 01.gz 439210 02.gz 427238 03.gz 394577 04.gz 379778 05.gz 373972 06.gz 372625 07.gz 371238 08.gz 371221 09.gz 1715473 original.js quality=1ではgzipに負けるが2以降はbrotliの圧勝&#xA;圧縮・伸長時間やそれの複数回の計測を行っていないので採用できるかどうかまだわからないけど, とりあえず採用してみるか! はありな気がしますね.&#xA;モバイルなどの品質があまり良くない環境だと強そうですね.&#xA;ただbrotliをhttp上で使うにはhttps必須なので注意が必要かと</description>
    </item>
    <item>
      <title>bazelでdockerコンテナを作るのつらい</title>
      <link>https://github.pyyoshi.com/blog/2017/02/bazel%E3%81%A7docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%A4%E3%82%89%E3%81%84/</link>
      <pubDate>Mon, 27 Feb 2017 04:45:13 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/02/bazel%E3%81%A7docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%A4%E3%82%89%E3%81%84/</guid>
      <description>で, 結局</description>
    </item>
    <item>
      <title>X96 TV Box(ARMv8)にArmbianなUbuntu 16.04を入れる</title>
      <link>https://github.pyyoshi.com/blog/2017/02/X96-TV-BoxARMv8%E3%81%ABArmbian%E3%81%AAUbuntu-16.04%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</link>
      <pubDate>Wed, 22 Feb 2017 01:47:04 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/02/X96-TV-BoxARMv8%E3%81%ABArmbian%E3%81%AAUbuntu-16.04%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</guid>
      <description>(2018/01/07 リンク切れを修正しました)&#xA;armv8環境が欲しかったのでお手頃な値段でそれなりのスペックなX96をgearbestで購入&#xA;http://www.gearbest.com/tv-box-mini-pc/pp_471548.html&#xA;たしか送料込みで5500円くらいだったかな&#xA;SoC: S905X RAM: 2GB STORAGE: 16GB(ただし今回はSDカードからのブートなので関係なし)&#xA;S905向けのLinuxやu-bootをすでに開発している人がいたので導入はさくっと終わりました&#xA;導入の際 付属のリモコンを利用しなくてはいけないので受信機の接続とリモコンに単4電池2本を入れて準備しておいてください(USBキーボードがある場合は必要ありません)&#xA;あと上記で察しがつくと思いますが内部ストレージへの書き込みはu-bootの更新だけでAndroidは消されないので安心してください&#xA;以下導入手順&#xA;1. u-bootを書き換える https://yadi.sk/d/bqV6MEL-sWKmv/v05&#xA;からaml_autoscript aml_autoscript.zipをDLし,&#xA;SDカードのルートにaml_autoscript aml_autoscript.zipを置く&#xA;こんなかんじ&#xA;/sdcard ├── aml_autoscript └── aml_autoscript.zip そしてSDCARDを起動しておいたX96に差し込んで&#xA;HOME -&amp;gt; Apps -&amp;gt; UPDATE&amp;amp;BACKUP と進みます&#xA;オレンジ色のAppsをクリック&#xA;右下のUPDATE&amp;amp;BACKUPをクリック&#xA;そして以下画面に映ると思います&#xA;中央右にSelectがあるのでクリックして先ほどSDCARDへ入れたaml_autoscript.zipを選択してUpdateをクリックしてウィザードに従いアップデートを行います&#xA;アップデートが完了するとX96が再起動します&#xA;これでu-bootの更新は完了です&#xA;2. Ubuntuを導入 ここからArmbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img.xzをダウンロードして展開します.&#xA;X96からSDCARDを取り外してPCへ挿入してフォーマットしてddコマンドでSDCARDへとOSイメージを書き込みます&#xA;ddコマンドに限った話じゃありませんが書き込み先のディスクを誤ると大変なことになるので不安がある人はWindowsの場合はWin32DiskImagerなどのGUIを利用することをおすすめします&#xA;今回は私はmacOSでddコマンドを利用しました&#xA;まずはdiskutil listでSDCARDのdevツリーを確認します&#xA;そして&#xA;sudo dd if=/Users/username/Downloads/Armbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img of=/dev/rdiskXXX bs=1m として書き込みました(結構時間かかるので作業の合間にやるのをおすすめします)&#xA;暇な人はCtrl-Tで進捗確認しながらでもｗ&#xA;3. Ubuntuの起動 X96の電源を落とした状態で先ほどOSイメージを書き込んだSDCARDを挿入しX96を起動します&#xA;LinuxKernelの起動ログが流れます&#xA;初回起動時にrootへパスワード1234でログインして新しいパスワードの変更と&#xA;新しいユーザの作成ウィザードが表示されるのでそれに従ってください&#xA;それが完了すると再起動されてUbuntu Mateの画面がでるかとおもいます&#xA;あとはキーボード・マウスをさして煮るなり焼くなりしてください&#xA;雑感 導入の楽さに開発者に圧倒的感謝！ :D</description>
    </item>
    <item>
      <title>リモートワークについて</title>
      <link>https://github.pyyoshi.com/blog/2017/02/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Wed, 08 Feb 2017 07:13:09 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2017/02/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>3年弱リモートワークやってきて思ったこと&#xA;出社してやる仕事より5倍位連絡の取り合いが必要&#xA;面と向かって仕事していると相手の状態の把握がし易いけど， リモートだとそうはいかなくて抱え込むストレスの量が半端じゃない&#xA;ちゃんと仕組みを考えて， メリット・デメリットを考えてやりましょうって話ですね</description>
    </item>
    <item>
      <title>redigoのPoolとredigomockを利用する方法</title>
      <link>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 07 Dec 2016 18:20:12 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>redigoのredis.Poolはredis.Connとは異なりインタフェースではなく構造体として定義されています.&#xA;それとredigomockはredis.Poolを生成する機能を有していないことからぱっと見使うことができないだろうなっと判断しましたが&#xA;よくよく考えてみるとredis.Poolで利用する関数群をインタフェースとして定義すれば良いのではないかと気づきがあったので共有します.&#xA;以下Example&#xA;// service.go package service import (...) // 省略 type RedigoPool interface { Get() redis.Conn Close() error } type ExampleService struct { pool RedigoPool // *redis.Poolを直接定義せず, RedigoPoolというインタフェースを利用する } func (s *ExampleService) HmSetWithExpire(key string, a, b int64, expireSeconds uint) (interface{}, error) { redisConn := s.pool.Get() defer redisConn.Close() redisConn.Send(&amp;#34;MULTI&amp;#34;) redisConn.Send(&amp;#34;HMSET&amp;#34;, key, &amp;#34;a&amp;#34;, a, &amp;#34;b&amp;#34;, b) redisConn.Send(&amp;#34;EXPIRE&amp;#34;, key, expireSeconds) reply, err := redisConn.Do(&amp;#34;EXEC&amp;#34;) if err != nil { return nil, err } return reply, nil } // service_test.</description>
    </item>
    <item>
      <title>Let&#39;s encryptをnginxで利用する際の注意点</title>
      <link>https://github.pyyoshi.com/blog/2016/11/Lets-encrypt%E3%82%92nginx%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Mon, 14 Nov 2016 01:17:47 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/11/Lets-encrypt%E3%82%92nginx%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>certbot-autoを利用する. renewする際は--nginx引数を入れること. 例) $ /opt/letsencrypt/certbot-auto renew --nginx 特にrenewに関してはこの引数を追加しないとPort 443が他のプロセスで使われているから更新できない主旨のエラーが吐かれる.&#xA;digitaloceanのガイドにはこれ載ってないのだけど, ちゃんと更新できるか確認したのか疑問が残る.</description>
    </item>
    <item>
      <title>個人開発でお世話になっているサービス</title>
      <link>https://github.pyyoshi.com/blog/pages/subsc-services-list/</link>
      <pubDate>Mon, 31 Oct 2016 20:47:58 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/pages/subsc-services-list/</guid>
      <description>特に利用しているものをリストアップしている.&#xA;※2018年1月1日現在&#xA;有償 Apple Music(980円 / 月): BGM代わり Conoha VPS: PoCに利用したり, Jenkins動かしたり Docker Cloud(7ドル / 月): プライベートなベースコンテナをアップしてる Github(7ドル / 月): お仕事リポジトリなどなど Google Cloud Platform: 主にCompute Engine, Cloud Storage, Cloud SQL Grammarly: 英語文法添削サービス. 18年1月より使い始めた. 無償 AppVeyor: Windows用パッケージのビルド Bitbucket: バックアップ用途などで利用 Discord: 主にVC Fabric: モバイルアプリのクラッシュ解析で重宝! Flickr: 開発環境で利用する素材(CCライセンス)に利用 Pinterest: アプリのUI/UXなどのデザインの参考にしたり Slack: いわずもがな Travis Ci: 自動テストで利用 これまで使っていたもの esa.io(500円 / 月): ひとりドキュメント駆動開発🐣 </description>
    </item>
    <item>
      <title>OGPやTwitter Cardsなどの画像解像度について</title>
      <link>https://github.pyyoshi.com/blog/2016/10/OGP%E3%82%84Twitter-Cards%E3%81%AA%E3%81%A9%E3%81%AE%E7%94%BB%E5%83%8F%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Tue, 25 Oct 2016 18:25:48 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/10/OGP%E3%82%84Twitter-Cards%E3%81%AA%E3%81%A9%E3%81%AE%E7%94%BB%E5%83%8F%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>OGPなどに対応している各サービスごとに最適な解像度が変わってくると思ったのでちょっと調査してみた.&#xA;※2016年10月26日現在&#xA;Twitter Cards | 種類 | 幅 | 高さ | サイズ | |-------------------------------|-----------|-----------|---------| | Summary Card with Large Image | 280px以上 | 150px以上 | 1MB未満 | | Photo Card(Web) | 435px以下 | 375px以下 | 1MB未満 | | Photo Card(Mobile Retinaなし) | 280px以下 | 375px以下 | 1MB未満 | | Photo Card(Mobile Retinaあり) | 560px以下 | 750px以下 | 1MB未満 | http://www.tablesgenerator.com/markdown_tables https://dev.twitter.com/cards/types/summary-large-image https://dev.twitter.com/cards/types/photo Facebook OGP | 種類 | 幅 | 高さ | サイズ | |------------|------------|-----------|---------| | Retina推奨 | 1200px以上 | 630px以上 | 8MB未満 | | 通常 | 600px以上 | 315px以上 | 8MB未満 | | 最小 | 200px | 200px | 8MB未満 | http://www.</description>
    </item>
    <item>
      <title>slackのチャットログをお手軽バックアップ</title>
      <link>https://github.pyyoshi.com/blog/2016/10/slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%AD%E3%82%B0%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97/</link>
      <pubDate>Tue, 18 Oct 2016 01:09:16 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/10/slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%AD%E3%82%B0%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97/</guid>
      <description>課金していると簡単にすべてのログをエクスポートできる機能がSlackのダッシュボードに備わっているが無料版を利用しているとプライベートチャンネルなどの一部のログをエクスポートすることができない.&#xA;これではちょっと困るのでどうにかしたいと思って調べたらslack-dumpというGo製のツールが存在していたので, それをフォークして自分にあった挙動へ修正したものをリリースしました.&#xA;こちらから各プラットフォームに合わせたバイナリをダウンロードしてお使いください.&#xA;またslack-dumpを利用するにあたってAPIトークンを取得する必要があります.&#xA;こちらから取得しておいてください.&#xA;使い方&#xA;$ slack-dump -t &amp;lt;取得したトークン&amp;gt; で閲覧可能なすべてのチャンネルのログ及びDMを取得することが可能です.&#xA;取得できる範囲はAPIトークンを生成したアカウントの権限によって変わりますので&#xA;すべて取得したい方はAdmin権限からトークンを生成することをおすすめします.</description>
    </item>
    <item>
      <title>[ReactJS] Server side renderingのライフサイクル</title>
      <link>https://github.pyyoshi.com/blog/2016/09/ReactJS-Server-side-rendering%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</link>
      <pubDate>Thu, 29 Sep 2016 23:19:01 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/09/ReactJS-Server-side-rendering%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</guid>
      <description>サーバ側で__componentWillMount__は呼ばれるがcomponentDidMountは呼ばれない.&#xA;windowなどのブラウザでしか触れないものはcomponentDidMountで行う.&#xA;という知見を得た.&#xA;そりゃそうだ…&#xA;ref: Component Specs and Lifecycle | React</description>
    </item>
    <item>
      <title>golangでstructにマッピング前にJSONの特定のプロパティの値を確認したい</title>
      <link>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</link>
      <pubDate>Tue, 13 Sep 2016 06:11:20 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</guid>
      <description>上記をやりたいことがたまにある.&#xA;具体的に言うと&#xA;type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.4&amp;#34; Y string `json:&amp;#34;y&amp;#34;` // value: &amp;#34;123.4&amp;#34; } type DataV2 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v2&amp;#34; X int64 `json:&amp;#34;x&amp;#34;` // value: 123.4 Y int64 `json:&amp;#34;y&amp;#34;` // value: 123.4 } DataV1のX, Yはstring型だが. 次バージョンのDataV2ではint64になっている.&#xA;中の構造体がバージョンごとに変わっているために振り分けをしたい!&#xA;そういう時にgithub.com/antonholmquist/jasonが役に立ちました.&#xA;極端なコードで恐縮ですが&#xA;package main import &amp;#34;github.com/antonholmquist/jason&amp;#34; type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.</description>
    </item>
    <item>
      <title>ブログ鯖の更新</title>
      <link>https://github.pyyoshi.com/blog/2016/09/%E3%83%96%E3%83%AD%E3%82%B0%E9%AF%96%E3%81%AE%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Mon, 05 Sep 2016 03:44:36 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/09/%E3%83%96%E3%83%AD%E3%82%B0%E9%AF%96%E3%81%AE%E6%9B%B4%E6%96%B0/</guid>
      <description>新しいVPS鯖へ移行させた.&#xA;Ubuntu16.04にしたのでhttp2対応とブログシステムをAccelerated Mobile Pagesへ対応した.&#xA;こんな感じになる.&#xA;ちな ブログシステムはdockerコンテナで管理するようにしたので更新がだいぶ楽になった.&#xA;備忘録:&#xA;letsencryptは現状certbot-autoで証明書を発行したほうがいい. 久しぶりにやったのでletsencrypt-autoで嵌った. nginx公式が配布しているPPAだとsite-availableやsite-enabledが使えないので注意. これも嵌った;_; </description>
    </item>
    <item>
      <title>golang: 関数の参照渡し(ポインタ)と値渡しと返り値の速度の違いとか</title>
      <link>https://github.pyyoshi.com/blog/2016/08/golang-%E9%96%A2%E6%95%B0%E3%81%AE%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E3%81%8B/</link>
      <pubDate>Fri, 19 Aug 2016 19:07:19 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/08/golang-%E9%96%A2%E6%95%B0%E3%81%AE%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E3%81%8B/</guid>
      <description>引数&#xA;でかい構造体・配列はポインタで受け取るほうが速い. 返り値&#xA;構造体・配列のポインタを返すのは遅い 以下検証コード</description>
    </item>
    <item>
      <title>react-routerのpush時に遷移先コンポネントにpropsを渡したい</title>
      <link>https://github.pyyoshi.com/blog/2016/07/react-router%E3%81%AEpush%E6%99%82%E3%81%AB%E9%81%B7%E7%A7%BB%E5%85%88%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABprops%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84/</link>
      <pubDate>Fri, 29 Jul 2016 01:01:17 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/07/react-router%E3%81%AEpush%E6%99%82%E3%81%AB%E9%81%B7%E7%A7%BB%E5%85%88%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABprops%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84/</guid>
      <description>※結論から言うとpropsを渡すことはできないが代替策はある.&#xA;例えば, すでに遷移先で描画するためのデータを現在のページで持っている場合はそれを利用して描画を行い, 足らないデータを遷移後取得して更新したい.&#xA;こんなユースケースがあると思う.&#xA;そういう時は&#xA;push({ pathname: &amp;#39;/users/1&amp;#39;, state: { profile: { id: &amp;#39;1&amp;#39;, name: &amp;#39;PyYoshi&amp;#39;, bio: &amp;#39;Uooo&amp;#39;, iconURL: &amp;#39;http://example.com/icon.jpg&amp;#39; } } }); というように stateにオブジェクトを渡してあげる.&#xA;そうすると props.location.stateに渡したオブジェクトが格納されている.&#xA;これを利用すれば上記ユースケースへの対応を行うことができる.&#xA;参考 react-router API Doc </description>
    </item>
    <item>
      <title>Unity 5.3.xのUnityFSの構造</title>
      <link>https://github.pyyoshi.com/blog/2016/07/Unity-5.3.x%E3%81%AEUnityFS%E3%81%AE%E6%A7%8B%E9%80%A0/</link>
      <pubDate>Sat, 16 Jul 2016 07:58:03 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/07/Unity-5.3.x%E3%81%AEUnityFS%E3%81%AE%E6%A7%8B%E9%80%A0/</guid>
      <description>Common AssetBundleヘッダー 以下を順番に処理&#xA;signature(cstring): UnityRaw|UnityWeb|UnityFSなど. 基本的にこの3つのどれか. format_version(int32): 6など. ファイルのバージョン. unity_major_version(cstring): 5.x.xなど. unity_version(cstring): 5.3.4p6など. file_size(int64): ファイルサイズ. ciblock_size(uint32): アセット情報のサイズ. uiblock_size(uint32): lz4読み込み用アセット情報のサイズ. flags(uint32): 圧縮フラグ. compression_type: (flags &amp;amp; 0x3f) =&amp;gt; 0: なし, 1: LZMA, 2: LZ4, 3: LZ4HC, 4: LZHAM. Block (int32): Unknown. (int32): Unknown. (int16): Unknown. Node offset(int64): AssetBundleヘッダーの位置からのオフセット. size(int64): Nodeのサイズ. (int32): Unknown. name(cstring): Node名. CAB-abcdefgxxxxxなど. 5.3.3 (書きかけ)&#xA;5.3.4 Blockが格納されている箇所までseekする. file_size - ciblock_size. ciblock_size分read. 変数をblocks_containerとする. compression_typeがNONEの場合はそのままblocks_containerを利用する. 変数をblocks_containerとする. compression_typeがNONE以外の場合は更にuiblock_size分readして伸張する. =&amp;gt; 変数をblocks_containerとする. blocks_container.guid(16bytes): Unknown. たぶんGUID. blocks_container.</description>
    </item>
    <item>
      <title>WIP: realm-jsのトランザクションが扱いづらい</title>
      <link>https://github.pyyoshi.com/blog/2016/06/WIP-realm-js%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E6%89%B1%E3%81%84%E3%81%A5%E3%82%89%E3%81%84/</link>
      <pubDate>Mon, 06 Jun 2016 00:35:24 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/06/WIP-realm-js%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E6%89%B1%E3%81%84%E3%81%A5%E3%82%89%E3%81%84/</guid>
      <description>React Native上でのおはなし&#xA;現状扱いづらい部分が2点ほど.&#xA;トランザクション内で例外が流れてもロールバックされない write内で別のモデルを処理しようとしても動かない 不便！！！ って記事書こうと思いつつ再現コード書いてたら上の問題ぜんぜん起きなかった！&#xA;なぜだ！！！！！！！！！&#xA;そのときのコード&#xA;引き続き調査するー&#xA;(2016/06/06 18:55更新)&#xA;2に関して どうやらasync/awaitでcreateとの間を挟むとだめなようだ.&#xA;たぶんだけど これと同様に1もそれに関わる問題だと思われる.&#xA;babelがどうpolyfilなコードに変換しているか調査しないとだめそう…？&#xA;該当コード&#xA;babelによる変換後のコード</description>
    </item>
    <item>
      <title>react-nativeのImageコンポーネントのURLキャッシュの挙動</title>
      <link>https://github.pyyoshi.com/blog/2016/05/react-native%E3%81%AEImage%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AEURL%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E6%8C%99%E5%8B%95/</link>
      <pubDate>Mon, 30 May 2016 23:21:18 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/05/react-native%E3%81%AEImage%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AEURL%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E6%8C%99%E5%8B%95/</guid>
      <description>割りと困ったので備忘録&#xA;Imageコンポーネントを利用すると自動でリクエストをキャッシュするようになっているのだけど, 初回リクエスト時に500を返しちゃうと以降ずっと500だと認識しちゃって正しく動作しない問題にぶち当たりました.&#xA;onError関数でエラーログを吐かせるとこんな感じに&#xA;The operation couldn’t be completed. (NSURLErrorDomain error 500.)&#xA;経緯としては&#xA;0.26以前は画像URLがリダイレクト(301||302)するものを利用していると正しく画像が読み込めないバグが有ってそれを踏んでしまい, その後0.26.2へ更新したら上記のバグが再現するようになりました.&#xA;現状Imageコンポーネントのキャッシュを削除するAPIがJavascriptでは生えてないので一度アプリを削除する必要がある.&#xA;これ開発している時に起きる分にはリセットで済むから良いのだけど, プロダクション環境で起きちゃうとユーザにアプリを再インストールする手間をかけさせちゃうから最悪だなー.&#xA;いちよトリックはあって, クエリにランダムな文字列を与えればいい.&#xA;ただ, これだと常にキャッシュされなくなってしまうので注意が必要だ…&#xA;&amp;lt;img src={/public/hoge.jpg?${Math.random()}}/&amp;gt; </description>
    </item>
    <item>
      <title>ここ最近のGo環境</title>
      <link>https://github.pyyoshi.com/blog/2016/05/%E3%81%93%E3%81%93%E6%9C%80%E8%BF%91%E3%81%AEGo%E7%92%B0%E5%A2%83/</link>
      <pubDate>Mon, 30 May 2016 13:55:38 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/05/%E3%81%93%E3%81%93%E6%9C%80%E8%BF%91%E3%81%AEGo%E7%92%B0%E5%A2%83/</guid>
      <description>go1.6.2 vscode-go glide を利用している.&#xA;Vimは使い慣れてないけどIntelijまで使わなくていいかなーって時にvscode-go見つけてからずっと愛用してる.&#xA;vscode-goはエディタ内でデバッグが容易なのでぜひ使ってもらいたい.&#xA;glideはgo1.5からの機能のvendoringを活かした依存関係管理ツール.&#xA;こいつのいいところはもちろん標準のvendoringをそのまま使えることにあるのだけど.&#xA;その他にプライベートリポジトリにも対応していて, 仕事関係はOSSにできない部分も結構あるのでたいへん助かっている.&#xA;glideやvscode-goの使い方などはドキュメント通りに進めれば特に難しいことはない(Go使ってるくらいなら事故解決できるよね？)ので試すだけでも価値あると思います.&#xA;あと最近気になってるのはUberが開発してるFlameGraphだろうか.&#xA;https://github.com/uber/go-torch</description>
    </item>
    <item>
      <title>当ブログをHTTPS化</title>
      <link>https://github.pyyoshi.com/blog/2016/05/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92HTTPS%E5%8C%96/</link>
      <pubDate>Mon, 30 May 2016 06:17:15 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/05/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92HTTPS%E5%8C%96/</guid>
      <description>今更 letsencryptでここをHTTPS化した.&#xA;ついでにHTTP2.0への対応も行ってみたのだが, Firefoxではちゃんと認識するが, Chromeでは認識してくれない.&#xA;いろいろ調べたらChromeは51でNPNを廃止してALPNを利用するようになったみたいで,&#xA;サーバが使っているOpenSSLが1.0.2以降でないとALPNが利用できないために, HTTP2.0と認識してくれないみたいだ.&#xA;現状 Ubuntu 14.04ではそうそう1.0.2+が降ってこないと思うのでUbuntu16.04に更新しないといけませんね 😹</description>
    </item>
    <item>
      <title>reactjsとgoa</title>
      <link>https://github.pyyoshi.com/blog/2016/05/reactjs%E3%81%A8goa/</link>
      <pubDate>Sun, 22 May 2016 20:27:22 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2016/05/reactjs%E3%81%A8goa/</guid>
      <description>やっと落ち着けるフロントエンドとバックエンドに巡り会えた気がすると, 最近実感してる.&#xA;いま稼働しているのはangularjs+phalconphpなんだけど&#xA;これをreactjs+goaでリプレイスする作業を急ピッチで行ってる.&#xA;俺はreactjsとgoaを極めるぜ！</description>
    </item>
    <item>
      <title>react-native &#43; react-reduxの導入の際の注意点</title>
      <link>https://github.pyyoshi.com/blog/2015/12/react-native--react-redux%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%AE%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Fri, 11 Dec 2015 18:24:13 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/12/react-native--react-redux%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%AE%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>現時点でのreact-native最新バージョンは0.16&#xA;このバージョンはBabel6を利用しています.&#xA;よって他の依存パッケージ react-reduxなども必然的にbabel6に対応しなくては行けません.&#xA;が, react-reduxの最新版はreact-nativeに対応しておらず, 公式では3.1.0を推奨しています. この3.1.0はBabel6に対応していません.&#xA;なので正しくjsをビルドできない可能性が出てきます.&#xA;よってreact-nativeを最新ではなくbabel5を利用している0.15.0までダウングレードを行い開発を進めていくと良いかと思います.&#xA;package.jsonは以下&#xA;&amp;#34;dependencies&amp;#34;: { &amp;#34;react-native&amp;#34;: &amp;#34;^0.15.0&amp;#34;, &amp;#34;react-redux&amp;#34;: &amp;#34;^3.1.0&amp;#34;, &amp;#34;redux&amp;#34;: &amp;#34;^3.0.4&amp;#34; } react-reduxは最新でもBabel6に対応されていないのでしばらく様子見だと思います.</description>
    </item>
    <item>
      <title>ハイブリッドAppは手を出すにはまだ早い？</title>
      <link>https://github.pyyoshi.com/blog/2015/11/%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89App%E3%81%AF%E6%89%8B%E3%82%92%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E6%97%A9%E3%81%84/</link>
      <pubDate>Fri, 27 Nov 2015 22:36:44 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/11/%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89App%E3%81%AF%E6%89%8B%E3%82%92%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E6%97%A9%E3%81%84/</guid>
      <description>場合によりけりではあるけどJavascript+htmlで作るものに関してはまだまだ微妙かもしれないっと最近再認識した.&#xA;Crosswalkプロジェクトが出たことで随分と端末差異をフラットにできたけど, それはAndroidだけの話でiOSでは使えない(WKWebViewで実装してるリポジトリはあるが)&#xA;結局ハイブリッドはハイブリッドでWebViewに依存しなくちゃいけないのでまじめに技術調査してからでないと辛いことになる(なった)&#xA;Appleはさっさとサードパーティ製Javascriptエンジンを組み込むのを許可してくれ まじで！&#xA;話は変わるがiOSのChromeはWebViewを独自に拡張してWebPコーデックをサポートしていたりする. なのでそのChromeで表示してやるとアプリとして立ち上げたものよりパフォーマンスがよく安定していた. Google先生 iOS版ChromeをOSS化するかCrosswalkプロジェクトにコミットしてください 頼みます.&#xA;っという愚痴日記でした&#xA;お し り</description>
    </item>
    <item>
      <title>Ionic(Cordova)でiOS9のSlideOverに対応する</title>
      <link>https://github.pyyoshi.com/blog/2015/11/IonicCordova%E3%81%A7iOS9%E3%81%AESlideOver%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
      <pubDate>Tue, 10 Nov 2015 16:27:03 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/11/IonicCordova%E3%81%A7iOS9%E3%81%AESlideOver%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
      <description>Xcodeプロジェクト設定のGeneralでiPadの向き設定をPortrait, Upside Down, Landscape Left, Landscape Rightにチェックを入れる.&#xA;新しいLaunch Screen.storyboardを追加してGeneralのApp Icons and Launch Imagesにセット.&#xA;これでビルドするとしっかりとSlideOverできる.&#xA;SlideOverへの対応だが注意が必要なのがサイドメニューを実装した場合 常にナビゲーションに表示するかタブによる管理をしなくてはいけない.&#xA;これはタッチでスライドメニューを出そうとするとSlideOverが閉じようとしてしまうためだ.&#xA;この問題と同様に, ナビゲーションには以前のビューに戻るためのボタンも用意してあげなくてはいけない.&#xA;UI/UXで注意しなくてはいけないことが多いけど, これをしっかりすればかなり便利になるのではないでしょうか？</description>
    </item>
    <item>
      <title>ReactJSで作るモバイルアプリフレームワーク Reapp</title>
      <link>https://github.pyyoshi.com/blog/2015/11/ReactJS%E3%81%A7%E4%BD%9C%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Reapp/</link>
      <pubDate>Mon, 09 Nov 2015 23:09:33 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/11/ReactJS%E3%81%A7%E4%BD%9C%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Reapp/</guid>
      <description>Reapp&#xA;どんなものなのか試してみたので, アプリのビルド手順を残しておく&#xA;ビルド $ git clone https://github.com/reapp/kitchen-sink $ cd kitchen-sink $ npm install -g cordova reapp package.json をここ のdependenciesへ変更する&#xA;$ npm install iOS向けのビルド&#xA;$ reapp build ios $ mkdir cordova-ios $ cd cordova-ios $ cordova create kitchen $ cd kitchen $ cordova platform add ios $ cordova plugin add cordova-plugin-wkwebview $ cordova plugin add cordova-plugin-console $ cordova plugin add cordova-plugin-device $ cordova plugin add cordova-plugin-inappbrowser $ cordova plugin add cordova-plugin-statusbar $ rm -r www $ ln -s .</description>
    </item>
    <item>
      <title>imagemagickでメイン画像とマスク画像を綺麗に合成する</title>
      <link>https://github.pyyoshi.com/blog/2015/10/imagemagick%E3%81%A7%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E5%83%8F%E3%81%A8%E3%83%9E%E3%82%B9%E3%82%AF%E7%94%BB%E5%83%8F%E3%82%92%E7%B6%BA%E9%BA%97%E3%81%AB%E5%90%88%E6%88%90%E3%81%99%E3%82%8B/</link>
      <pubDate>Fri, 30 Oct 2015 16:59:15 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/10/imagemagick%E3%81%A7%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E5%83%8F%E3%81%A8%E3%83%9E%E3%82%B9%E3%82%AF%E7%94%BB%E5%83%8F%E3%82%92%E7%B6%BA%E9%BA%97%E3%81%AB%E5%90%88%E6%88%90%E3%81%99%E3%82%8B/</guid>
      <description>スマフォゲームではアルファチャンネル付き画像はコスパが悪いため使われることは少なく メインの画像とマスク画像の2つを合成して描画することが多い. PCのシナリオゲームもそうすることが多い.&#xA;この2つの画像をうまいこと1つのアルファチャンネル付き画像に合成したい場合がある.&#xA;そういう時は以下のコマンドで想定通りの画像ができあがると思う.&#xA;参考: Partial Transparency lost on composite - ImageMagick</description>
    </item>
    <item>
      <title>インターリンクのルーティングがごみ</title>
      <link>https://github.pyyoshi.com/blog/2015/09/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%8C%E3%81%94%E3%81%BF/</link>
      <pubDate>Tue, 15 Sep 2015 18:43:51 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/09/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%8C%E3%81%94%E3%81%BF/</guid>
      <description>特にAWSを利用しているサービスで著しく接続がつながりにくくなったりDL速度が1KB/sになったりする&#xA;tracerouteしてみるとtwgateを経由してpingが高くなっていることもわかる&#xA;一例だが某サービスだと&#xA;台湾を経由してUSに接続しにいく始末&#xA;固定IPで利用できてお手頃な値段だからと使い始めたが値段には理由がありましたとさ</description>
    </item>
    <item>
      <title>xcode7でbitcode_strip周りでエラーが出た時の対処</title>
      <link>https://github.pyyoshi.com/blog/2015/08/xcode7%E3%81%A7bitcode_strip%E5%91%A8%E3%82%8A%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
      <pubDate>Sat, 29 Aug 2015 03:16:43 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/08/xcode7%E3%81%A7bitcode_strip%E5%91%A8%E3%82%8A%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
      <description>Build SettingsのUser-DefinedにSTRIP_BITCODE_FROM_COPIED_FILES =NOをセットする&#xA;参考:&#xA;Xcode 7 bitcode_strip error</description>
    </item>
    <item>
      <title>Facebook Graph APIでemailがどうしても欲しい場合</title>
      <link>https://github.pyyoshi.com/blog/2015/08/Facebook-Graph-API%E3%81%A7email%E3%81%8C%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E3%82%82%E6%AC%B2%E3%81%97%E3%81%84%E5%A0%B4%E5%90%88/</link>
      <pubDate>Thu, 13 Aug 2015 21:24:54 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/08/Facebook-Graph-API%E3%81%A7email%E3%81%8C%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E3%82%82%E6%AC%B2%E3%81%97%E3%81%84%E5%A0%B4%E5%90%88/</guid>
      <description>auth_type=rerequest, scope=emailで再度FB認証画面へ飛ばせばよい&#xA;https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.0#re-asking-declined-permissions</description>
    </item>
    <item>
      <title>go1.5の文字連結処理が速い</title>
      <link>https://github.pyyoshi.com/blog/2015/07/go1.5%E3%81%AE%E6%96%87%E5%AD%97%E9%80%A3%E7%B5%90%E5%87%A6%E7%90%86%E3%81%8C%E9%80%9F%E3%81%84/</link>
      <pubDate>Wed, 29 Jul 2015 23:46:45 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/07/go1.5%E3%81%AE%E6%96%87%E5%AD%97%E9%80%A3%E7%B5%90%E5%87%A6%E7%90%86%E3%81%8C%E9%80%9F%E3%81%84/</guid>
      <description>かなり長めの文字列を生成しなくてはいけなくて いろいろ調べてたのだけど&#xA;1.4とくらべて1.5では連結処理が速くなっていました.&#xA;普段 strings.Join を使ってしまう自分にはありがたい感じです.&#xA;コード&#xA;以下結果&#xA;go1.4.2&#xA;go1.5beta3&#xA;参考 Goの文字列結合のパフォーマンス </description>
    </item>
    <item>
      <title>KB3033929のインストールが失敗する</title>
      <link>https://github.pyyoshi.com/blog/2015/04/KB3033929%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</link>
      <pubDate>Sun, 05 Apr 2015 16:25:55 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/04/KB3033929%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</guid>
      <description>デュアルブートを一旦止めてからインストールすると治る</description>
    </item>
    <item>
      <title>SSL証明書を作成してGeoTrustへ提出</title>
      <link>https://github.pyyoshi.com/blog/2015/03/SSL%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6GeoTrust%E3%81%B8%E6%8F%90%E5%87%BA/</link>
      <pubDate>Wed, 25 Mar 2015 03:07:13 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/03/SSL%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6GeoTrust%E3%81%B8%E6%8F%90%E5%87%BA/</guid>
      <description>以下コマンドで秘密鍵・秘密鍵パスワード無し・CSRの3つを作成&#xA;$ openssl genrsa -des3 -out server.key 2048 -sha256 $ openssl req -new -sha256 -key server.key -out server.csr $ cp server.key server.nopasswd.key $ openssl rsa -in server.nopasswd.key -out server.nopasswd.key GeoTrustの管理画面へ移りReissue Certificate へ入り CSRファイルを貼り付けて送信&#xA;しばらくすると管理者アカウントのメールアドレスへ確認メールが来るので承認処理を行う&#xA;承認処理を行うとログインに利用したメールアドレス宛に鍵が2つ送られてくるので その2つを server.pem として保存&#xA;あとは肉なり焼くなり&#xA;っと書いたがnopasswordな秘密鍵は作らない方がいい.&#xA;漏れたらひとたまりもないので私は作っていない.</description>
    </item>
    <item>
      <title>VM環境のChromium41で起きる問題への対処</title>
      <link>https://github.pyyoshi.com/blog/2015/03/VM%E7%92%B0%E5%A2%83%E3%81%AEChromium41%E3%81%A7%E8%B5%B7%E3%81%8D%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
      <pubDate>Sat, 14 Mar 2015 18:33:02 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/03/VM%E7%92%B0%E5%A2%83%E3%81%AEChromium41%E3%81%A7%E8%B5%B7%E3%81%8D%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
      <description>VirtualBoxやVMWare上のLinux環境でChromium41(Chrome 41含む)を利用すると マウスクリックやテキスト選択などが正しく行えない問題が起きる&#xA;Issue 465660:&#x9;Cursor functionality broken in Ubuntu 14.04 since 41&#xA;まだ修正が行われていないので現状どうしようもないのだが&#xA;回避策としては過去のバージョンを入れることで可能だ&#xA;Ubuntu14.04の場合は&#xA;google-chrome-stableはリンクからバージョン40のdebパッケージをDLしてdpkg -i する&#xA;cd /tmp $ wget http://mirror.pcbeta.com/google/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_40.0.2214.95-1_amd64.deb $ sudo dpkg -i google-chrome-stable_40.0.2214.95-1_amd64.deb 以上</description>
    </item>
    <item>
      <title>fcitx環境のQt5.4で日本語入力できるようにする</title>
      <link>https://github.pyyoshi.com/blog/2015/03/fcitx%E7%92%B0%E5%A2%83%E3%81%AEQt5.4%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Tue, 03 Mar 2015 07:11:04 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/03/fcitx%E7%92%B0%E5%A2%83%E3%81%AEQt5.4%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
      <description>aptではなくQt Online Installerなどの公式が提供しているバイナリではfcitxを用いて日本語入力できない&#xA;これは plugins/platforminputcontexts に libfcitxplatforminputcontextplugin.so が存在しないために起きてしまう&#xA;なのでlibfcitxplatforminputcontextplugin.so を別途用意する必要がある&#xA;手順: 1 . ソースのチェックアウト $git clone https://github.com/fcitx/fcitx-qt5.git $cd fcitx-qt5 $git checkout 0.1.3 2 . ソースの編集 CMakeLists.txt の __5行目__をコメントアウト&#xA;#set(CMAKE_MODULE_PATH &amp;quot;${CMAKE_CURRENT_SOURCE_DIR}/cmake&amp;quot; ${CMAKE_MODULE_PATH})&#xA;3 . ビルド CMAKE_PREFIX_PATH にはqtインストール先を指定&#xA;$cmake . -DCMAKE_PREFIX_PATH=/home/piyopiyo/QtHome/5.4/gcc_64 $make 4 . モジュールのコピー src/libfcitxplatforminputcontextplugin.so が出来上がるので,&#xA;それを /home/piyopiyo/QtHome/5.4/gcc_64/plugins/platforminputcontexts などの plugins/platforminputcontexts へコピーする&#xA;4 . 設定 (行っていない場合) .bashrc などに export QT_IM_MODULE=fcitx を追加&#xA;P.S: なお, この問題をググって出てきた記事で apt-get fcitx-libs-qt5 でインストールした libfcitxplatforminputcontextplugin.so をコピーするというやり方が紹介されているが&#xA;上記の5.4などのaptで提供されていないものについてはセグフォってしまうので注意が必要だ</description>
    </item>
    <item>
      <title>VMWareでマウス5ボタンを利用できるようにする</title>
      <link>https://github.pyyoshi.com/blog/2015/02/VMWare%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B95%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 18 Feb 2015 18:16:27 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/02/VMWare%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B95%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
      <description>vmをシャットダウン後, vmxファイルに以下を追加&#xA;mouse.vusb.enable = &amp;#34;TRUE&amp;#34; mouse.vusb.useBasicMouse = &amp;#34;FALSE&amp;#34; usb.generic.allowHID = &amp;#34;TRUE&amp;#34; 以上</description>
    </item>
    <item>
      <title>Pen_Tablet.exeのメモリリーク</title>
      <link>https://github.pyyoshi.com/blog/2015/02/Pen_Tablet.exe%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF/</link>
      <pubDate>Mon, 16 Feb 2015 01:28:23 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/02/Pen_Tablet.exe%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF/</guid>
      <description>VirtualBoxを利用しているとメモリリークを起こす.&#xA;気づいたら1.3GBくらいメモリを利用してることがある.&#xA;どっちが原因なのかわからんがたぶんWacomの問題.&#xA;なのでVBox利用する場合はサービス「WTabletServiceCon」を停止すると良い.</description>
    </item>
    <item>
      <title>雑記</title>
      <link>https://github.pyyoshi.com/blog/2015/01/%E9%9B%91%E8%A8%98/</link>
      <pubDate>Sun, 25 Jan 2015 16:51:24 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/%E9%9B%91%E8%A8%98/</guid>
      <description>2週間くらいVBoxでLinux使って思ったこと&#xA;Linux on VBoxでうぇっぶ開発&#xA;MBAでうぇっぶ開発&#xA;どっちもつらい&#xA;Winさんでうぇっぶ開発もっとらくにならねーかな</description>
    </item>
    <item>
      <title>fcitxで日本語入力ができない場合</title>
      <link>https://github.pyyoshi.com/blog/2015/01/fcitx%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</link>
      <pubDate>Thu, 22 Jan 2015 06:48:46 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/fcitx%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</guid>
      <description>.bashrcとかに&#xA;export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&amp;#34;@im=fcitx&amp;#34; っとする.&#xA;IntelliJ Ideaでなんか日本語入力できないなと思ったら上記だったわ…</description>
    </item>
    <item>
      <title>Intelのアカウント作成とINDE</title>
      <link>https://github.pyyoshi.com/blog/2015/01/Intel%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90%E3%81%A8INDE/</link>
      <pubDate>Sat, 10 Jan 2015 19:27:33 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/Intel%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90%E3%81%A8INDE/</guid>
      <description>割りとめんどくさかったのでメモ&#xA;https://software.intel.com/en-us/&#xA;を開いて「Joinなんちゃら」からアカウント作成ページヘ&#xA;適当に入力項目を埋めていくのだが, パスワードの項目がまじでめんどくさかった&#xA;僕は常にKeepassXでパスワード生成してるんですが, Intelの場合はそうは行かなくて手打ちでやっていかなくてはいけない.&#xA;しかもパスワードバリデータのルールが示されているのだが, どうもこれ 書かれている以上のルールがあるっぽくて30分くらいこいつとたたかった.&#xA;そんでIntelトップからログイン&#xA;で, INDEのダウンロード&#xA;https://registrationcenter.intel.com/RegCenter/AutoGen.aspx?ProductID=2329&amp;amp;AccountID=&amp;amp;EmailID=&amp;amp;ProgramID=&amp;amp;RequestDt=&amp;amp;rm=COM&amp;amp;lang=&amp;amp;pass=yes&#xA;これは先ほど作成したemailを利用しなくてはいけない&#xA;登録していないものを利用するとアカウント作成しろっと出てくる.&#xA;ここでアカウント作成しようとしてもエラーがでるので注意</description>
    </item>
    <item>
      <title>AngularJS 僕にはまだはやかった</title>
      <link>https://github.pyyoshi.com/blog/2015/01/AngularJS-%E5%83%95%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E3%81%AF%E3%82%84%E3%81%8B%E3%81%A3%E3%81%9F/</link>
      <pubDate>Fri, 09 Jan 2015 00:15:23 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/AngularJS-%E5%83%95%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E3%81%AF%E3%82%84%E3%81%8B%E3%81%A3%E3%81%9F/</guid>
      <description>むずかしい&#xA;むずかしいよ&#xA;結構ガッツリAngularJSで書いちゃったけど, Ember.jsに変えようか検証始めてます.</description>
    </item>
    <item>
      <title>Intel QSVと相性の良いAviSynth Script (TSエンコ)</title>
      <link>https://github.pyyoshi.com/blog/2015/01/Intel-QSV%E3%81%A8%E7%9B%B8%E6%80%A7%E3%81%AE%E8%89%AF%E3%81%84AviSynth-Script-TS%E3%82%A8%E3%83%B3%E3%82%B3/</link>
      <pubDate>Mon, 05 Jan 2015 00:43:50 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/Intel-QSV%E3%81%A8%E7%9B%B8%E6%80%A7%E3%81%AE%E8%89%AF%E3%81%84AviSynth-Script-TS%E3%82%A8%E3%83%B3%E3%82%B3/</guid>
      <description>QSVの速さを最大限に使いたいならインタレ保持&#xA;# メモリ最大使用量 SetMemoryMax(512) # MultiThreads対応 SetMTMode(2, 0) # MPEG読み込み v=MPEG2Source(&amp;#34;__vid__&amp;#34;) # WAV読み込み a=WAVSource(&amp;#34;__aud__&amp;#34;) # VIDEOとAUDIOの結合 AudioDub(v,a) return last または&#xA;速さはほしいけどとりあえずプログレはほしい&#xA;# メモリ最大使用量 SetMemoryMax(512) # MultiThreads対応 SetMTMode(2, 0) # MPEG読み込み v=MPEG2Source(&amp;#34;__vid__&amp;#34;) # WAV読み込み a=WAVSource(&amp;#34;__aud__&amp;#34;) # VIDEOとAUDIOの結合 AudioDub(v,a) # 24fps化 AssumeTFF() Auto24FPS(true, 24, 16, &amp;#34;&amp;#34;, false) return last そもそも品質が良い動画がほしいならx264で動画ごとにAVS書くのが普通だろう&#xA;って考え&#xA;僕の使い方だと&#xA;映画は基本インタレ保持&#xA;Fateとかのぬるぬる動くアニメもインタレ保持&#xA;動きがあまりないアニメは24fps化してます.&#xA;つかAviSynthが足引っ張りすぎ.</description>
    </item>
    <item>
      <title>Pythonでロギング</title>
      <link>https://github.pyyoshi.com/blog/2015/01/Python%E3%81%A7%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0/</link>
      <pubDate>Sat, 03 Jan 2015 19:48:21 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/Python%E3%81%A7%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0/</guid>
      <description>ひっさしぶりにPython触って, ちと忘れてたこと&#xA;from logging import getLogger,StreamHandler,Formatter,INFO,DEBUG logger = getLogger(__name__) handler = StreamHandler() handler.formatter = Formatter(fmt=&amp;#39;%(asctime)s\t%(message)s&amp;#39;, datefmt=&amp;#39;%Y/%m/%d %H:%M:%S&amp;#39;) handler.setLevel(DEBUG) logger.setLevel(DEBUG) logger.addHandler(handler) 複数のロガーもつ場合は関数化しましょう&#xA;以上</description>
    </item>
    <item>
      <title>nginxのlocationの挙動</title>
      <link>https://github.pyyoshi.com/blog/2015/01/nginx%E3%81%AElocation%E3%81%AE%E6%8C%99%E5%8B%95/</link>
      <pubDate>Fri, 02 Jan 2015 01:35:12 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2015/01/nginx%E3%81%AElocation%E3%81%AE%E6%8C%99%E5%8B%95/</guid>
      <description>ディレクトリ構造&#xA;├── endpoint_a │ └── a │ └── index.html ├── endpoint_b │ └── b │ └── index.html └── root ├── a │ └── index.html └── index.html nginxの設定&#xA;server { server_name example.com; root /srv/example.com/public; location / { root /srv/example.com/public/root; index index.html index.htm; } location /a { root /srv/example.com/public/endpoint_a; index index.html index.htm; } location /b { root /srv/example.com/public/endpoint_b; index index.html index.htm; } } http://example.com/ にアクセスすると /srv/example.com/public/root を見る&#xA;http://example.com/a/ にアクセスすると /srv/example.com/public/endpoint_a/a を見るが /srv/example.com/public/root/a は見に行かない</description>
    </item>
    <item>
      <title>今年の抱負</title>
      <link>https://github.pyyoshi.com/blog/2014/12/%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%8A%B1%E8%B2%A0/</link>
      <pubDate>Wed, 31 Dec 2014 06:18:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%8A%B1%E8%B2%A0/</guid>
      <description>2015年になりました.&#xA;みなさん あけおめです.&#xA;さて 今年の抱負ですが幾つか上げていきたいと思います.&#xA;今年の12月31日までにどれくらい成し遂げられるかな.&#xA;英語 言語の勉強なんてどこまでやっても際限なんてないのですが, イギリス旅行してきて自分の英語力のなさを痛感しました.&#xA;特にリスニング.&#xA;Youtubeとか映画とかニュースとかがどれだけはっきりとした発音で喋ってくれているのかわかりました.&#xA;単語を拾っていけば分かるんですが, 旅行ではいろんな人が普段のしゃべりをしてくるので単語すら拾えない状況が多かったです.&#xA;何はともあれ声に出して英語読んだり 英会話教室行ったり すこしずつですが頑張ろうかなとおもいます.&#xA;お仕事 今年はいろいろと波乱がありそう.&#xA;成長させなくてはいけないし, なにより今の仕事で食っていけるようにならなくてはいけない.&#xA;今何をしなくてはいけないのかしっかり確認し考えて行動しなくては.&#xA;実家を出る 前職辞めて半年間 家で仕事をしていたのだけど, 家族で暮らしているということもあって自分の時間を割くのが難しい時がしばしば.&#xA;だれでも集中したいときってあるよね.&#xA;環境づくりっていろいろ大切.</description>
    </item>
    <item>
      <title>2014年</title>
      <link>https://github.pyyoshi.com/blog/2014/12/2014%E5%B9%B4/</link>
      <pubDate>Tue, 30 Dec 2014 18:20:13 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/2014%E5%B9%B4/</guid>
      <description>いろいろあった気がしますが,&#xA;仕事をやめたことで昨年より精神的に疲れない年でした.&#xA;イギリス旅行はとてもよかったなー&#xA;1ヶ月も滞在するなんて一生に1度しかないかもしれません.&#xA;滞在先の方 ありがとう.&#xA;で, 今年 最大のニュースがあるのですが それはまだお話できないのが残念.&#xA;来年中頃にはお話できるといいな.&#xA;では, 良いお年を.</description>
    </item>
    <item>
      <title>WindowsでUS配列を使う</title>
      <link>https://github.pyyoshi.com/blog/2014/12/Windows%E3%81%A7US%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Thu, 25 Dec 2014 05:23:40 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/Windows%E3%81%A7US%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>US配列キーボードに変えたのだけど， 変更がめっちゃめんどくさかった．&#xA;つーかレイアウトごとにIME設定しなくてはいけなくて，GoogleIME使えないとか割りとあれだなっと．&#xA;そんなこんなで設定できたので備忘録&#xA;レジストリファイルを以下のように作って実行&#xA;Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\i8042prt\Parameters] &amp;#34;PollingIterations&amp;#34;=dword:00002ee0 &amp;#34;PollingIterationsMaximum&amp;#34;=dword:00002ee0 &amp;#34;ResendIterations&amp;#34;=dword:00000003 &amp;#34;LayerDriver JPN&amp;#34;=&amp;#34;kbd101.dll&amp;#34; &amp;#34;LayerDriver KOR&amp;#34;=&amp;#34;kbd101a.dll&amp;#34; Google IMEのキー設定で以下の画像のように設定して再起動&#xA;これでCtrl+Spaceで直接入力かローマ字入力かの変更が可能になる．&#xA;あーめんどくせ</description>
    </item>
    <item>
      <title>Radeon HD 7770からNVIDIA GTX 750Tiへ</title>
      <link>https://github.pyyoshi.com/blog/2014/12/Radeon-HD-7770%E3%81%8B%E3%82%89NVIDIA-GTX-750Ti%E3%81%B8/</link>
      <pubDate>Tue, 23 Dec 2014 19:52:59 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/Radeon-HD-7770%E3%81%8B%E3%82%89NVIDIA-GTX-750Ti%E3%81%B8/</guid>
      <description>だいたい1.5倍位性能が上がりました．&#xA;しっかし補助電源無しでこの性能出せて1.5kってコスパ良すぎるなぁ．&#xA;ベース Win7 HP 64bit Core i7 860 RAM DDR3-1333 8GB PCIe 2.0 ★Radeon HD 7770 VRAM 1GB Catalyst 14.12 AMD Catalyst Omega Software - 3D Mark P4191 - FF14 FHD 最高品質 4325 Ave. FPS 35.292 - PSO2 FHD 最高品質 6172 - Valley Extream HD FPS 13.7 Score 573 Min FPS 4.9 Max FPS 27.3 ★Nvidia 750Ti VRAM 2GB 347.09 - 3D Mark P5690 - FF14 FHD 最高品質 6614 Ave.</description>
    </item>
    <item>
      <title>PHP</title>
      <link>https://github.pyyoshi.com/blog/2014/12/PHP/</link>
      <pubDate>Sat, 20 Dec 2014 21:04:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/PHP/</guid>
      <description>嫌よ嫌よも好きのうち&#xA;なんだかんだで1年以上PHPしてますね.&#xA;嫌いなのにね.&#xA;なんでだろうね.</description>
    </item>
    <item>
      <title>姿勢</title>
      <link>https://github.pyyoshi.com/blog/2014/12/%E5%A7%BF%E5%8B%A2/</link>
      <pubDate>Tue, 16 Dec 2014 16:59:07 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/%E5%A7%BF%E5%8B%A2/</guid>
      <description>最近 よく咳をすると胸に激痛が走ることがあるのだけど,&#xA;調べてみると姿勢が前かがみで姿勢が悪い状態だとなるみたい.&#xA;っというのも今の環境, ベットを椅子代わりに使って仕事をしていてとても不安定.&#xA;しかも床が冷たいので足が床についていない状態なのでなおさら姿勢が悪くなっているみたいだ.&#xA;姿勢が悪いと集中力低下するわ体に不調が出るわでひどいので近いうちに改善が必要だな…&#xA;っという話</description>
    </item>
    <item>
      <title>PeerCastIM-Mod</title>
      <link>https://github.pyyoshi.com/blog/2014/12/PeerCastIM-Mod/</link>
      <pubDate>Tue, 16 Dec 2014 06:50:34 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/PeerCastIM-Mod/</guid>
      <description>Linux環境でui/linux及びui/qt4は正常に動作してる模様&#xA;いちよFLV配信の再生までは確認した.&#xA;MKV(HEVC)配信はmplayerの都合で音声のみ再生確認できた.&#xA;というか, Linux環境ではmplayer2で視聴したほうがよさげ.&#xA;VLCは再生までにやたら時間かかる…&#xA;あとはui/qt4のリリースビルドだとEnabledボタンを押すと落ちる問題を解決できれば満足だなぁ…&#xA;っつーわけでpcyplite的なやつをgolangとqmlで作りはじめようとおもう.&#xA;今のところ公開予定はないけども.</description>
    </item>
    <item>
      <title>a</title>
      <link>https://github.pyyoshi.com/blog/2014/12/a/</link>
      <pubDate>Sun, 07 Dec 2014 22:08:55 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/a/</guid>
      <description>そろそろアレします&#xA;以上</description>
    </item>
    <item>
      <title>PeerCastIM4LinuxをPeerCastIM-Modへリネーム</title>
      <link>https://github.pyyoshi.com/blog/2014/12/PeerCastIM4Linux%E3%82%92PeerCastIM-Mod%E3%81%B8%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0/</link>
      <pubDate>Thu, 04 Dec 2014 20:47:55 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/PeerCastIM4Linux%E3%82%92PeerCastIM-Mod%E3%81%B8%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0/</guid>
      <description>タイトル通り変更しました&#xA;なのでURLも変更になります.&#xA;https://github.com/PyYoshi/PeerCastIM-Mod&#xA;よろしくです.</description>
    </item>
    <item>
      <title>OSXでCore Dumpを拾う</title>
      <link>https://github.pyyoshi.com/blog/2014/12/OSX%E3%81%A7Core-Dump%E3%82%92%E6%8B%BE%E3%81%86/</link>
      <pubDate>Tue, 02 Dec 2014 07:31:57 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/12/OSX%E3%81%A7Core-Dump%E3%82%92%E6%8B%BE%E3%81%86/</guid>
      <description>以下を実行&#xA;ulimit -c unlimited /cores/ にダンプファイルがPID名つきで出来る</description>
    </item>
    <item>
      <title>Marvericksでqmakeコマンドするとでるエラー</title>
      <link>https://github.pyyoshi.com/blog/2014/11/Marvericks%E3%81%A7qmake%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B%E3%81%A8%E3%81%A7%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC/</link>
      <pubDate>Sun, 30 Nov 2014 21:26:40 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/11/Marvericks%E3%81%A7qmake%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B%E3%81%A8%E3%81%A7%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC/</guid>
      <description>$ qmake Project ERROR: Could not resolve SDK path for &amp;#39;macosx10.8&amp;#39; となるエラーが起きた場合&#xA;Qt SDKの&#xA;Qt/5.3/clang_64/mkspecs/qdevice.pri の&#xA;!host_build:QMAKE_MAC_SDK = macosx10.8 を&#xA;!host_build:QMAKE_MAC_SDK = macosx10.9 するとよい&#xA;参考&#xA;Stack Overflow </description>
    </item>
    <item>
      <title>モチベーションを上げる</title>
      <link>https://github.pyyoshi.com/blog/2014/11/%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%B8%8A%E3%81%92%E3%82%8B/</link>
      <pubDate>Sun, 30 Nov 2014 20:15:42 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/11/%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%B8%8A%E3%81%92%E3%82%8B/</guid>
      <description>モチベーションを上げるために多少の犠牲は必要だなとおもってJSで書いてたものをTypeScriptで書きなおしたらめっちょ上がったんだけど,&#xA;そのあと操作ミスで一週間分のコードが吹っ飛んだので思い切ったことをするときはいろいろ覚悟が必要なのだなー&#xA;みつを</description>
    </item>
    <item>
      <title>金欠</title>
      <link>https://github.pyyoshi.com/blog/2014/11/%E9%87%91%E6%AC%A0/</link>
      <pubDate>Sat, 29 Nov 2014 17:51:57 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/11/%E9%87%91%E6%AC%A0/</guid>
      <description>そろそろ貯金が底につきそうだ&#xA;定期的に収入を確保しないと厳しい&#xA;厳しいのだ</description>
    </item>
    <item>
      <title>P55-SD60なM/BのBIOSを更新</title>
      <link>https://github.pyyoshi.com/blog/2014/11/P55-SD60%E3%81%AAM/B%E3%81%AEBIOS%E3%82%92%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Thu, 27 Nov 2014 06:27:04 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/11/P55-SD60%E3%81%AAM/B%E3%81%AEBIOS%E3%82%92%E6%9B%B4%E6%96%B0/</guid>
      <description>P55-GD65のBIOSを利用することができるのだけど, ただダウンロードしただけではM-FLASH経由でアップデートできない.&#xA;っというのも「A7583IM0」っというPREFIX以外受け付けないようになっているからだ.&#xA;なので1.Bなら「A7583IMS.1B0」から「A7583IM0.1B0」っとファイル名を変更してM-FLASHに食わせればおk&#xA;あと, BIOSの設定を初期化して改めて設定し直せば終わり</description>
    </item>
    <item>
      <title>ブラック会社に勤めてるんだが、もう俺は限界かもしれない</title>
      <link>https://github.pyyoshi.com/blog/2014/10/%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E4%BC%9A%E7%A4%BE%E3%81%AB%E5%8B%A4%E3%82%81%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A0%E3%81%8C%E3%82%82%E3%81%86%E4%BF%BA%E3%81%AF%E9%99%90%E7%95%8C%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</link>
      <pubDate>Sat, 18 Oct 2014 02:00:12 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/10/%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E4%BC%9A%E7%A4%BE%E3%81%AB%E5%8B%A4%E3%82%81%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A0%E3%81%8C%E3%82%82%E3%81%86%E4%BF%BA%E3%81%AF%E9%99%90%E7%95%8C%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</guid>
      <description>面白おかしく作ってるらしいのだが&#xA;どうも面白くなくて心が痛くなるかんじばかり&#xA;というのも前職 入社してすぐに2週間ほど炎上案件に突っ込まれた挙句 家にそんなに帰れなくてやみまくった経験をしたから</description>
    </item>
    <item>
      <title>.hack//で思い出した</title>
      <link>https://github.pyyoshi.com/blog/2014/10/.hack/%E3%81%A7%E6%80%9D%E3%81%84%E5%87%BA%E3%81%97%E3%81%9F/</link>
      <pubDate>Tue, 14 Oct 2014 03:41:50 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/10/.hack/%E3%81%A7%E6%80%9D%E3%81%84%E5%87%BA%E3%81%97%E3%81%9F/</guid>
      <description>The Worldっていうゲームが海外で開発されてます.&#xA;実際にプレイしたことはないのですがRift対応してたり&#xA;音楽が.hackぽかったり, Unityで作られているのかクオリティがそれなりだったりします.&#xA;40ドル寄付すればクローズドでプレイ出来たと思います.&#xA;気になる方はこちらを</description>
    </item>
    <item>
      <title>.hack//</title>
      <link>https://github.pyyoshi.com/blog/2014/10/.hack/</link>
      <pubDate>Mon, 13 Oct 2014 19:01:12 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/10/.hack/</guid>
      <description>Rift2あるし触覚も何とかなりそうな所まで来てるし, そろそろThe Worldも実現できるんじゃないかなって思ってる.</description>
    </item>
    <item>
      <title>CyanogenModのリポジトリをミラーする</title>
      <link>https://github.pyyoshi.com/blog/2014/10/CyanogenMod%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%83%9F%E3%83%A9%E3%83%BC%E3%81%99%E3%82%8B/</link>
      <pubDate>Sat, 04 Oct 2014 07:16:47 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/10/CyanogenMod%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%83%9F%E3%83%A9%E3%83%BC%E3%81%99%E3%82%8B/</guid>
      <description>めも&#xA;1.AOSPリポジトリのミラー $ mkdir -p ~/Android/mirrors/aosp $ cd ~/Android/mirrors/aosp $ repo init -u https://android.googlesource.com/mirror/manifest --mirror $ repo sync 2. CyanogenModリポジトリのミラー $ mkdir -p ~/Android/mirrors/cyanogenmod $ cd ~/Android/mirrors/cyanogenmod $ repo init -u https://github.com/CyanogenMod/android.git -b cm-11.0 --mirror --reference=~/Android/mirrors/aosp $ repo sync 3. ミラーレポジトリから利用する $ mkdir -p ~/Android/dev_cm $ cd ~/Android/dev_cm $ repo init -u ~/Android/mirrors/cyanogenmod -b cm-11.0 –reference=~/Android/mirrors/cyanogenmod 各ディレクトリパスは適宜読み替えてください&#xA;4. 自宅LAN環境内で利用できるようにする そのうち書く</description>
    </item>
    <item>
      <title>OSXでマウス4,5ボタンを利用する</title>
      <link>https://github.pyyoshi.com/blog/2014/10/OSX%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B945%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</link>
      <pubDate>Wed, 01 Oct 2014 22:39:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/10/OSX%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B945%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid>
      <description>Windowsのように4,5ボタンで戻る進むがしたかった.&#xA;ということで調べてみるとKeyRemap4MacBookというのでできるらしい.&#xA;で, 調べてみると後継Ver.のKarabinerというのがあるらしいのでそれを利用した.&#xA;設定は以下の画像の通り&#xA;ぐぐって出てきた記事だと自分でxml書かなくちゃいけないようだったけど,&#xA;こっちのソフトだとそんなことしなくても良さげ&#xA;便利になった</description>
    </item>
    <item>
      <title>HUNTERXHUNTERおもしろい</title>
      <link>https://github.pyyoshi.com/blog/2014/09/HUNTERXHUNTER%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84/</link>
      <pubDate>Mon, 29 Sep 2014 18:55:45 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/HUNTERXHUNTER%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84/</guid>
      <description>おもしろい</description>
    </item>
    <item>
      <title>Redis Sentinelでのフェイルオーバー</title>
      <link>https://github.pyyoshi.com/blog/2014/09/Redis-Sentinel%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A7%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC/</link>
      <pubDate>Tue, 16 Sep 2014 10:44:27 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/Redis-Sentinel%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A7%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC/</guid>
      <description>ぐぐりながら色々やってみた感想.&#xA;理想通りのものではなかったけど, かなり便利.&#xA;Sentinelが勝手にスレーブをマスターに昇格してくれるし, イベントフックすることもできる.&#xA;SentinelはAppサーバに1台づつ常駐させるのが良さそう？&#xA;Redisサーバと同じホストにSentinelを置くのはNGな気がする.&#xA;&amp;hellip;&#xA;&amp;hellip;&#xA;&amp;hellip;&#xA;でだ,&#xA;ここまでは順調だったんだけど, フェイルオーバー時にAppの設定を変更せずにRedisのマスター接続先を変える方法.&#xA;そこがちょっと分かっていない.&#xA;やり方はいろいろあって&#xA;hostsファイルを書き換える&#xA;LBを利用する&#xA;DNSを利用する&#xA;iptablesを利用する&#xA;Alias IPを利用する&#xA;っといろいろあるっぽいけど, 何やってるかさっぱりわからない.&#xA;接続先を変更せずにフェイルオーバーに対応させる方法は無理があるのだろうか…&#xA;プロクシを〜っとも考えたけど, これだと単一障害点になってしまうかも&#xA;うーむ.&#xA;とりあえずやりたいこと整理して再挑戦だな&#xA;参考 Redis Sentinelを運用してみたお話 redisをsentinelとAliasIPを利用して冗長化 </description>
    </item>
    <item>
      <title>WindowsでOpenVPNクライアントがうまく動かない時</title>
      <link>https://github.pyyoshi.com/blog/2014/09/Windows%E3%81%A7OpenVPN%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E6%99%82/</link>
      <pubDate>Mon, 15 Sep 2014 16:39:36 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/Windows%E3%81%A7OpenVPN%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E6%99%82/</guid>
      <description>これ参考になった&#xA;C:\Program Files\TAP-Windows\bin\devcon.exe を管理者権限で実行＋Win7互換モードに設定&#xA;deltapall.bat で、一旦デバイスを削除して&#xA;addtap.bat で、再度デバイスを登録してやる。&#xA;これでうまくいくっぽい。&#xA;なんで失敗してしまうのかは、推測だが&#xA;インストール時にうまいくことデバイスが作成されていないのが問題っぽい</description>
    </item>
    <item>
      <title>boot2dockerとVOLUME</title>
      <link>https://github.pyyoshi.com/blog/2014/09/boot2docker%E3%81%A8VOLUME/</link>
      <pubDate>Sat, 13 Sep 2014 17:17:09 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/boot2docker%E3%81%A8VOLUME/</guid>
      <description>boot2docker使ってる場合&#xA;boot2dockerのVM上のパスと接続されるっぽい&#xA;... VOLUME /opt/hoge_client ... としたとき&#xA;-v /opt/hoge_host:/opt/hoge_client と指定する例だと&#xA;$ boot2docker ssh でVMにssh接続し&#xA;$ ls /opt/hoge_host で確認すると良い&#xA;完全にドキュメント読んでないことがばれた&#xA;ところでVOLUMEで指定したディレクトリ&#xA;なんでroot権限で作られるんだろうな&#xA;chownで所有者変更試みても無理っぽい&#xA;クソみたいなやり方はあって&#xA;CMD chown user /opt/hoge_client &amp;amp;&amp;amp; ls -l /opt/hoge_client とするとやれないことはない.&#xA;実に糞だ.</description>
    </item>
    <item>
      <title>Docker Hubの有料プラン</title>
      <link>https://github.pyyoshi.com/blog/2014/09/Docker-Hub%E3%81%AE%E6%9C%89%E6%96%99%E3%83%97%E3%83%A9%E3%83%B3/</link>
      <pubDate>Fri, 12 Sep 2014 16:16:28 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/Docker-Hub%E3%81%AE%E6%9C%89%E6%96%99%E3%83%97%E3%83%A9%E3%83%B3/</guid>
      <description>Docker Hubの有料プランを契約した.&#xA;それだけ&#xA;それだけなんだけどさ&#xA;Docker HubのWebおもくね・・・？&#xA;あとプッシュしてWeb側が即時更新されるわけじゃないっぽくてアレな感じもある.&#xA;まぁAPI経由がメインだろうしそっちが早ければ特に問題はないのだが.</description>
    </item>
    <item>
      <title>メール配信サービスとDNSサービスの相性</title>
      <link>https://github.pyyoshi.com/blog/2014/09/%E3%83%A1%E3%83%BC%E3%83%AB%E9%85%8D%E4%BF%A1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8DNS%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E7%9B%B8%E6%80%A7/</link>
      <pubDate>Fri, 12 Sep 2014 16:02:05 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/09/%E3%83%A1%E3%83%BC%E3%83%AB%E9%85%8D%E4%BF%A1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8DNS%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E7%9B%B8%E6%80%A7/</guid>
      <description>諸事情でムームーDNSを利用しています&#xA;で, 諸事情でメール配信サービスを利用する事になったのだが&#xA;NG: ムームーDNS + mailgun OK: ムームーDNS + mandrill という結果になりました.&#xA;mailgunで通らなかった認証はDKIMとMXとCNAME(Sending, Trackingともに)でした.&#xA;ほぼほぼ通りませんでした(-_-;)&#xA;ということで, もろもろDNSサービス周り変更するまでmandrillを利用しようかと.&#xA;追記:&#xA;なにやらGoogle Cloud DNSとやらがあるらしい.&#xA;Web UIがまだないみたい.&#xA;そりゃ気づかないわけだ…&#xA;料金自体はRoute53と変わらないみたい.&#xA;機能はどの程度あるのかしらないが, GCPで囲うので悩む必要はないかもね.</description>
    </item>
    <item>
      <title>イギリスでのはっけん</title>
      <link>https://github.pyyoshi.com/blog/2014/08/%E3%82%A4%E3%82%AE%E3%83%AA%E3%82%B9%E3%81%A7%E3%81%AE%E3%81%AF%E3%81%A3%E3%81%91%E3%82%93/</link>
      <pubDate>Wed, 27 Aug 2014 13:27:25 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/08/%E3%82%A4%E3%82%AE%E3%83%AA%E3%82%B9%E3%81%A7%E3%81%AE%E3%81%AF%E3%81%A3%E3%81%91%E3%82%93/</guid>
      <description>イギリスに来て, 毎日紅茶を飲む習慣ができたのだが&#xA;少し気になる点があった.&#xA;紅茶を入れると必ず油膜ができるのだ.&#xA;最初は気にならなかったんだけど, 淹れて2時間位すると明らかに油膜が出来上がってる.&#xA;日本でも結構な頻度で飲むのだけど, そんなことはならないし こっちの紅茶ではなるものなのかなーっと思ってた. (イギリスのお土産で貰った紅茶はたしか油膜はできなかったけど)&#xA;さすがに気になりだしたので調べてみると&#xA;硬水と茶葉のポリフェノールが高温化で反応して油膜ができるんだとか&#xA;なるほどな, イギリスの水は硬水だし条件は合う.&#xA;些細な疑問は解決しましたとさ.&#xA;あと, 紅茶は軟水のほうがうまいらしいよ.</description>
    </item>
    <item>
      <title>かぜ2</title>
      <link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C2/</link>
      <pubDate>Wed, 20 Aug 2014 13:22:00 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C2/</guid>
      <description>イギリス乾燥しすぎ ー&amp;gt; 風邪の症状&#xA;すげー喉が渇く ー&amp;gt; 風邪の症状&#xA;なんかやたら寒い ー&amp;gt; 風邪の症状&#xA;ここ1週間割りと調子が良いので多分風邪治った.&#xA;一緒に来た友人にうつされた可能性が高いけど, せめてもしょうがねぇし, イギリスではうつされるのが悪いみたいだしそういうことだ.&#xA;ちなみに現地の友人に風邪をうつしました. XD</description>
    </item>
    <item>
      <title>かぜ</title>
      <link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C/</link>
      <pubDate>Wed, 13 Aug 2014 08:23:20 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C/</guid>
      <description>えげれす入国早々風邪引いてだいぶ辛い感じあったのだけど, 結構落ち着いてきた.&#xA;調子こいてしゃべるとまだ咳でそうになるけど&#xA;そんなことより仕事のほうがまぁ順調かなというレベル&#xA;そういうことです.</description>
    </item>
    <item>
      <title>いぎりすつら</title>
      <link>https://github.pyyoshi.com/blog/2014/08/%E3%81%84%E3%81%8E%E3%82%8A%E3%81%99%E3%81%A4%E3%82%89/</link>
      <pubDate>Mon, 11 Aug 2014 10:42:02 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%84%E3%81%8E%E3%82%8A%E3%81%99%E3%81%A4%E3%82%89/</guid>
      <description>観光は楽しいが&#xA;飯とか物価とか結構つらい感じある&#xA;飯の量やたらおおい。&#xA;観光博楽しい&#xA;あと寒い</description>
    </item>
    <item>
      <title>おらえげれすへいくだぁ</title>
      <link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8A%E3%82%89%E3%81%88%E3%81%92%E3%82%8C%E3%81%99%E3%81%B8%E3%81%84%E3%81%8F%E3%81%A0%E3%81%81/</link>
      <pubDate>Fri, 01 Aug 2014 00:03:02 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8A%E3%82%89%E3%81%88%E3%81%92%E3%82%8C%E3%81%99%E3%81%B8%E3%81%84%E3%81%8F%E3%81%A0%E3%81%81/</guid>
      <description>今月から来月までイギリスいきます.&#xA;物騒な世の中ですが割りと楽しみです.&#xA;乗り継ぎのハノイとかホーチミンとかのほうがもっと楽しみだったりします.&#xA;疲れるからと2時間くらいの乗り継ぎ時間のものを選びましたが6時間位のでも良かったかなと思ってます.&#xA;以上</description>
    </item>
    <item>
      <title>なぜOSXなのか</title>
      <link>https://github.pyyoshi.com/blog/2014/06/%E3%81%AA%E3%81%9COSX%E3%81%AA%E3%81%AE%E3%81%8B/</link>
      <pubDate>Mon, 30 Jun 2014 19:26:19 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/06/%E3%81%AA%E3%81%9COSX%E3%81%AA%E3%81%AE%E3%81%8B/</guid>
      <description>Windowsではうぇっぶあぷりの開発につらみがある 最新スペックのWinノートにUbuntuを入れた場合 なにかしら不具合がある(電源管理が糞とか電源管理が糞とか) しょうがねーからMBA/MBPで我慢してやると そういうことです.&#xA;何が言いたいかというと, Chromebook Pixelっぽいノートほしい&#xA;そういうことです.</description>
    </item>
    <item>
      <title>最近のこと 2</title>
      <link>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8-2/</link>
      <pubDate>Tue, 17 Jun 2014 20:53:19 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8-2/</guid>
      <description>ロンドンに1月ほど旅行へ行こうかと考えている.&#xA;パスポートの期限はすっかり切れていて,&#xA;めんどくさいけど申請するにあたっていろいろ準備しなくてはいけない.&#xA;実にめんどくさい.</description>
    </item>
    <item>
      <title>最近のこと</title>
      <link>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8/</link>
      <pubDate>Tue, 17 Jun 2014 20:50:10 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8/</guid>
      <description>大学生の頃なんて全然本なんて読まなかったのに&#xA;高校生ぶりに小説をよく読むようになった.&#xA;ニートになっていろいろ考えることがあって&#xA;それを避けるために調度良いと思ったからであろう.&#xA;それだけのことである.&#xA;先ほど読み終わった小説.&#xA;自分にしっくり来てとてもよかった.&#xA;三日間の幸福&#xA;おすすめです.</description>
    </item>
    <item>
      <title>退職しました</title>
      <link>https://github.pyyoshi.com/blog/2014/06/%E9%80%80%E8%81%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Sun, 08 Jun 2014 20:26:12 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/06/%E9%80%80%E8%81%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>6月某日付けで退職しましたまる&#xA;これからはせいいっぱい自宅警備します&#xA;以上</description>
    </item>
    <item>
      <title>新しいブログへ移行します。</title>
      <link>https://github.pyyoshi.com/blog/2014/04/%E6%96%B0%E3%81%97%E3%81%84%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</link>
      <pubDate>Tue, 01 Apr 2014 18:08:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/04/%E6%96%B0%E3%81%97%E3%81%84%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</guid>
      <description>こちらです。</description>
    </item>
    <item>
      <title>年度が変わりまして。</title>
      <link>https://github.pyyoshi.com/blog/2014/03/%E5%B9%B4%E5%BA%A6%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8A%E3%81%BE%E3%81%97%E3%81%A6/</link>
      <pubDate>Mon, 31 Mar 2014 23:21:28 +0000</pubDate>
      <guid>https://github.pyyoshi.com/blog/2014/03/%E5%B9%B4%E5%BA%A6%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8A%E3%81%BE%E3%81%97%E3%81%A6/</guid>
      <description>ブログ引っ越して最初に大事なお話です。&#xA;4月末で今の会社を退職し、あらたに会社を起こす事となりました。&#xA;以上です。</description>
    </item>
    <item>
      <title>新ブログへ移行します。</title>
      <link>https://github.pyyoshi.com/blog/2013/10/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</link>
      <pubDate>Tue, 15 Oct 2013 13:28:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/10/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</guid>
      <description>仕事が忙しくて新しいブログの作成ができていませんでしたが、とりあえずまたBloggerにお世話になる予定です。&#xA;以下URLが予定地となります。&#xA;よろしくお願い致します。&#xA;pyyoshi.blogspot.com</description>
    </item>
    <item>
      <title>1年間ニートをしてみて感じたこと</title>
      <link>https://github.pyyoshi.com/blog/2013/05/1%E5%B9%B4%E9%96%93%E3%83%8B%E3%83%BC%E3%83%88%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8/</link>
      <pubDate>Tue, 28 May 2013 23:23:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/1%E5%B9%B4%E9%96%93%E3%83%8B%E3%83%BC%E3%83%88%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8/</guid>
      <description>私は大学を2012年3月に卒業し、晴れて4月から職業:夢追い人になりました。&#xA;元々は都内で就職することが決まっていましたが、宮城からITでなにかできることはないかと卒業が近くなるにつれ気持ちが強くなっていき、とうとう夢追い人として生活することになりました。&#xA;なりたくてなったわけじゃない！？ 私自身はそうは思わなくて、逆に1度くらいニートを経験してから社会に出ても遅くないはず。っと思い気楽にニートし始めました。&#xA;そもそもアホみたいに在学中に就職活動をおこなって卒業研究がぺらぺらとかいう状況のほうが、私からしたらよっぽどクソだと思いましたね。&#xA;私の大学ではそういう研究結果なひとが多かった印象です。&#xA;逆に院へ進む人は内容が濃いものが多かった印象です。&#xA;っとは言うものの、ニートというものはあまりいい存在ではありません。親からは生暖かい目で見られます。&#xA;親含めその知人らからはそーいう目で見られているような気にもなります。&#xA;なのである程度、就職活動は行いました。ある程度、資格取得の勉強してるよアピールをしました。ある程度ハローワークに通って面白そうな企業を探しました（白目&#xA;なんのためにニートし始めたの？ 冒頭で述べたような甘い考えでニートを始めたのは事実で、これから何やろうということは全くない状況でした。&#xA;ただ、ニートやる上でのほほんと田舎の田園風景を眺めているのでは駄目だという事はわかっていて、いろいろ考えた結果、自分の力量をこの1年使って測ってみようという考えが生まれました。&#xA;そこからははやいものでいろいろやり始めたのです。&#xA;ニート中に何やってたの？ お世話になっていたライブラリのメンテナンス(プログラム)などから始めました。&#xA;あとはWebサービスの開発にいくつか関わったり、自分で作ってみたりしました。&#xA;いくつか内定もいただきましたがいろいろあってお断りすることもありました。&#xA;あんまり詳しく何をやったかは書きませんが、ニートをやっていく上で大切なことは&#xA;自分がなぜニートをやっているのか、何をやるためにニートをやっているのかを考えて行動することだと思います。&#xA;最初は自分がやっていることはただのお遊びで何にも役に立っていないとか思うかもしれませんが、&#xA;自分は何かをやっていて、何かに詳しくなったり誰かに評価されたいとかそーいう欲を出すことが大切なんじゃないかと思います。&#xA;ニートの癖して暇がなかった！？ 私は社会人の一般的な生活スタイルに基づいてニート生活を始めました。&#xA;7時くらいには目を覚まし、9時くらいからやりたいこと・やらなければいけないことをし、12〜13時にお昼を食べ18時くらいまで午前中の続きなどをしました。&#xA;たまに11時とかに起きてた&#xA;これが割と暇じゃなくてコード書いてるとあっという間に時間が過ぎます。&#xA;あっという間に家事をしなくてはいけない時間になります。&#xA;1日24時間自由なはずなのにとっても短いと感じました。&#xA;ニート中に失敗したこと 太りました。だいぶ太りました。もりもり太りました。&#xA;親の飯が美味い！ただで食べられる飯がうまい！なんでこんなにうまいんだ！っとなりました。&#xA;みるみる太り続けとってもやばい状況のまま1年が過ぎました。&#xA;ニートの皆さん。&#xA;食事の量は適切に…&#xA;っというわけでもなく、頭は使うものの体は動かさないことがほとんどな自宅警備員なので&#xA;食事量が減っているにも関わらず、かなり太りました。&#xA;定期的に日光を浴び、運動することが大切で有ります。気をつけましょう。&#xA;何かを見失いかけたり、ヤル気を出したい時 私は「ソーシャルネットワーク」と「幸せのちから」を見ました。&#xA;前者はロックになれるいい映画です。これみるととてもやる気出ます。&#xA;後者は見るのがとてもつらい映画です。心えぐられるものですが、とてもいい薬になりました。&#xA;ニートで生き抜くために 死にたいと思っても実行しない精神&#xA;ある程度諦めるこころ&#xA;お金はあるに越したことはない&#xA;奨学金という名の借金を持っている奴はニートしてないで働け。私はとても苦しんだ&#xA;早寝早起きをしよう&#xA;疲れてベットで即寝るくらい疲れてからじゃないと、いろいろ考え始まって寝られなくなるよ&#xA;ある程度 行動できれば親だって暖かく応援してくれると信じる&#xA;結果として君はどうなったの？ とてもよい人生経験をしたと思います。学生生活を終え、就職せずニートを経験するなんて滅多に経験できるものじゃないと思います。&#xA;特に何かをやり遂げようと考えてる人はそうだと思います。&#xA;で、1年間ニートしてて思ったことを1つ&#xA;評価っていうのはリアルでされるのとインターネットのなかでされるのでは、私個人としてはだいぶ違うものだと思いました。&#xA;ネットでライブラリとか私がアウトプットしたものに良し悪し含め評価されるものと、リアルでの評価ではだいぶ重みが違うなと思いました。&#xA;評価されることで自信がつくのですが、インターネット上だとちょっと軽めの印象だったり、悪い評価だととても深刻に受け止めたりします。&#xA;悪い評価は具体的にどこが駄目なのか指摘してもらえればいいのですが、匿名からボロクソに言われると、たとえ1人からであっても複数人から言われているような気がするのです。&#xA;逆にリアルだと、&#xA;どんな評価であれ相手の顔が見えます。&#xA;気持ちが伺えます。&#xA;どういう意図で言っているのかわかります。&#xA;結果的にネットの評価より形が見えそうな自信がつきます。&#xA;この違いが大きくありリアルでの評価も欲しいと日に日に思うようになりました。&#xA;じゃーいつ実行するの？っと思い始めて2013年5月から本格的に就職活動を行い、6月前にして内定いただきました。&#xA;雑記 1年なんてあっという間です。&#xA;やりたいことを見つける期間として1年間は長いようで短かったです。&#xA;幸い、とてもやりがいが有りそうな企業に就職することができ6月からお仕事します。</description>
    </item>
    <item>
      <title>社会人になるという事で</title>
      <link>https://github.pyyoshi.com/blog/2013/05/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E4%BA%8B%E3%81%A7/</link>
      <pubDate>Tue, 28 May 2013 22:19:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E4%BA%8B%E3%81%A7/</guid>
      <description>まぁいろいろお金絡みのこと調べたり、生活する上でどのくらいの余力があればいいのか記録したりしてるのですが&#xA;社会人の皆さんすごいですね…&#xA;真面目にお金のこと考えさせられます。&#xA;家計簿とかそーいうお金を使った時に記録するのとても重要だと思いました。&#xA;僕はそーいうの得意じゃないのでレシートを写真として残したり、電子マネー使ったりして過ごすと思います…&#xA;お金がどこから逃げていくのか、それを知るために記録することは大事だなと思った1日でした。</description>
    </item>
    <item>
      <title>Google Driveにある画像ビュワー上で画像にコメントする機能について</title>
      <link>https://github.pyyoshi.com/blog/2013/05/Google-Drive%E3%81%AB%E3%81%82%E3%82%8B%E7%94%BB%E5%83%8F%E3%83%93%E3%83%A5%E3%83%AF%E3%83%BC%E4%B8%8A%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E6%A9%9F%E8%83%BD%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Wed, 22 May 2013 06:15:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/Google-Drive%E3%81%AB%E3%81%82%E3%82%8B%E7%94%BB%E5%83%8F%E3%83%93%E3%83%A5%E3%83%AF%E3%83%BC%E4%B8%8A%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E6%A9%9F%E8%83%BD%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>あれの実装方法を知りたいのだけれど、調査していないので勝手な想像で書く&#xA;画像をキャンバスに落とす。&#xA;その上にレイヤを重ねてそこにコメントを置けるようにする。&#xA;コメントの範囲はキャンバスのサイズとコメント位置とで相対的な関係になっている。&#xA;脳みそ空っぽなので、こーいう想像になった。&#xA;時間があるとき調査して実際に実装するまでやっていきたい。&#xA;以上</description>
    </item>
    <item>
      <title>Go言語Webフレームワークrevelについて (動作確認編)</title>
      <link>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</link>
      <pubDate>Wed, 22 May 2013 05:58:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</guid>
      <description>web.goは簡単なアプリを作るには最適なのですが複雑なものを作るにはちと機能が足らない感じです。&#xA;というわけでWebフレームワーク探してたらPlayフレームワークっぽく実装できるrevelっていうのがあることを知りました。&#xA;で、&#xA;私 Playフレームワークがどういうものなのか知りません。もちろんきいたことはあります。&#xA;いつも使うのはSinatra系かDjangoばかり使っています。&#xA;なのでいい機会なのでプロジェクトの構造とかメモがわりに残せればなと思います。&#xA;※goenv環境を前提にしています。とてもCoolな開発環境を提供してくれるので導入必須！&#xA;まずはrevelを使える状態にします。&#xA;$ cd $HOME/src&#xA;$ goenv NyanWeb&#xA;$ cd NyanWeb&#xA;$ source activate&#xA;$ go get github.com/robfig/revel&#xA;$ go build -o bin/revel github.com/robfig/revel/cmd&#xA;revelプロジェクトを作成します。&#xA;$ revel new Nyan&#xA;これによってsrc/以下にNyanというプロジェクトが作成されます。&#xA;実際に動かしてみましょう。&#xA;$ revel run Nyan&#xA;実行したら127.0.0.1:9000にアクセスして正しく動作していることを確認してください。&#xA;一旦Ctrl+Cにて終了させます。&#xA;続いてビルドが通るようにプロジェクトのパスを変更します。&#xA;$ cd $HOME/src/NyanWeb&#xA;$ cd src/&#xA;$ mkdir webapps&#xA;$ mv Nyan/ webapps/&#xA;$ cd -&#xA;これで$HOME/src/NyanWeb/webapps/Nyanという構造になったかと思います。&#xA;ビルドを行います。&#xA;revel build webapps/Nyan out/&#xA;を実行すると$HOME/src/NyanWeb/outにビルドされたものが一式入っています。&#xA;$ cd $HOME/src/NyanWeb/out</description>
    </item>
    <item>
      <title>MySQL(MariaDB)で久々にError 2006をやらかした</title>
      <link>https://github.pyyoshi.com/blog/2013/05/MySQLMariaDB%E3%81%A7%E4%B9%85%E3%80%85%E3%81%ABError-2006%E3%82%92%E3%82%84%E3%82%89%E3%81%8B%E3%81%97%E3%81%9F/</link>
      <pubDate>Wed, 15 May 2013 07:36:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/MySQLMariaDB%E3%81%A7%E4%B9%85%E3%80%85%E3%81%ABError-2006%E3%82%92%E3%82%84%E3%82%89%E3%81%8B%E3%81%97%E3%81%9F/</guid>
      <description>SELECT 1とかで定期的にPING打ちましょう&#xA;以上</description>
    </item>
    <item>
      <title>KDEについてくるKonsoleがとんでもない奴だった…</title>
      <link>https://github.pyyoshi.com/blog/2013/05/KDE%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8F%E3%82%8BKonsole%E3%81%8C%E3%81%A8%E3%82%93%E3%81%A7%E3%82%82%E3%81%AA%E3%81%84%E5%A5%B4%E3%81%A0%E3%81%A3%E3%81%9F/</link>
      <pubDate>Fri, 10 May 2013 18:37:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/KDE%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8F%E3%82%8BKonsole%E3%81%8C%E3%81%A8%E3%82%93%E3%81%A7%E3%82%82%E3%81%AA%E3%81%84%E5%A5%B4%E3%81%A0%E3%81%A3%E3%81%9F/</guid>
      <description>Konsoleをリサイズすると高確率でXもろとも落とすクソみたいな機能がついてる。&#xA;これはバグじゃなくて”しよう”なんだと思う。いつになっても修正されない。&#xA;解決策の一つとして&amp;ndash;notransparencyをつければいいみたいだが&#xA;もうなんだか許せないので別のターミナルを使うことにする。&#xA;以上&#xA;(追記 13/5/10 18:53)&#xA;yakuakeが割と便利だ&#xA;起動したら、F12でターミナルがニョキッと出てくる&#xA;Shift+Ctrl+TでHorizontal Split&#xA;Shift+Ctrl+LでVertical Split&#xA;Shift+Ctrl+↑/↓で切り替え&#xA;(追記 13/5/10 19:10)&#xA;どうやらこれはKDEとRADEONドライバの相性から起きてるようだ。あくまで推測であるが&#xA;そのため、デスクトップ効果の半透明を無効化して様子を見てみる。</description>
    </item>
    <item>
      <title>bmobile、DTIやIIJなどの速度のでないSIMで快適(高速)にWebブラウジングする方法</title>
      <link>https://github.pyyoshi.com/blog/2013/05/bmobileDTI%E3%82%84IIJ%E3%81%AA%E3%81%A9%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E3%81%A7%E3%81%AA%E3%81%84SIM%E3%81%A7%E5%BF%AB%E9%81%A9%E9%AB%98%E9%80%9F%E3%81%ABWeb%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 10 May 2013 16:43:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/bmobileDTI%E3%82%84IIJ%E3%81%AA%E3%81%A9%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E3%81%A7%E3%81%AA%E3%81%84SIM%E3%81%A7%E5%BF%AB%E9%81%A9%E9%AB%98%E9%80%9F%E3%81%ABWeb%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>DTIワンコインSIMを使って9ヶ月くらいになります。&#xA;昨年まではそんなに遅さを感じなかったのですが、外出先でどうしてもWebを開かなくてはいけないことがちょっとずつですが多くなって来ました。&#xA;そこでWebコンテンツなどを最適化(圧縮)するようなプロキシをたてようかと思いました。&#xA;DTIの他にbmobileやIIJのSIMにも有効だと思います。&#xA;プロキシサーバは以下の3つを使用します。&#xA;Privoxy: 広告削除などの不必要なコンテンツをフィルタリングできるプロキシ。 Squid: リバースプロキシ。キャッシュ。負荷分散に使われることが多いです。(nginxで代用する場合もありますね。) Ziproxy: 画像などのコンテンツを圧縮するプロキシ。 通信の流れは以下の順番で行われます。&#xA;インターネット-&amp;gt;Privoxy(フィルタリング)-&amp;gt;Ziproxy(コンテンツ圧縮)-&amp;gt;Squid(キャッシュ)-&amp;gt;スマフォ&#xA;それでは構築はじめます。&#xA;環境はUbuntu 12.04 64bit&#xA;Privoxyの構築 Ziproxyの構築 Squidの構築 1. Privoxyの構築 $ sudo apt-get install privoxy&#xA;※フィルタリングの設定等はここでは書きません。私の鯖ではアダルト広告をブロックするようなフィルタリングをしています。 他の広告は基本的にブロックしていません。&#xA;2. Ziproxyの構築 ziproxyは新しいstableを使用したいのでソースからビルド&#xA;$ wget &amp;ldquo;http://downloads.sourceforge.net/project/ziproxy/ziproxy/ziproxy-3.3.0/ziproxy-3.3.0.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fziproxy%2Ffiles%2Fziproxy%2Fziproxy-3.3.0%2F&amp;amp;ts=1366246950&amp;amp;use_mirror=jaist&amp;rdquo; -O ziproxy-3.3.0.tar.bz2&#xA;$ tar lxvf ziproxy-3.3.0.tar.bz2&#xA;$ sudo apt-get install libgif-dev libjasper-dev libsasl2-dev&#xA;$ make -j8&#xA;$ sudo make install&#xA;$ sudo cp -ra etc/ziproxy /usr/local/etc/&#xA;$ ziproxy -h&#xA;$ sudo mkdir -p /var/log/ziproxy&#xA;$ sudo chown ziproxy:ziproxy /var/log/ziproxy</description>
    </item>
    <item>
      <title>Pythonで行儀の良いデーモンを作るpython-daemonを現行のPythonでも動作するようにした</title>
      <link>https://github.pyyoshi.com/blog/2013/05/Python%E3%81%A7%E8%A1%8C%E5%84%80%E3%81%AE%E8%89%AF%E3%81%84%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8Bpython-daemon%E3%82%92%E7%8F%BE%E8%A1%8C%E3%81%AEPython%E3%81%A7%E3%82%82%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</link>
      <pubDate>Thu, 09 May 2013 00:02:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/Python%E3%81%A7%E8%A1%8C%E5%84%80%E3%81%AE%E8%89%AF%E3%81%84%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8Bpython-daemon%E3%82%92%E7%8F%BE%E8%A1%8C%E3%81%AEPython%E3%81%A7%E3%82%82%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</guid>
      <description>行儀が良いデーモンを作るのはとても複雑で難しい。&#xA;それをpython-daemonを使えば簡単に行儀の良いデーモンがつくれちゃう。&#xA;とっても便利で良いのですが。&#xA;これ、lockfileの内部が変更されて修正しないとpidファイル生成部分に問題が起きちゃうんですね。&#xA;LinkFileLockがLinkLockFileに変更されLinkFileLockがLinkLockFileクラスを呼び出す関数になってしまったっということ。&#xA;詳しくはコード見てください。&#xA;ということでさくっと修正したものをgithubにあげておきました。&#xA;テストも完走しています(^0_0^)&#xA;残念なことにオリジナルのレポジトリはなくなっているのでpullreqすることができません。&#xA;よってPyPiに上がってるものを更新してもらうこともできません。&#xA;ちょっともやもやするので、何かしらできたらなと考え中&#xA;PyYoshi/python-daemon</description>
    </item>
    <item>
      <title>そろそろ</title>
      <link>https://github.pyyoshi.com/blog/2013/05/%E3%81%9D%E3%82%8D%E3%81%9D%E3%82%8D/</link>
      <pubDate>Thu, 02 May 2013 19:13:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/%E3%81%9D%E3%82%8D%E3%81%9D%E3%82%8D/</guid>
      <description>そろそろ新しいブログつくって新しい気持ちで飛び出すのもありなんじゃないかなと&#xA;自鯖にブログ建てるのメンテの関係でめんどくさいのでやらないとして&#xA;はてなも嫌いなので使いたくないとして&#xA;やはりBloggerにmarkdownの機能くっつけるのがいいのだろうか。&#xA;巷ではgistやtumblrをブログがわりに使ってる人もいるみたい。&#xA;前者は機能として微妙だけど、tumblrは結構良さそうではある。</description>
    </item>
    <item>
      <title>androidで使えるjson parserの速度比較をしてみる</title>
      <link>https://github.pyyoshi.com/blog/2013/05/android%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bjson-parser%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</link>
      <pubDate>Wed, 01 May 2013 18:06:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/05/android%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bjson-parser%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</guid>
      <description>json-android-compareをベースにJsonPullParserとJackson JsonのObject Mappingのベンチを追加してAndroid上で走らせてみました。&#xA;比較してるParserは以下の通り&#xA;Android標準(API依存) gson 2.2.3 json simple 1.1.1 json smart 1.1.1 Jackson Json 1.9.12 Jackson Json 1.9.12 - Object Mapping JsonPullParser 1.6.1 テストした端末は2つ&#xA;CM10ベースのAinol Elf(ROM) 私が開発してるCM9ベースのP-01D(ROM) ベンチ結果:&#xA;まずは1のAinol Elf&#xA;続いてP-01D&#xA;Streaming処理ならJackson Json一択ですね。 個人的にJacksonは使いやすいので、この場合はこれを選択すると思います。&#xA;一方Object MappingではJacksonはJPPと比べると遅いですねぇ。&#xA;まぁでも許容範囲なのかな。&#xA;TwitterみてるとJPP熱いみたいだし、開発者も日本の方なのでコミュニティに質問すればすぐ返ってきそうではあります。&#xA;コードはこちらです。正しいベンチの走らせ方してると思えないので、指摘アレばissueに投げてください。&#xA;ではでは</description>
    </item>
    <item>
      <title>boost.regex re2 pcre onigurumaの4つregexの速度比較</title>
      <link>https://github.pyyoshi.com/blog/2013/04/boost.regex-re2-pcre-oniguruma%E3%81%AE4%E3%81%A4regex%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83/</link>
      <pubDate>Sun, 28 Apr 2013 11:49:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/boost.regex-re2-pcre-oniguruma%E3%81%AE4%E3%81%A4regex%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83/</guid>
      <description>こちらのコードを使って計測しました.&#xA;以下結果&#xA;boostとre2が圧倒的に早いですね。それと比べてonigurumatとpcreは遅く、更に要素数が増えるとpcreは途中で落ちてしまいました。&#xA;スプレッドシートはこちら</description>
    </item>
    <item>
      <title>GingerをLinuxデスクトップ環境でも使えるようにアプリ作ってみた</title>
      <link>https://github.pyyoshi.com/blog/2013/04/Ginger%E3%82%92Linux%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Sat, 27 Apr 2013 22:32:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/Ginger%E3%82%92Linux%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>最近良くついったーでみかけるGinger。&#xA;これなんだろうと持って調べてみたら、英文を校正してくれるとても便利なサービスのよう。&#xA;これは使わないわけにはいかないだろうと思いクライアントがないか探したけれど、残念ながらLinux環境で動くものはブラウザ拡張のものだけみたい。&#xA;とても残念だ。&#xA;ということでQt Quickでアプリ作って見ました。&#xA;初めてQMLというものを触って見ましたが、ロジックコードはJavaScriptでかけるのでサクサクかけました。&#xA;UI部分はデザイナである程度かけますが元々あるコンポーネントはとても少なく、自分でボタンのようなものなどを作らないと行けないのが結構めんどくさかったです。&#xA;いちよQt Quickでアプリを作っているので、やろうと思えばAndroid上でも動かせるかと思います。UIの修正が必要だと思いますが。&#xA;コードはGitHubに置いて有ります。&#xA;ではでは</description>
    </item>
    <item>
      <title>投稿だけできるTwitterクライアント作った</title>
      <link>https://github.pyyoshi.com/blog/2013/04/%E6%8A%95%E7%A8%BF%E3%81%A0%E3%81%91%E3%81%A7%E3%81%8D%E3%82%8BTwitter%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F/</link>
      <pubDate>Thu, 25 Apr 2013 19:09:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/%E6%8A%95%E7%A8%BF%E3%81%A0%E3%81%91%E3%81%A7%E3%81%8D%E3%82%8BTwitter%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F/</guid>
      <description>デスクトップにツイッタクライアント置くとどうしてもスペースの無駄になってしまうので、タイムラインはAndroidタブレットにtwicle plusを入れて監視していました。&#xA;投稿する都度TwitterWeb開いてやっていたのですが、それこそ効率を落とす原因だと思ったのでさくっと投稿だけできるツイッタクライアント作りました。&#xA;Twiq for Desktop - Github&#xA;Twitter APIライブラリはtweepyに任せて、UIはPySideを使って書きました。&#xA;自分しか使わないのでデザインもクソも無いです&#xA;上のコンボボックスはアカウント用、下はこれからつけようとしてる機能のもの、＋と✕はアカウント追加と削除用です。&#xA;機能は&#xA;投稿機能 マルチアカウント機能 UnDo機能 の３つです。&#xA;投稿はCtrl+Enter、UnDoはCtrl+Uで行われます。&#xA;久しぶりにQt触ったせいか最初はかなり苦戦しましたが慣れてくればこっちのものですね。どっかのフレームワークよりちゃんと動いてくれるしQt✌(&amp;lsquo;ω&amp;rsquo;)✌ｻｲｺｰ</description>
    </item>
    <item>
      <title>mamemoseを利用したリアルタイムmarkdown編集</title>
      <link>https://github.pyyoshi.com/blog/2013/04/mamemose%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0markdown%E7%B7%A8%E9%9B%86/</link>
      <pubDate>Fri, 19 Apr 2013 12:59:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/mamemose%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0markdown%E7%B7%A8%E9%9B%86/</guid>
      <description>mamemoseというmarkdownプレビューツールが結構便利そうだったので環境を作って見ました。&#xA;Mac使いはKobitoが便利でいいと思います！&#xA;主な機能はREADMEを見るといいと思います。&#xA;上げるとすれば&#xA;markdownのプレビュー シンタックスハイライト LaTex記法を使える だと思います。&#xA;では環境構築しましょう。&#xA;私はRubyistでは無いのでRuby開発環境などなかったので色々調べながらやりました。&#xA;Pythonで言うところのVirtualenvみたいなものはrbenvというもので行えるみたいです。&#xA;それのセットアップから行いました。&#xA;rbenvとプラグインのruby-buildのインストール $ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv&#xA;$ echo &amp;rsquo;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;rsquo; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ echo &amp;rsquo;eval &amp;ldquo;$(rbenv init -)&amp;rdquo;&amp;rsquo; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ cd ~/src&#xA;$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build&#xA;rubyのビルドとインストール $ rbenv install 2.0.0-p0&#xA;$ rbenv global 2.0.0-p0&#xA;mamemoseをgemからインストール $ gem install mamemose&#xA;$ rbenv rehash&#xA;PATHが通ってる所で&#xA;$ vim run_mamemose&#xA;$ chmod +x run_mamemose&#xA;設定ファイルの作成 設定は~/.mamemose.rbを読みに行くみたいなので&#xA;$ vim ~/.mamemose.rb</description>
    </item>
    <item>
      <title>メインPCをLinuxにしてから変わったこと</title>
      <link>https://github.pyyoshi.com/blog/2013/04/%E3%83%A1%E3%82%A4%E3%83%B3PC%E3%82%92Linux%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</link>
      <pubDate>Tue, 09 Apr 2013 12:43:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/%E3%83%A1%E3%82%A4%E3%83%B3PC%E3%82%92Linux%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</guid>
      <description>メインPCをWindowsからLinuxに変更して4〜5ヶ月は過ぎたかなと思ったので実際に良かった点とか悪かった点を書いていこうかと思う。&#xA;良かった点&#xA;プログラミングをする上で開発環境を楽に構築できるようになった&#xA;悪かった点&#xA;マルチメディア関係、ゲーム関係はどうしようもなくダメ&#xA;動かないデバイスかどうか見極めるのが難しい&#xA;楽しくなった点&#xA;悪かった点を克服しようとツールを作るようになってきた。(Linuxのためにという意味)&#xA;Windows上で動いてるプログラムがOSSの場合、移植してどうにかしてみようと思うようになった。&#xA;上記の点を詳しく書いていこうと思う。&#xA;良い点&#xA;悪い点&#xA;ゲーム関係はどうしようもないけれど、音楽再生環境や動画再生環境はどうにかなった。&#xA;動画再生環境はVLCとかSMPlayerとか使えばなんとでもなります。&#xA;ごにょごにょすればVLCでBDを再生することだってできます。&#xA;音楽再生環境は最初deadbeefを使っていたのだけれど、昔リッピングしてタグ付けされたファイル等が文字化けし、耐えられなくなって探していたらNightingaleというかみプレイヤーを発見しました。Geckoベースなのでアドオンも比較的簡単に作れて便利。</description>
    </item>
    <item>
      <title>Nightingale Addonでxhr.responseTextを使用したDOMを作成する場合の注意点</title>
      <link>https://github.pyyoshi.com/blog/2013/04/Nightingale-Addon%E3%81%A7xhr.responseText%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FDOM%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Wed, 03 Apr 2013 10:25:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/Nightingale-Addon%E3%81%A7xhr.responseText%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FDOM%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>昨日の投稿でDOM操作できないことを嘆いていたのですが、その解決方法がわかりました。&#xA;なお、この症状はaddon上でのみ起きます。それへの対処です。&#xA;一般的にXHRのresponseTextをDOMへ変換するときは&#xA;var dom = document.createElement(&amp;ldquo;div&amp;rdquo;);&#xA;dom.innerHTML = xhr.responseText;&#xA;のようにやるかと思います。&#xA;しかしNightingaleやFirefoxのaddon上でこれをやるとXULなオブジェクトになってしまい、ただしくDOMを扱えなくなります(自分なりの仮説)&#xA;そのため正しくHTMLDocumentを作ってやれば良いのです。&#xA;以下の関数がそれを行うためのものです。&#xA;これによってaddon上でもただしく快適にDOMを扱えるようになります！&#xA;※このコードはNightingaleとFirefox3.6.x以前のブラウザでのみ動作保証します。それ以降のFirefoxは素直に document.implementation.createHTMLDocument を使いましょう&#xA;参考:&#xA;Analyzing and manipulating a responseText property containing an HTML document Safely parsing simple HTML to DOM </description>
    </item>
    <item>
      <title>Nightingaleのaddonでdomが使えない。</title>
      <link>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%AEaddon%E3%81%A7dom%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/</link>
      <pubDate>Tue, 02 Apr 2013 23:01:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%AEaddon%E3%81%A7dom%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/</guid>
      <description>jsfidleでdomを動かすなどの処理はうまくいくのですが、addon内でdomを使うことができないようになっている。&#xA;ほんとに謎仕様である。&#xA;普通のFirefoxでもaddonではdom扱えないのかな？&#xA;正直、これ使えないのクソだと思います。スクレイピングやりたかったら文字列操作ですべてやれとか僕には無理です…&#xA;解決策ないのかしら&#xA;解決策はこちら</description>
    </item>
    <item>
      <title>Nightingaleでaddonのデバッグに必要なもの</title>
      <link>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%A7addon%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</link>
      <pubDate>Tue, 02 Apr 2013 01:28:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%A7addon%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</guid>
      <description>Linuxで音楽を聴くときはdeadbeefを使っていたのですが、タグがsjisとかだと文字化けするしプラグインもあんまりよくないので乗り換え先を探していました。&#xA;そんな時にSongbirdからforkされたNightingaleというプレイヤーを発見。&#xA;どうやらこいつはFirefoxなどで使われているGeckoエンジンをベースに作られているらしく、addonの作成ノウハウをそのまま活かせるみたいなんです。&#xA;それで自分でほしいプラグインもjsでちょくちょく書けるようにしたくてデバッグ環境の構築をしようかと思ったのですが、本家SongbirdのWiKi(Google Cache)にアクセスできなくなっているため探すのに一苦労しました…&#xA;デバッグ環境の構築は至って簡単で&#xA;Firefox addonのJavascript DebuggerとNightingale Developer Toolsをインスコ&amp;amp;再起動すればJSのデバッグを手軽に行えるようになります。&#xA;以上</description>
    </item>
    <item>
      <title>PL-US35APをLinuxで使う</title>
      <link>https://github.pyyoshi.com/blog/2013/03/PL-US35AP%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%86/</link>
      <pubDate>Fri, 29 Mar 2013 15:30:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/PL-US35AP%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%86/</guid>
      <description>もともとCreative SB X-Fi Titaniumを持っていたのだけれど、どうもこいつはLinuxではうまく動かない。&#xA;音楽を聞いている分にはいいのだけれどTeamSpeak等のVCを使うと、なぜかノイズが走るようになり終いにはなにも聞こえない状況にまでなります。&#xA;Windowsでゲームをする分には必要十分すぎるくらいの性能はあるのですが、Linux環境をメインに使うように移行して以来使い勝手が悪くてイライラしていました。&#xA;そこで安いサウンドカードでLinuxでも使えそうなものをAmazonであさりました。&#xA;それが今回動作確認できたPL-US35APです。&#xA;私の環境はKubuntu 12.04 64bitです。&#xA;この環境だと差し込んだだけでは動きませんでした。 ネットでいちよ確認して動くみたいな報告があったので一瞬びっくりしましたが、lsusbでProductID調べてUSB Audioという規格に準拠したデバイスであることがわかり、それ用に設定を行いました。&#xA;$ sudo apt-get install alsa-tools alsa-oss alsa-utils alsa-base&#xA;で、ひと通り必要なものをインストールして&#xA;$ sudo vim /etc/modprobe.d/alsa-base.conf&#xA;以下の&#xA;options snd-usb-audio index=-2&#xA;を&#xA;options snd-usb-audio index=-1&#xA;へ変更して再起動したら無事認識しました。&#xA;あとはalsamixerで入出力音声の調整を行い、システム側でデフォルトデバイスを変更すれば良いと思います。&#xA;ざっとレビューすると出力音質は蟹チップに比べたらそこそこいいように思います。&#xA;ドンシャリ音は特になく、左右の定位も曖昧ではなく自分好みでした。&#xA;なにより1000円ちょいでこれだけ使えるのだからとても満足しています。&#xA;入力音質はMM-MC15BKというマイクを一緒に買い、それで試しました。&#xA;蟹チップで試すと、ドンシャリがひどい音質になるのですがそのようなことはなく価格相応またはそれ以上の性能は出ていると思います。&#xA;マイクブーストせずともしっかり拾ってくれるのもGood！</description>
    </item>
    <item>
      <title>大きめのファイルをバックアップするとき</title>
      <link>https://github.pyyoshi.com/blog/2013/03/%E5%A4%A7%E3%81%8D%E3%82%81%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D/</link>
      <pubDate>Wed, 27 Mar 2013 01:35:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/%E5%A4%A7%E3%81%8D%E3%82%81%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D/</guid>
      <description>いつもはtar.gz等で固めていたのだけれど、ちょくちょく展開に失敗してひどい目に合うことがある。&#xA;バックアップ用途に使うときはafioというツールを使えばいいみたいです。&#xA;途中で壊れたファイルがあっても、そのファイルをスキップして展開してくれるみたいです。はい。&#xA;使い方は各自しらべてください。&#xA;tar.gzの修復はgzrecover使えばある程度ましになります。&#xA;以上</description>
    </item>
    <item>
      <title>PeerCast IM版をLinuxで動作するように移植しました</title>
      <link>https://github.pyyoshi.com/blog/2013/03/PeerCast-IM%E7%89%88%E3%82%92Linux%E3%81%A7%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%A7%BB%E6%A4%8D%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 25 Mar 2013 12:12:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/PeerCast-IM%E7%89%88%E3%82%92Linux%E3%81%A7%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%A7%BB%E6%A4%8D%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>PeerCast IM版をLinuxで動くように移植しました。&#xA;PeerCast　QtのUIコードも持ってきてはいますが現状では正しく動作しないです。&#xA;なのでui/linuxをmakeしてCUIとして利用してください。&#xA;あとはpcypLiteみたいな視聴ツールを作ればLinux環境で快適に視聴出来ますね。&#xA;ソース: PeerCastIM-Mod</description>
    </item>
    <item>
      <title>golangでfib(39)の実行時間</title>
      <link>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</link>
      <pubDate>Mon, 18 Mar 2013 00:43:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</guid>
      <description>以前の記事をgolangではどうなるのかやってみた。&#xA;結果:&#xA;$ go build fib.go&#xA;$ go version&#xA;go version go1&#xA;$ time ./fib 63245986&#xA;./fib 0.54s user 0.00s system 99% cpu 0.548 total</description>
    </item>
    <item>
      <title>Pythonでのfib(39)の実行時間比較</title>
      <link>https://github.pyyoshi.com/blog/2013/03/Python%E3%81%A7%E3%81%AEfib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E6%AF%94%E8%BC%83/</link>
      <pubDate>Wed, 13 Mar 2013 10:08:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/Python%E3%81%A7%E3%81%AEfib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E6%AF%94%E8%BC%83/</guid>
      <description>この記事に釣られてPythonではどんなものなのか知りたくなったのでやってみた。&#xA;実行環境:&#xA;CPU: Intel(R) Core(TM) i7 CPU 860 @ 2.80GHz&#xA;RAM: 16GB&#xA;OS: Linux 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux&#xA;以下使用したコード&#xA;結果は&#xA;$ python &amp;ndash;version Python 2.7.3&#xA;$ time python ./fib.py&#xA;63245986&#xA;python ./fib.py 28.92s user 0.01s system 99% cpu 29.008 total&#xA;$ python3.2 &amp;ndash;version Python 3.2.3&#xA;$ time python3.2 ./fib.py&#xA;63245986&#xA;python3.2 ./fib.py 31.65s user 0.01s system 99% cpu 31.752 total&#xA;$ python3.</description>
    </item>
    <item>
      <title>node.jsでBuffer経由でArrayBufferを使う</title>
      <link>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Tue, 12 Mar 2013 18:52:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>Qiitaに書いた記事と同じです。&#xA;ブラウザ向けに書いていたコードをどうしてもサーバサイドでも使いたいと思い調べた結果以下のコードで使えることがわかった。&#xA;これでDataStream.jsをちょこっと変更するだけでnode.jsでも手軽にバイナリをいじれるようになった。&#xA;node向けに変更したDataStream.js</description>
    </item>
    <item>
      <title>黒歴史クリーナーよりも確実にツイートを消すスクリプト</title>
      <link>https://github.pyyoshi.com/blog/2013/03/%E9%BB%92%E6%AD%B4%E5%8F%B2%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%88%E3%82%8A%E3%82%82%E7%A2%BA%E5%AE%9F%E3%81%AB%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%82%92%E6%B6%88%E3%81%99%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link>
      <pubDate>Tue, 12 Mar 2013 01:17:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/%E9%BB%92%E6%AD%B4%E5%8F%B2%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%88%E3%82%8A%E3%82%82%E7%A2%BA%E5%AE%9F%E3%81%AB%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%82%92%E6%B6%88%E3%81%99%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid>
      <description>※黒歴史クリーナーがTwitterArchiveに対応したので以下の内容は、それらのサービスに頼りたくない人のみお読みになられればと思いますまる&#xA;黒歴史クリーナーなどのAPIを利用した削除方法だと削除しきれないツイートがどうしても出てしまいます。&#xA;なのでTwitterの設定から&amp;quot;Your Twitter archive&amp;quot;機能を利用してCSVなどのデータをダウンロードします。 ※表示言語を英語にしないと見えないかも&#xA;&amp;ldquo;Request email&amp;quot;をクリックしてある程度時間が経つとemail経由でダウンロードリンクが送られてきます。そこからDLしてください。&#xA;Windows環境の方はここからrm_tweets.exeをDLしてコマンドラインから実行します。&#xA;tweets.csvとrm_tweets.exeが同じ場所にあると仮定した場合&#xA;&amp;gt; .\rm_tweets.exe &amp;ndash;filepath &amp;ldquo;.\tweets.csv&amp;rdquo;&#xA;で削除が開始されるかと思います。&#xA;使い方は&#xA;&amp;gt; .\rm_tweets.exe -h&#xA;で確認して下さい。&#xA;他の環境の方は&#xA;$ git clone git://github.com/PyYoshi/TweetsCleaner.git&#xA;$ cd TweetsCleaner&#xA;$ pip install -r ./requirements.txt&#xA;$ python ./rm_tweets.py &amp;ndash;filepath &amp;ldquo;./tweets.csv&amp;rdquo;&#xA;のようにしてください。&#xA;※ただしgit cloneした後、rm_tweets.pyを開いてCONSUMER_KEYとCONSUMER_SECRETを各自セットしないと動きません。 </description>
    </item>
    <item>
      <title>AngularJSがやばい</title>
      <link>https://github.pyyoshi.com/blog/2013/01/AngularJS%E3%81%8C%E3%82%84%E3%81%B0%E3%81%84/</link>
      <pubDate>Tue, 29 Jan 2013 19:47:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/01/AngularJS%E3%81%8C%E3%82%84%E3%81%B0%E3%81%84/</guid>
      <description>なにがやばいってチュートリアルの動画とかドットインストールのチュートリアルを見てもらえばわかる。&#xA;あたまおかしい&#xA;なにこれ&#xA;実際組み込むとなると、やっぱりめんどくさくなるだろうけど。&#xA;コーディングなにそれ美味しいの？ってくらい便利な機能がつきまくってる。&#xA;いろいろ調べて、現在やってるプロジェクトをこちらに鞍替えも辞さない構え&#xA;あと見てて思ったのは、JSの勉強がてらWebAppとか作る程度なら一瞬でできそうだし、モック作ってテストするときとかの簡易ページとかそのへんに有効活用できそうってことかな。&#xA;なにがやばいのかそのうちまとめたい</description>
    </item>
    <item>
      <title>ソートアルゴリズムの可視化をしたFlashアプリがすごい！</title>
      <link>https://github.pyyoshi.com/blog/2013/01/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96%E3%82%92%E3%81%97%E3%81%9FFlash%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/</link>
      <pubDate>Sat, 26 Jan 2013 00:34:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/01/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96%E3%82%92%E3%81%97%E3%81%9FFlash%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/</guid>
      <description>とてもわかり易く可視化できていると思いました。&#xA;これ見ながら、どう動いているのかコード書くといろいろ捗りそうですね！&#xA;Sorting Algorithms Visualizer - wonderfl build flash online</description>
    </item>
    <item>
      <title>chromiumembeddedのautomateを使用する場合の注意点</title>
      <link>https://github.pyyoshi.com/blog/2013/01/chromiumembedded%E3%81%AEautomate%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Tue, 08 Jan 2013 14:12:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/01/chromiumembedded%E3%81%AEautomate%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>ちょっと躓いたので備忘録&#xA;cefのtoolの中にautomateっていうのがあって、これを使うと簡単にビルドすることができるようになるのだけれど、日本語環境下だとうまく動いてくれない。&#xA;automate.pyの中身を見てもらえばわかるのだが、popenで&amp;quot;svn info&amp;quot;を呼び出して、その値をパースしているから、環境によってはうまくパースできなくなる。&#xA;エラーは&#xA;&amp;ldquo;Exception: No SVN info for: &amp;hellip;&amp;rdquo;&#xA;となるかと思う。&#xA;コードを修正するのもいいけれど、いろいろめんどうなので&#xA;$ LANG=C&#xA;$ automate/automate.py &amp;ndash;download-dir=/path/to/hoge &amp;ndash;url=http://chromiumembedded.googlecode.com/svn/branches/1271/cef1&#xA;しました。</description>
    </item>
    <item>
      <title>JDKをwgetする</title>
      <link>https://github.pyyoshi.com/blog/2012/12/JDK%E3%82%92wget%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 27 Dec 2012 17:46:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/12/JDK%E3%82%92wget%E3%81%99%E3%82%8B/</guid>
      <description>JDKはブラウザで同意のもとでDLしなくてはいけなくて、それがサーバのセットアップとなると結構めんどくさくて頭にきていたのですが、なにやら調べてみるとwgetでいけるみたいです。&#xA;$ wget &amp;ndash;no-cookies &amp;ndash;header &amp;ldquo;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com&amp;rdquo; &amp;ldquo;http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-x64.bin&amp;quot;&#xA;こんなかんじでおｋみたいです。&#xA;仕組みとかはChromeとかのdevtoolでみてみるといいかもです。</description>
    </item>
    <item>
      <title>自分のMIT Licenseページを作る簡単な方法</title>
      <link>https://github.pyyoshi.com/blog/2012/12/%E8%87%AA%E5%88%86%E3%81%AEMIT-License%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B%E7%B0%A1%E5%8D%98%E3%81%AA%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 02 Dec 2012 12:35:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/12/%E8%87%AA%E5%88%86%E3%81%AEMIT-License%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B%E7%B0%A1%E5%8D%98%E3%81%AA%E6%96%B9%E6%B3%95/</guid>
      <description>MITライセンスのページってOSIのページくらいしか見当たらないし、権利者絡みでもいろいろあると思って調べてたら、手軽にできるサービスを見つけました。&#xA;mit-license.orgというサイトで行えます。任意のユーザ名がサブドメインとして選べ、個人のライセンスページになるという仕組みみたいです。&#xA;Remy Sharpさんありがとう。&#xA;ということでサービスへの登録ですが、json形式でcurl使って投げてあげれば作られるという簡単な方法です。&#xA;私の場合だと&#xA;$ curl -d&amp;rsquo;{ &amp;ldquo;copyright&amp;rdquo;: &amp;ldquo;本名&amp;rdquo; }&amp;rsquo; http://pyyoshi.mit-license.org&#xA;として投げました。 定義できるものはそれなりあって、フォーマット形式をtxtにしたり、メールを登録できたりします。&#xA;詳しくはこちらのreadmeでも読むといいと思います。&#xA;これ削除するときはどうするんだろ…</description>
    </item>
    <item>
      <title>[Chrome Extension API] Manifestをapp内からアクセスする方法</title>
      <link>https://github.pyyoshi.com/blog/2012/09/Chrome-Extension-API-Manifest%E3%82%92app%E5%86%85%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 23 Sep 2012 09:20:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/09/Chrome-Extension-API-Manifest%E3%82%92app%E5%86%85%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>chrome.app.getDetails()&#xA;で取得することが可能。</description>
    </item>
    <item>
      <title>[メモ]C&#43;&#43;のメモリリークを検出する方法</title>
      <link>https://github.pyyoshi.com/blog/2012/09/%E3%83%A1%E3%83%A2C-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 19 Sep 2012 19:26:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/09/%E3%83%A1%E3%83%A2C-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>cchardetでバインドしているライブラリにメモリリークするバグがあったのだけれど、C++と親しい付き合いをしていないし、自分で書いたコードではないのでどのように見つけてあげればいいのかわからないので、Google先生に聞きました。&#xA;そしたらVC++には検出してくれるしゅんごいライブラリがあるみたいで、それを使用したらあっさり見つけることができました。&#xA;詳しいお話は書きませんが、debugビルドで#include &amp;ldquo;memory_leak.h&amp;quot;を先頭においてビルドすると出力に表示されました。&#xA;ただ、メインコードにincludeするだけでは、どの位置にメモリリークがあるかわからないのですべてのコードにincludeしないといけないようです。&#xA;以下がそのmemory_leak.h</description>
    </item>
    <item>
      <title>自動でCoffeeScriptをコンパイルするPythonスクリプトを書いた</title>
      <link>https://github.pyyoshi.com/blog/2012/09/%E8%87%AA%E5%8B%95%E3%81%A7CoffeeScript%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8BPython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</link>
      <pubDate>Tue, 18 Sep 2012 22:05:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/09/%E8%87%AA%E5%8B%95%E3%81%A7CoffeeScript%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8BPython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</guid>
      <description>いちいちコマンド書いてられないので、ファイルに変更があった場合にビルドするスクリプトを書いた。&#xA;Python 2.7環境でテストしました。&#xA;必要なモジュールは&#xA;$ pip install watchdog&#xA;設定項目を埋めたらあとは実行するのみです。&#xA;以下がそのスクリプトです。&#xA;追記)&#xA;coffee自体に監視する機能ありました…&#xA;$ coffee -w -c 監視するコードのパス&#xA;しっかりドキュメント読むべきでした。&#xA;ただ、このスクリプトは指定されたディレクトリ全体のCoffeeScriptを監視してコンパイルします。</description>
    </item>
    <item>
      <title>mono&#43;TwitterIrcGateway&#43;znc環境の構築</title>
      <link>https://github.pyyoshi.com/blog/2012/09/mono-TwitterIrcGateway-znc%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Tue, 18 Sep 2012 01:16:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/09/mono-TwitterIrcGateway-znc%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89/</guid>
      <description>TwitterIrcGatewayをCentOS6環境で使うための備忘録&#xA;1. まずWindowsでTIGのバイナリを作成する。 $ svn co http://svn.misuzilla.org/etcetera/TwitterIrcGateway/trunk/ tig&#xA;TwitterIrcGateway.slnを開いて、&amp;ldquo;ISO-&amp;ldquo;という文字を検索して、一致する文字列をすべて&amp;quot;UTF-8&amp;quot;に書き換え。 #これをしないとmono環境ではうまく起動できなかった。&#xA;それをリリースなりでビルドしておく。&#xA;2. TIGを動かす環境を作る $ sudo yum install mono-devel &amp;ndash;enablerepo=epel&#xA;$ sudo useradd tig&#xA;$ sudo su tig&#xA;$ cd ~&#xA;$ mkdir tig&#xA;$ cd tig&#xA;先ほどビルドしたものをtig内に入れる。&#xA;&amp;ldquo;mono TwitterIrcGatewayCLI.exe&amp;quot;とやると起動スクリプト書くときいろいろ大変になるので、スタンドアロン実行ファイルを作る&#xA;$ mkbundle -o TwitterIrcGatewayCLI_START TwitterIrcGatewayCLI.exe&#xA;起動スクリプトは以下になりました。&#xA;$ sudo vim /etc/rc.d/init.d/TwitterIrcGateway&#xA;$ sudo chmod +x /etc/rc.d/init.d/TwitterIrcGateway で上記スクリプトを記述&#xA;起動スクリプトを登録&#xA;$ sudo chkconfig &amp;ndash;add TwitterIrcGateway&#xA;$ sudo chkconfig TwitterIrcGateway on&#xA;起動確認&#xA;$ sudo service TwitterIrcGateway start</description>
    </item>
    <item>
      <title>環境によってCythonでうまくコード変換ができない場合の対処</title>
      <link>https://github.pyyoshi.com/blog/2012/08/%E7%92%B0%E5%A2%83%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6Cython%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
      <pubDate>Wed, 22 Aug 2012 22:25:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/08/%E7%92%B0%E5%A2%83%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6Cython%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
      <description>なぜかWindowsやUbuntuでは素直に変換しビルドが成功するのに、CentOSではうまくpyxをC/CPPに変換できない問題が発生しました。&#xA;この原因がどのようなものなのか色々と調べてみたのですが、検索の仕方がまずかったのか謎のままでいました。&#xA;きっとCython.Distutils.build_extが悪さしてるんだろうなという検討はついていたので、&#xA;それを標準のdistutils.command.build_ext.build_extに変更し、&#xA;さらにCython.Compiler.Main.compileを使用して&amp;quot;*.pyx&amp;quot;をC/CPPに変換させるような処理に変更しました。&#xA;C/CPPに強制変換させているので、sourcesにはpyxではなく、変換したC/CPPファイルを追加するようにも変更してください。&#xA;この変更によって、たぶんCentOSのようにうまく変換できない環境でも対応できるかと思います。&#xA;変更した際のdiffはこちら&#xA;備忘録♪備忘録♪</description>
    </item>
    <item>
      <title>何か一つ自身を持てるもの・強みになるものをもつ</title>
      <link>https://github.pyyoshi.com/blog/2012/08/%E4%BD%95%E3%81%8B%E4%B8%80%E3%81%A4%E8%87%AA%E8%BA%AB%E3%82%92%E6%8C%81%E3%81%A6%E3%82%8B%E3%82%82%E3%81%AE%E5%BC%B7%E3%81%BF%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E3%82%82%E3%81%A4/</link>
      <pubDate>Tue, 07 Aug 2012 22:09:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/08/%E4%BD%95%E3%81%8B%E4%B8%80%E3%81%A4%E8%87%AA%E8%BA%AB%E3%82%92%E6%8C%81%E3%81%A6%E3%82%8B%E3%82%82%E3%81%AE%E5%BC%B7%E3%81%BF%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E3%82%82%E3%81%A4/</guid>
      <description>pull requestが通るとニヤニヤが止まらなくなる僕です。&#xA;たとえ本当に小さな事でも誰かの役に立ったと思うと嬉しいのです。&#xA;誰がなんと言おうと僕はこれからもこれに快楽を得ていくでしょう。&#xA;さておき、最近良く思うことがあります。&#xA;自分の強みは一体何なのか？っということです。&#xA;翌々考えてみると、自分にはこれといって強みになるものなんてないんじゃないかとそう思うのです。&#xA;とりあえずTwitterなりフィードなりから興味をそそられるものを片っ端から試して、中途半端に終えることもあります。&#xA;その中でも唯一続いてきたのはPythonであるし、良きPythonistaであり続けたいとも思っています。&#xA;Linuxだってそうです。&#xA;最初はCLIかっけー俺ハッカーじゃん！って思っていたけれど、&#xA;プログラミングとともにすることでCUIの良さや、Windowsに比べて開発者との親和性の良さなどいくつも学びました。&#xA;さてさて話が少しそれてしまいました。&#xA;僕の強みってなんでしょうか？自身を持ってこれだ！って言えるものは何でしょう？&#xA;この答えをここ1年考え続けてきましたが、未だに見つかりません。&#xA;きっと探し方が悪いのかもしれませんし、はたまた気づいていないだけかもしれません。&#xA;このままでは自身の成長の妨げになりかねない。&#xA;そう思ったのです。&#xA;っということで、具体的な目標を立てて生活してみようかと思います。&#xA;最初の小さな目標は&#xA;自分がお世話になっているライブラリのコントリビュータになること&#xA;そう決めました。&#xA;なんだかおかしな目標ではあると思いますが、まずはOSSへ積極的に参加していくことが重要なのかなと思いました。&#xA;rejectを恐れずpull requestして行きましょう！</description>
    </item>
    <item>
      <title>NASのHDDを復旧準備</title>
      <link>https://github.pyyoshi.com/blog/2012/08/NAS%E3%81%AEHDD%E3%82%92%E5%BE%A9%E6%97%A7%E6%BA%96%E5%82%99/</link>
      <pubDate>Tue, 07 Aug 2012 06:59:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/08/NAS%E3%81%AEHDD%E3%82%92%E5%BE%A9%E6%97%A7%E6%BA%96%E5%82%99/</guid>
      <description>ここ最近調子が悪いNAS。 そしておいておいたファイルがデバイスエラーで読み込めなくなってしまった。&#xA;ファイルシステムがXFSという事もあってLinux機につないで作業を行った。&#xA;まずマウントできるか試した。&#xA;$sudo mkdir /mnt/nas&#xA;$sudo mount -t xfs /dev/sdc1 /mnt/nas&#xA;SuperBlockがどうのこうのというよくわからないエラーが出た。&#xA;調べてみるとxfsprogsでなんとかなるかもしれないらしい。&#xA;$sudo apt-get install xfsprogs&#xA;$sudo reboot&#xA;バックアップの作成&#xA;$sudo mkdir /mnt/tmp&#xA;$sudo dd if=/dev/sdc1 of=/mnt/tmp/broken.img ibs=512 obs=1024k conv=noerror,sync&#xA;$sudo xfs_check /dev/sdc1&#xA;found candidate secondary superblock&amp;hellip;&#xA;verified secondary superblock&amp;hellip;&#xA;writing modified primary superblock&#xA;sb root inode value 18446744073709551615 (NULLFSINO) inconsistent with calculated value 128&#xA;resetting superblock root inode pointer to 128&#xA;sb realtime bitmap inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 129</description>
    </item>
    <item>
      <title>Windows環境下でもVirtualenvWrapperを使う</title>
      <link>https://github.pyyoshi.com/blog/2012/08/Windows%E7%92%B0%E5%A2%83%E4%B8%8B%E3%81%A7%E3%82%82VirtualenvWrapper%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Thu, 02 Aug 2012 21:34:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/08/Windows%E7%92%B0%E5%A2%83%E4%B8%8B%E3%81%A7%E3%82%82VirtualenvWrapper%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>とても便利なvirtualenvwrapperですが、なぜかWindowsには対応していません。&#xA;MSYS下なら動かせないこともないのですが、PythonがMSYS環境であまり良い挙動を取りません。&#xA;どうしたら良いものか調べていたらPowerShell2で動かすことができる&#xA;virtualenvwrapper-powershell&#xA;というものを見つけました。&#xA;なにやらvirtualenvwrapperをPowerShellスクリプト用に再実装したものみたいです。&#xA;ということで&#xA;使えるところまで準備していこうかと思います。&#xA;前提条件としてPowerShell(Win7はビルトイン)とvirtualenvはインストール済みとします。&#xA;なお、私はPS初心者です。なのでPSの環境を一から作るところから始めます。ご了承ください。&#xA;１. PSスクリプトを使えるようにする。 まず、PSでPSスクリプトを使えるようにしなくてはいけません。&#xA;PSを管理者権限で起動します。&#xA;&amp;gt; Get-ExecutionPolicy&#xA;と実行すると「Restricted」 「AllSigned」 「RemoteSigned」 「Unrestricted」のいずれかが出力されるかと思います。&#xA;Restrictedはすべてのスクリプトの実行を禁止している状態 AllSignedは署名済みスクリプトのみ実行可能な状態 RemoteSignedはローカルに保存されているスクリプト、ダウンロードされた署名済みスクリプトが実行可能な状態 Unrestrictedはすべて実行可能な状態 という感じです。&#xA;デフォルトだと1だと思います。これを3の状態に変更します。&#xA;&amp;gt; Set-ExecutionPolicy RemoteSigned&#xA;こうすることで、PSスクリプトを実行できる状態になりました。&#xA;PSを一旦終了します。&#xA;※なお、この状態変更時に管理者権限がないとエラーを吐きます。そのために最初に管理者権限で実行するようにしました。&#xA;２. PS環境の作成 PSを起動します。&#xA;&amp;gt; $profile&#xA;を実行すると、PS起動時に読み込むプロファイルのパスが出力されます。&#xA;設定していない場合パスに書かれているファイルが作成されていないので、&#xA;&amp;gt; New-Item -type file -force $profile&#xA;を実行してあげると空のファイルがパスに作成されます。&#xA;これをエディタで編集すれば、起動時にいろいろできるそうです。bashrcとかそのへんを浮かべればよいかと思います。&#xA;これを現在のセッションで有効にしてあげます。 今のところ空ファイルですけどね＾＾；&#xA;&amp;gt; . $profile&#xA;unix系だと source .hoge というのと同じ要領かと思います。&#xA;PSを終了します。&#xA;３. virtualenvwrapper-powershellをインストールする。 スクリプトをダウンロードしてきましょう。 pipやeasy_installではダメ&#xA;解凍したらPS起動します。&#xA;&amp;gt; cd \Bin&#xA;&amp;gt; .\Setup.ps1&#xA;と実行します。&#xA;「virtualenvwrapper: Installation complete.</description>
    </item>
    <item>
      <title>ファイル監視にwatchdogがかなり便利な件</title>
      <link>https://github.pyyoshi.com/blog/2012/07/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%ABwatchdog%E3%81%8C%E3%81%8B%E3%81%AA%E3%82%8A%E4%BE%BF%E5%88%A9%E3%81%AA%E4%BB%B6/</link>
      <pubDate>Tue, 17 Jul 2012 17:40:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/07/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%ABwatchdog%E3%81%8C%E3%81%8B%E3%81%AA%E3%82%8A%E4%BE%BF%E5%88%A9%E3%81%AA%E4%BB%B6/</guid>
      <description>win32apiを叩くのはナンセンスだし、何より手軽に書きたかったのでpypiで探索していたらwatchdogというものを知りました。&#xA;以下が「*.jpg, *.png, *.txtの3つのファイルが、作成・編集・削除された時にそれを知らせる」コードです。&#xA;on_created, on_modified, on_deletedに自分が実行したい処理を書いていけばいいかと思います。&#xA;例えばdocを編集していちいち自分でmake htmlとせずともwatchdogを使えば自動化できてしまいます。&#xA;ただちょっと触って気になったところが、ファイル・ディレクトリ作成時にon_any_eventだと2回実行してしまうことです。&#xA;このコードを使ってみればわかると思うのですが、どうやら作成イベントは on_created, on_modifiedの順で実行されているためのようです。&#xA;OS内部のことはわからないのであくまで推定ですが。</description>
    </item>
    <item>
      <title>Python向けTumblrライブラリPytumb2をリリース</title>
      <link>https://github.pyyoshi.com/blog/2012/07/Python%E5%90%91%E3%81%91Tumblr%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AAPytumb2%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/</link>
      <pubDate>Sat, 14 Jul 2012 23:06:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/07/Python%E5%90%91%E3%81%91Tumblr%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AAPytumb2%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/</guid>
      <description>Python向けTumblrライブラリPytumb2をリリースしました。&#xA;１年くらい前にPytumbをリリースして以来まったくメンテナンスせずに放置状態だったので、この際コードの書き直しを行いました。&#xA;使い方はTweepyのように手軽に扱えるようにしています。&#xA;詳しくはtests.pyやexample.pyを見ていただければとおもいます。&#xA;また、ドキュメントはまだ揃えていませんが、api.pyにある程度書かれています。&#xA;バグや要望等は随時承っております。&#xA;では&#xA;PyYoshi/Pytumb2 · GitHub</description>
    </item>
    <item>
      <title>久しぶりに数学的なプログラミング＞＜</title>
      <link>https://github.pyyoshi.com/blog/2012/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E6%95%B0%E5%AD%A6%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
      <pubDate>Tue, 10 Jul 2012 21:32:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E6%95%B0%E5%AD%A6%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</guid>
      <description>「for文を使って,s=1+3+5+&amp;hellip;+99の和を計算、表示するプログラミングを作りましょう」&#xA;というネタがTwitterで流れてきたのでPythonでやってみました。&#xA;#!/usr/bin/env python reduce(lambda a,b: a+b, [i for i in range(1,100) if i%2==1]) sum([i for i in range(1,100) if i%2==1]) 男らしく()ワンライナーで書いてみました。&#xA;というかいくら奇数の足し算とはいえ、数学的なプログラミングを最近全くしていないせいか、最初？？？ってなりました。&#xA;そういえば自分の作ったプログラムって数学的な要素全然ない気がします…&#xA;コードは2つの方法があります。短く書きたいならsum()を使うのがいいと思います。&#xA;僕はどうなってるのか気になるタイプなのでreduce()使ったヤツのほうが好きですね。&#xA;といいますか、Pythonは気持ち悪いくらい便利な関数が標準で備わってます＞＜</description>
    </item>
    <item>
      <title>ネタが無くなった</title>
      <link>https://github.pyyoshi.com/blog/2012/06/%E3%83%8D%E3%82%BF%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F/</link>
      <pubDate>Thu, 28 Jun 2012 18:38:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/%E3%83%8D%E3%82%BF%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F/</guid>
      <description>cchardetを作るまではいろいろはかどっていたプログラミングですが、それを終えるとネタがないことに気づいた。&#xA;PyGooglePlusは仕様変更の速度についていけないのとサンプリングデータの数が少ないのでという理由であまり更新できない。&#xA;もっとも仕様変更に柔軟に対応できるプログラミングの仕方が考えつかない自分のせいでもあるのですがXD&#xA;なにぶんニートの身分だと、やることがないと暇なのである。&#xA;仕事探せというお話ではあるのですが、仕事を探すのがひどく億劫。どうしようもないクズである…&#xA;親には申し訳ないとは思うけれど、もうちょっと自由でいたい反面、お金がないと遠征もできない。&#xA;素晴らしい負の連鎖である。 バイトくらいは探したほうがよさそう。</description>
    </item>
    <item>
      <title>cChardetをPyPiに登録してみた</title>
      <link>https://github.pyyoshi.com/blog/2012/06/cChardet%E3%82%92PyPi%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 26 Jun 2012 18:40:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/cChardet%E3%82%92PyPi%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>BeautifulSoupのGoogle Groupにcchardetを導入したら高速化したよって報告したらBS開発者から&#xA;「ビルド等の導入をシンプルにしてくれたら使ってやってもいいよ。」&#xA;と言われたのでlibcharsetdetectを取り込んで1つの静的ライブラリにしちゃいました。&#xA;いくつかライブラリを作っているみですが、PyPiにはじめて登録しました。&#xA;適宜setup.pyに必要な情報を入れたら、&#xA;$python setup.py register&#xA;でユーザ登録とライブラリの登録を済ませます。その際にログイン済みでないとファイルのアップロードができなくなりますので注意してください。&#xA;そして、sdistをアップロードさせます。&#xA;$python setup.py sdist &amp;ndash;formats=gztar upload&#xA;これだけで簡単に登録できちゃいました。 難しいこと考えずにアップロードできるのは大変便利ですね。&#xA;ただし、registerすると~/.pypircにユーザ名と暗号化されていないパスワードが書かれちゃっています。&#xA;registerでログイン・アップロードを終了したら消すという作業をするのもありなのかもしれませんね。&#xA;この辺は要調査&#xA;cchardet: PyPi</description>
    </item>
    <item>
      <title>より高速なchardet、cchardetをリリースしました</title>
      <link>https://github.pyyoshi.com/blog/2012/06/%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F%E3%81%AAchardetcchardet%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Wed, 20 Jun 2012 11:52:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F%E3%81%AAchardetcchardet%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>以前の投稿にchardetがあまりにも遅いと嘆いていました。&#xA;これも何かの縁だと思い、Cythonの練習がてら、さっそくcchardetをリリースさせて頂きました！&#xA;ベンチを取ったのですが、C拡張なだけあってかなり早い結果が出ました。&#xA;chardetが4.009999990463257秒で検出したのに対し、cchardetは0.0009999275207519531秒と実に4000倍！（計算あっているか不安ｗ)&#xA;割かし満足しています。&#xA;ただ不満もありまして、chardetはconfidenceを出力できるのに対し、cchardetはencodingしか吐きません。&#xA;これはcharsetdetectライブラリ側の問題なのですが、いずれソースをいじって得られるようにしたいと考えています。&#xA;もう1つはビルド環境がWindowsでしかおこなっていないため、setup.pyをもう少々柔軟なものに変えないと他のプラットフォームで扱えないことです。&#xA;この2つは時間があるときに修正していきたいと思います。&#xA;ではでは&#xA;PyYoshi / cChardet&#xA;追記 2012,06/20,22:39&#xA;linuxもビルドできるように修正しました。 Ubuntu 12.04 64bit環境で確認&#xA;追記 2012,07/07,14:35&#xA;confidenceを取得できるようにしました。</description>
    </item>
    <item>
      <title>PyGooglePlusをプロファイリングしてみた</title>
      <link>https://github.pyyoshi.com/blog/2012/06/PyGooglePlus%E3%82%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 18 Jun 2012 15:58:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/PyGooglePlus%E3%82%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>現在noseでテストコードを書いてるのだけれど、ついでにどこが足を引っ張っているのか知るためにnose経由でプロファイリングしてみた。&#xA;準備&#xA;Graphizをインストール $ pip install https://guppy-pe.svn.sourceforge.net/svnroot/guppy-pe/trunk/guppy $ pip install pbp.scripts テストコードをtests.pyとして書いたら&#xA;$ nosetests &amp;ndash;with-profile &amp;ndash;profile-stats-file nose.prof tests.py&#xA;$ hotshot2dot nose.prof| dot -Tpng -o profile.png&#xA;を実行して出力した画像とにらめっこ&#xA;今回はApiHandler.get_user_info()のみのテストコードで行った。 またBeautifulSoup4がリリースされていることを知り、lxmlあれば早くなるよって言ってたので、3と4の2パターンで行った。&#xA;以下が結果である。&#xA;上がBS3、下がBS4であるが結果としては、lxmlを使っているはずのBS4のほうが遅い結果になっている。処理が余計にかかっている印象。 いずれ改善されると思うけど、特に必要性を感じないのであればBS3を使っておけばいいと思う。&#xA;それにしてもchardetの処理が足を引っ張りすぎている気がする。それと自分のライブラリ（苦笑）&#xA;※ この結果を出したときは指定していなかったが、文字コードが固定で既知なら,from_encoding引数をBeautifulSoupに指定してあげるのもいいと思うよ。 実験的にPyGooglePlusにも使用してみたら、5分の1くらい処理時間が縮まりました。 省いてるから当然だね。 だとしてもC拡張のchardetが欲しくなるよね。だれか作らないかな&#xA;参考：&#xA;Visual profiling with Nose and gprof2dot </description>
    </item>
    <item>
      <title>Pythonコードを実行ファイル(exe)にするときの注意点</title>
      <link>https://github.pyyoshi.com/blog/2012/06/Python%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABexe%E3%81%AB%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Tue, 05 Jun 2012 11:16:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/Python%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABexe%E3%81%AB%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>自分が知っている限りだと、py2exeとcx_freezeがある。前者はwindowsのみ対応であるが、cx_freezeはmac等のプラットフォームにも対応している。&#xA;さらにcx_freezeはsetup.pyに特に記述しなくても実行ファイルを作ることができるのでpy2exeより手軽に作れて便利なのである。&#xA;またpy2exeに比べてコードの依存関係のチェックを詳しくしているのか実行ファイルサイズが小さくなる。&#xA;で、便利ではあるcx_freezeなのだが使ってみて デメリット が２つほどあった。&#xA;１. py2exeでは１ファイルのなかにpydやpython.dll等があるのだが、cx_freezeは実行ファイルの他にpydとかそのへんの動的ライブラリが外に出る。&#xA;py2exeはバイナリにビルドするコードを内包しているが、cx_freezeは__main__.py*というファイルにもろでているため、ごにょごにょするとバイトコードの中身がわかってしまう。&#xA;というデメリットがある。　＃1のデメリットはNSISを使えば1ファイルにまとめ上げることは出来る。 (参考)&#xA;以下のことから、あんまり見せたいくない文字列があるときはcx_freezeは避けて、py2exeを使えばいいのである。&#xA;その時は&#xA;なるべくコードは１ファイルに収めてビルドする。&#xA;見せたくない文字列がある場合は軽く難読化する。&#xA;に気をつければいいんじゃないかな？&#xA;※ py2exeのメインコードは実行ファイルのバイナリでしか見つからなかったが、どこか違う場所にあるかもしれないので、この記事自体が意味をなさなくなるかもしれないのであしからず。&#xA;それと、そもそもPythonという言語のコンパイルはバイトコードに変換するだけであってC#とかJavaのように中間コードに変換しているわけではないので、コードは覗かれて当然であるという認識のもとで使うべきであるかと思います☆（ゝω・）vｷｬﾋﾟ</description>
    </item>
    <item>
      <title>IronPythonはクソ</title>
      <link>https://github.pyyoshi.com/blog/2012/06/IronPython%E3%81%AF%E3%82%AF%E3%82%BD/</link>
      <pubDate>Fri, 01 Jun 2012 11:26:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/06/IronPython%E3%81%AF%E3%82%AF%E3%82%BD/</guid>
      <description>PyGooglePlusでクライアントでも作ろうかとC#にIronPythonを組み込んで実験していたのだけれど、どうもうまく動かない。&#xA;というのもIronPython単体ではCPythonには負けるものの、いちよ実行はできたのだけれどC#から呼ぶとログイン処理からユーザ情報取得処理までに５分くらいかかる始末&#xA;せっかくdynamic使えてかなり親和性が上がっているのにもったいないなぁ…&#xA;ちなみにurllib2までの処理は軒並みな速さなのだけれどObjectを生成するBeautifulSoupやsimplejsonでかなり時間がかかっているみたい。&#xA;というわけで、pythonで書かれたものをrpc serverにしてソケット通信すればいいんじゃね？ってのが昨日たどり着いた結論；（</description>
    </item>
    <item>
      <title>PyGooglePlusをリリースしました</title>
      <link>https://github.pyyoshi.com/blog/2012/05/PyGooglePlus%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
      <pubDate>Fri, 25 May 2012 22:38:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/05/PyGooglePlus%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
      <description>Google+の非公開APIを扱えるようにするPython製ライブラリ「PyGooglePlus」をリリースしました。&#xA;何時まで経ってもWrite API公開されないし、Webハックは楽しいので作ってしまいました。&#xA;Chrome Devtoolsとにらめっこしたせいもあって結構使い方わかってきた感じがします。&#xA;ただ、やはり久しぶりに書いた（まともな）コードなだけあって、へんてこな書き方が多く見受けられたのがちょっとアレですね。&#xA;使い方ですが、ひと通りtest.pyに書いてありますが、まぁ誰もこのままじゃ使わないだろうからドキュメント書いて、クライアント作ってぽいっとgithubにでも上げたいと思います :)</description>
    </item>
    <item>
      <title>Python2.7.3 x64を自ビルド for Windows</title>
      <link>https://github.pyyoshi.com/blog/2012/05/Python2.7.3-x64%E3%82%92%E8%87%AA%E3%83%93%E3%83%AB%E3%83%89-for-Windows/</link>
      <pubDate>Thu, 17 May 2012 22:26:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/05/Python2.7.3-x64%E3%82%92%E8%87%AA%E3%83%93%E3%83%AB%E3%83%89-for-Windows/</guid>
      <description>前提としてsvnやVC++、Perl、Gowなどが入っているものとする&#xA;cd src&#xA;svn checkout http://svn.python.org/projects/python/branches/release27-maint/ python2.7.3&#xA;svn export http://svn.python.org/projects/external/bzip2-1.0.5&#xA;svn export http://svn.python.org/projects/external/openssl-0.9.8l&#xA;wget &amp;ldquo;http://sourceforge.jp/frs/redir.php?m=jaist&amp;amp;f=%2Fgnupack%2F49095%2Fsqlite3-3.6.21-3-src.tar.bz2&amp;quot;&#xA;tarコマンドではうまく解凍できないので7zip等で解凍、PCBuild内に置く。&#xA;wget &amp;ldquo;http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tcl8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;amp;ts=1337257341&amp;amp;use_mirror=jaist&amp;rdquo;&#xA;wget &amp;ldquo;http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tk8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;amp;ts=1337257429&amp;amp;use_mirror=jaist&amp;rdquo;&#xA;tcl/tkはsrcルートにtcltkというディレクトリを作り、その中に解凍&#xA;VisualStudio2010から&#xA;_bsddbのプロパティのインクリュードディレクトリにPCBuildとPCBuild/build_windowsを追加する。&#xA;_tkinterのプロパティのインクリュードディレクトリにtcltk内のgenericとxlibを追加。構成の種類をスタティックライブラリにする。&#xA;ビルドする。&#xA;２つほどエラーがでるがpython自体はビルド完了する。 ２つのエラーは&#xA;ここのパッチ&#xA;を使えば解決するみたいなのだがうまくいかない…&#xA;Windowsはさくっとビルドできないのがつらくてしょうがない…</description>
    </item>
    <item>
      <title>ircBot-consoleで自動オペレータ権限付与するスクリプト書いたよ</title>
      <link>https://github.pyyoshi.com/blog/2012/02/ircBot-console%E3%81%A7%E8%87%AA%E5%8B%95%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E6%A8%A9%E9%99%90%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88/</link>
      <pubDate>Mon, 20 Feb 2012 04:14:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2012/02/ircBot-console%E3%81%A7%E8%87%AA%E5%8B%95%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E6%A8%A9%E9%99%90%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88/</guid>
      <description>IRCを使用しなくてはいけなくなったので書いてみました。&#xA;このコードはircBot-console用でJavaScript(Rhino)で書かれています。&#xA;WHITE_LISTにユーザを追加していくことで、自動でOP権限を与えるユーザを増やすことができます。&#xA;また、完全一致か前方一致か選択できます。&#xA;愚痴としてRhinoのデバッグメッセージがないこと（オブジェクトハッシュしか出力されない）、エラーログを記述するための関数がないことかなー。スクリプトのデバッグはとてもめんどくさいです。 OSSだし自分で書きなおせってのはあるけど</description>
    </item>
    <item>
      <title>redmineをnginxで扱う</title>
      <link>https://github.pyyoshi.com/blog/2011/10/redmine%E3%82%92nginx%E3%81%A7%E6%89%B1%E3%81%86/</link>
      <pubDate>Wed, 05 Oct 2011 23:43:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/10/redmine%E3%82%92nginx%E3%81%A7%E6%89%B1%E3%81%86/</guid>
      <description>教授から成果を見える形で出せと言われたのでとりあえず備忘録。。&#xA;Redmineの設定とか&#xA;sudo apt-get install ruby ruby1.8-dev rubygems sendmail imagemagick libmagick9-dev&#xA;sudo gem update &amp;ndash;system 1.6.2&#xA;sudo gem install sqlite3-ruby sudo gem install -v=2.3.11 rails&#xA;sudo gem install -v=0.4.2 i18n&#xA;sudo gem install rake&#xA;sudo mkdir -p /var/www/redmine_test&#xA;cd /var/www/redmine_test&#xA;sudo git clone git://github.com/edavis10/redmine.git&#xA;cd redmine&#xA;sudo vim config/database.yml&#xA;production:&#xA;adapter: sqlite3&#xA;database: db/redmine.db&#xA;timeout: 5000&#xA;sudo rake generate_session_store&#xA;sudo rake db:migrate RAILS_ENV=&amp;ldquo;production&amp;rdquo;&#xA;sudo rake redmine:load_default_data RAILS_ENV=production&#xA;&amp;gt;ja&#xA;メールの設定がいまいちわからない。&#xA;使わないしテキトーでいいよね。</description>
    </item>
    <item>
      <title>mongodbの認証について</title>
      <link>https://github.pyyoshi.com/blog/2011/10/mongodb%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Wed, 05 Oct 2011 12:33:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/10/mongodb%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>mongodbで認証&#xA;configに&#xA;auth=true&#xA;とかく&#xA;bind_ip=0.0.0.0&#xA;を指定するとそこからのみ接続を受け付ける。&#xA;次にデータベースへ接続する&#xA;mongo &amp;ndash;shell&#xA;use admin&#xA;db.addUser(&amp;lsquo;username&amp;rsquo;,&amp;lsquo;passwd&amp;rsquo;)&#xA;で管理者を追加&#xA;使用しているデータベースにユーザを追加する場合は&#xA;db.auth(&amp;lsquo;username&amp;rsquo;,&amp;lsquo;passwd&amp;rsquo;)&#xA;で管理者権限でログイン後&#xA;db.addUser(&amp;lsquo;username2&amp;rsquo;,&amp;lsquo;passwd2&amp;rsquo;)&#xA;で追加可能&#xA;{&amp;quot;$err&amp;quot; : &amp;ldquo;unauthorized db:admin lock type:-1 client:127.0.0.1&amp;rdquo;,&#xA;&amp;ldquo;code&amp;rdquo; : 10057}&#xA;上記のようなエラーは管理者権限を持っていないとなるので注意&#xA;詳しい設定方法は&#xA;File Based Configuration</description>
    </item>
    <item>
      <title>Windows8をWinPE3を使ったネットワーク経由でインストール</title>
      <link>https://github.pyyoshi.com/blog/2011/09/Windows8%E3%82%92WinPE3%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Wed, 21 Sep 2011 13:47:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/09/Windows8%E3%82%92WinPE3%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>たまたま4GBのUSBメモリ無く、それとネットワーク経由でのOSのインストールってどんなものなのか知りたくなったので試してみた。&#xA;使用したPCはdynabook S30。 こいつにRAM4GB+SSD64GBでアップグレードしてるのでWin7でもそれなり頑張ってくれていた。そんで今度はWin8で犠牲になってもらおうという魂胆である。&#xA;手順&#xA;1, USBから起動できるWindows PE 3の作成&#xA;1-1, Windows PEのイメージ作成&#xA;とりあえずここからWindows AIKをDLしてインスコ&#xA;インスコ終わったら管理者権限でWindows AIKの「Deployment ツールのコマンド プロンプト」を起動します。&#xA;そして以下のコマンドを実行するとWinPE起動イメージが出来上がります。&#xA;copype x86 D:\WinPE3&#xA;imagex /apply D:\WinPE3\winpe.wim 1 D:\WinPE3\mount&#xA;imagex /capture D:\WinPE3\mount D:\WinPE3\ISO\SOURCES\BOOT.WIM &amp;ldquo;WinPE for recovery&amp;rdquo; /boot /compress maximum oscdimg -n -bD:\WinPE3\etfsboot.com D:\WinPE3\ISO D:\WinPE3\recovery.iso&#xA;1-2, USBメモリにイメージを書き込む&#xA;USBメモリの初期化を行わなければなりません。&#xA;それ自体はこちらの記事を参照すると良いでしょう。&#xA;さて初期化が終わった所で1-1で作ったイメージをUSBメモリに書き込みます。と言ってもコピーだけなんですが。&#xA;D:\WinPE3以下のISOフォルダ内をすべてUSBメモリにコピーすれば完了です。&#xA;あとはUSBメモリにドライバー類をおいて起動します。&#xA;2, WindowsPE上からネットワークインストール&#xA;2-1, ドライバの読み込み&#xA;うまく起動できたらコマンドプロンプトが表示されているかと思います。&#xA;そこで&#xA;drvload &amp;ldquo;読み込みたいドライバのINFパス&amp;rdquo;&#xA;を実行すると良いと思う。&#xA;S30の場合RAIDドライバが無いといけないので&#xA;例) drvload C:\drivers\KR10.INF&#xA;としてドライバを読み込ませた。&#xA;2-2, ネットワークドライブのマウント&#xA;※ネットワーク越しからインストールするということでWin8のISOをマウントし、共有してあることを前提にします。&#xA;net use &amp;ldquo;任意のドライブレター&amp;rdquo; &amp;ldquo;共有先のパス&amp;rdquo; &amp;ldquo;ログインパスワード&amp;rdquo; /user:&amp;ldquo;ユーザ名&amp;rdquo;</description>
    </item>
    <item>
      <title>Python向けTumblr APIライブラリ更新</title>
      <link>https://github.pyyoshi.com/blog/2011/08/Python%E5%90%91%E3%81%91Tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Mon, 15 Aug 2011 08:25:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/08/Python%E5%90%91%E3%81%91Tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%9B%B4%E6%96%B0/</guid>
      <description>v1からv2に新しくAPIが更新されたのでライブラリもそれに従いました。&#xA;使い方はtest.py見てください。 これまでどおりv1で良い方はリポジトリ変更して持って行ってください。&#xA;PyYoshi/Pytumb&#xA;実装していく中でわけわからないものとかあったし、そのうちDocなり書くかなぁ～。&#xA;まだまだv2の修正来るだろうし、新しく追加されるであろうapiを楽しみにしますかねぇ。 like/unlikeは早く実装して欲しいところｗ</description>
    </item>
    <item>
      <title>JavaScriptでOAuth認証するときの注意点</title>
      <link>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Thu, 30 Jun 2011 19:18:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>JavaScript単体でOAuth認証する場合ConsumerKey/SecretKeyが見えてしまう。&#xA;難読化（base64など）ですぐにはバレないようにはできてもいずれ見つかってしますのだけれど、どのように他のJSなアプリは隠しているのだろうか？&#xA;単体ではなくサーバプロキシを通せばそんな意識しなくてもいいのだろうけど気になるところではある。&#xA;思いつく限りだと、JS本体には置かずバイナリをJSでパースしてキーを使うというものもある。&#xA;xhrでバイナリ取得&#xA;var xhr = new XMLHttpRequest();&#xA;xhr.open(&amp;lsquo;GET&amp;rsquo;, path, false);&#xA;xhr.overrideMimeType(&amp;rsquo;text/plain; charset=x-user-defined&amp;rsquo;);&#xA;xhr.send(null);&#xA;binary_string = xhr.responseText;&#xA;binary_stringをbinaryに変換する&#xA;bytes = []&#xA;for(var i=0, t; i &amp;lt; binary_string.length; i++){&#xA;bytes[i] = binary_string.charCodeAt(i) &amp;amp; 0xff;&#xA;}&#xA;こんなかんじでJS内でバイナリ化して、各自パース処理を書けばいいのではないでしょうか？&#xA;隠し方は人それぞれだと想いますが＾＾；&#xA;他の方法としてはyqlを使う方法もあるようですね。&#xA;How-to: Secure OAuth in JavaScript</description>
    </item>
    <item>
      <title>nginxでfastcgiを使うとき</title>
      <link>https://github.pyyoshi.com/blog/2011/06/nginx%E3%81%A7fastcgi%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D/</link>
      <pubDate>Wed, 29 Jun 2011 18:23:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/06/nginx%E3%81%A7fastcgi%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D/</guid>
      <description>Pythonでweb app作ったので動かそうとサーバ周りをいろいろやってみたのだがfastcgiでの動作方法がいまいちよくわからなかった。&#xA;apacheのようにhoge.fcgiを指定してやれば動く、というものではないらしくどうすればいいのか結構時間を費やしてしまった。&#xA;１つのやり方としてspawn-fcgiを使ってプロセスを生成してやればいいらしい。 それをnginx.confのfastcgi_passに指定してやることでいいみたいだ。&#xA;試しにspawn-fcgiを単体起動して動かしてみた。&#xA;sudo spawn-fcgi -f test.fcgi -a 127.0.0.1 -p 9001 -u www-data -P /var/run/spawn-fcgi-moin.pid&#xA;こんな感じで起動してやればいい。&#xA;指定したipとportをnginx.confのfastcgi_passに指定して動けばおｋ&#xA;そんなかんじで。&#xA;起動スクリプト書いてみたので参考としてどうぞ&#xA;自動起動する場合はUbuntuはchkconfigではなくsysv-rc-confを使うこと。&#xA;sudo sysv-rc-conf test_app on&#xA;またはupdate-rc.d</description>
    </item>
    <item>
      <title>Python向けtumblr APIライブラリ公開した。</title>
      <link>https://github.pyyoshi.com/blog/2011/06/Python%E5%90%91%E3%81%91tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 06 Jun 2011 00:38:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/06/Python%E5%90%91%E3%81%91tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F/</guid>
      <description>OAuthにしか対応してないtumblr APIライブラリ公開した。&#xA;test.pyとかapi.pyとか見ればいいと思うよ。&#xA;各API毎のパラメータは公式API DOC見てください。&#xA;まぁtumblr api叩いたことある人なら大丈夫だと思うけど。&#xA;ということでほい&#xA;PyYoshi/Pytumb at master - GitHub</description>
    </item>
    <item>
      <title>libwebpのビルド</title>
      <link>https://github.pyyoshi.com/blog/2011/06/libwebp%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89/</link>
      <pubDate>Fri, 03 Jun 2011 19:00:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/06/libwebp%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89/</guid>
      <description>Ubuntu 10.04に用意されていないようで自前で用意したときのメモ&#xA;$ cd tmp&#xA;$ wget http://webp.googlecode.com/files/libwebp-0.1.2.tar.gz&#xA;$ tar zxvf libwebp-0.1.2.tar.gz&#xA;$ cd libwebp-0.1.2&#xA;$ sudo apt-get install automake libtool&#xA;$ aclocal &amp;amp;&amp;amp; autoconf &amp;amp;&amp;amp; automake -a -c;&#xA;$ ./autogen.sh&#xA;$ ./.configure&#xA;$ make&#xA;$ sudo make install&#xA;$ ls -la /usr/local/lib/libwebp*&#xA;$ ls -la /usr/local/include/webp/*&#xA;$ ls -la /usr/local/bin/*webp&#xA;以上</description>
    </item>
    <item>
      <title>VS2010でboostを扱う準備</title>
      <link>https://github.pyyoshi.com/blog/2011/04/VS2010%E3%81%A7boost%E3%82%92%E6%89%B1%E3%81%86%E6%BA%96%E5%82%99/</link>
      <pubDate>Mon, 18 Apr 2011 18:12:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/04/VS2010%E3%81%A7boost%E3%82%92%E6%89%B1%E3%81%86%E6%BA%96%E5%82%99/</guid>
      <description>研究室配属されて、スクリプト言語ばかり使っていた生活も変わるだろうとDreamSparkからVS2010を拝借した。&#xA;で、巷で話題のboostをVS2010で使えるようにした。（boostすげぇーってしか分かってないｗ&#xA;それとVSがうまくインスコされていないのか各PATHを手動で通している。&#xA;準備:&#xA;C:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.batの修正&#xA;最初の行に&#xA;@SET VSINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0&#xA;@SET VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0\VC&#xA;@SET FrameworkDir32=C:\Windows\Microsoft.NET\Framework&#xA;@SET FrameworkVersion32=v4.0.30319&#xA;@SET Framework35Version=v3.5&#xA;を追加&#xA;:: @call :GetVSCommonToolsDir&#xA;:: @if &amp;ldquo;%VS100COMNTOOLS%&amp;quot;==&amp;rdquo;&amp;quot; goto error_no_VS100COMNTOOLSDIR&#xA;:: @call &amp;ldquo;%VS100COMNTOOLS%VCVarsQueryRegistry.bat&amp;rdquo; 32bit No64bit&#xA;該当部分をコメントにする。&#xA;※当環境ではこのようになったが各自インスコ場所とVer.は確認しておくこと。&#xA;PATHに&#xA;C:\Program Files\Microsoft Visual Studio 10.0\VC\bin&#xA;C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE&#xA;C:\Program Files\Microsoft Visual Studio 10.0\VC\include&#xA;を追加&#xA;INCLUDEに&#xA;C:\Program Files\Microsoft SDKs\Windows\v7.0A\Include&#xA;C:\Program Files\Microsoft Visual Studio 10.0\VC\include</description>
    </item>
    <item>
      <title>PythonモジュールをSL4A向けにビルドしてみた</title>
      <link>https://github.pyyoshi.com/blog/2011/04/Python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92SL4A%E5%90%91%E3%81%91%E3%81%AB%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Wed, 06 Apr 2011 22:49:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/04/Python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92SL4A%E5%90%91%E3%81%91%E3%81%AB%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>SL4AのVer.が上がってAPIも結構数サポートされて驚いていたのだが、それよりうれしいとおもったのがPythonのCモジュールのビルド方法が確立されたこと。&#xA;以前まではソースにそのようなツールは用意されていなくクロスコンパイラでとりあえずビルドって感じだった。&#xA;ということでPythonモジュールのビルド方法を。&#xA;ツールのソースコード追ってないので正しいかどうか分からないけどAndroidソースが必要みたい。&#xA;Androidのソースは各自準備してください。&#xA;/home/hoge/android/mydroid ← Androidのソース置き場&#xA;/home/hoge/android/sl4a ← SL4Aのソース置き場&#xA;とします。&#xA;今回はPyLZMAをビルドする例を紹介します。&#xA;SL4Aのソースをとってくる。&#xA;$pwd&#xA;/home/hoge/android/&#xA;$cd sl4a&#xA;$hg clone https://android-scripting.googlecode.com/hg/ android-scripting&#xA;ビルドツールの一部を修正する。&#xA;$cd android-scripting/tools/agcc&#xA;$vim agcc&#xA;126行目以降のものを以下のように1行追加&#xA;# Also need: -Wl,-soname,libXXXX.so&#xA;my @shared_args = (&#xA;&amp;ldquo;-nostdlib&amp;rdquo;,&#xA;&amp;ldquo;-Wl,-T,$DROID/build/core/armelf.xsc&amp;rdquo;,&#xA;&amp;ldquo;-Wl,&amp;ndash;gc-sections&amp;rdquo;,&#xA;&amp;ldquo;-Wl,-shared,-Bsymbolic&amp;rdquo;,&#xA;&amp;ldquo;-L$ALIB&amp;rdquo;,&#xA;&amp;ldquo;-Wl,&amp;ndash;no-whole-archive&amp;rdquo;,&#xA;** &amp;ldquo;-L/home/hoge/android/mydroid/prebuilt/ndk/android-ndk-r4/platforms/android-3/arch-arm/usr/lib &amp;ldquo;,**&#xA;&amp;ldquo;-lc&amp;rdquo;,&#xA;&amp;ldquo;-lm&amp;rdquo;,&#xA;&amp;ldquo;-ldl&amp;rdquo;,&#xA;#&amp;quot;-Wl,&amp;ndash;no-undefined&amp;rdquo;,&#xA;&amp;ldquo;$TOOLCHAIN/lib/gcc/arm-eabi/4.4.0/interwork/libgcc.a&amp;rdquo;,&#xA;&amp;ldquo;-Wl,&amp;ndash;whole-archive&amp;rdquo;); # .a, .o input files go *after* here&#xA;PyLZMAをとってくる。&#xA;$pwd&#xA;/home/hoge/android/sl4a&#xA;$mkdir Modules&#xA;$cd Modules&#xA;$wget http://pypi.python.org/packages/source/p/pylzma/pylzma-0.4.4.tar.gz&#xA;$tar zxvf pylzma-0.</description>
    </item>
    <item>
      <title>x11vncをUbuntu10.04にインストールする</title>
      <link>https://github.pyyoshi.com/blog/2011/03/x11vnc%E3%82%92Ubuntu10.04%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/</link>
      <pubDate>Mon, 21 Mar 2011 19:57:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/03/x11vnc%E3%82%92Ubuntu10.04%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/</guid>
      <description>以前はVNCクライアント上でD&amp;amp;D出来た記憶があったけど10.04ではなんかうまくいかなかった。&#xA;仕様なのかなと思ったけど違うみたい。 いろいろなサイト（海外のフォーラム）でvnc4server以外でもどうやら起きている見たいで、x11vncだけはそうでもないってことでそれを入れた。&#xA;いろいろなサイトを参考にx11vncをxinetdで動かそうとしたんだけどうまくいかねぇ…&#xA;自ビルドしたり、gdmに登録してみたり、半日くらい潰した。無能すぎる&#xA;ってなわけで&#xA;$sudo apt-get install x11vnc&#xA;$sudo mkdir /etc/x11vnc&#xA;$sudo x11vnc -storepasswd /etc/x11vnc/passwd&#xA;$sudo chmod 644 /etc/x11vnc/passwd&#xA;$sudo vim /etc/xinetd.d/x11vnc&#xA;service x11vnc&#xA;{&#xA;type = UNLISTED&#xA;protocol = tcp&#xA;disable = 0&#xA;user = root&#xA;server = /usr/bin/x11vnc&#xA;server_args = -inetd -o /var/log/x11vnc.log -forever -auth /var/lib/gdm/:0.Xauth　-display :0 -xkb -rfbauth /etc/x11vnc/passwd&#xA;port = ポート適宜&#xA;}&#xA;$sudo vim /etc/services&#xA;x11vnc ポート番号適宜/tcp #X11VNC Server&#xA;これでいちよ動くようになった。&#xA;-xkbオプション追加でshiftキーが使えるようになる。&#xA;てかx11vncなんかきびきび動いてくれませんね(Color depthが指定できないからかな？) vnc4serverの方が個人的には好きかもｗ</description>
    </item>
    <item>
      <title>Win7でScalaとScalaAndroid環境構築とか</title>
      <link>https://github.pyyoshi.com/blog/2011/03/Win7%E3%81%A7Scala%E3%81%A8ScalaAndroid%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%A8%E3%81%8B/</link>
      <pubDate>Fri, 18 Mar 2011 02:31:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/03/Win7%E3%81%A7Scala%E3%81%A8ScalaAndroid%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%A8%E3%81%8B/</guid>
      <description>ただの備忘ログ&#xA;構築とかわかりにくかったのでまとめただけ。転んだら泣いてください。&#xA;サイト&#xA;Scala&#xA;Index of /gnu/windows/emacs か NTemacs&#xA;Apache Ant&#xA;ProGuard&#xA;simple-build-tool&#xA;object版create_project&#xA;準備&#xA;1:&#xA;ScalaのサイトからIzPack Installerをダウンロードして指示通りインスコ。インストーラ版だとPATHも勝手に追加してくれるので楽。&#xA;2:&#xA;最新のemacsを持ってくる。&#xA;「scala/misc/scala-tool-support/emacs」のファイルを「.emacs.d/scala-mode」に置く&#xA;C:\Users\***\AppData\Roaming\.emacs.dにinit.elを作成&#xA;以下内容&#xA;;; Set default fonts and fonts for Japaense (cond (window-system (set-default-font &amp;quot;Courier New-10&amp;quot;) ;; Japanese(japanese-jisx0208)font (set-fontset-font (frame-parameter nil &#39;font) &#39;japanese-jisx0208 (font-spec :family &amp;quot;Meiryo&amp;quot; :size 12) ;;&#39;(&amp;quot;Meiryo&amp;quot; . &amp;quot;unicode-bmp&amp;quot;) ) ) ) ;; Set scala-mode (add-to-list &#39;load-path &amp;quot;~/.emacs.d/scala-mode&amp;quot;) (require &#39;scala-mode-auto) 起動はbin以下の「runemacs.exe」でおｋみたい。&#xA;cuiでは「emacs -nw」みたい。&#xA;使い方とかよく分からないので追々。&#xA;3:&#xA;Apache AntからWindowsバイナリをダウンロード解凍後、適宜場所へ。 そのあと環境変数のPATHに「apache-ant/bin」がある場所を追加。</description>
    </item>
    <item>
      <title>Androidのライブラリの依存関係を調べる。</title>
      <link>https://github.pyyoshi.com/blog/2011/03/Android%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</link>
      <pubDate>Tue, 08 Mar 2011 16:47:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/03/Android%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</guid>
      <description>バイナリ開けるのめんどくさかったので書いた。&#xA;やってることが分かる人のみで。&#xA;スクリプトと同じフォルダにbin, lib作って適宜ファイル入れること。&#xA;また、arm-eabi-objdumpも入れておくこと。&#xA;# -*- coding: utf-8 -*- #!/usr/bin/env python from os import getcwd, listdir from popen2 import popen3 cdir = getcwd() lib_flist = listdir(cdir+&#39;/lib/&#39;) bin_flist = listdir(cdir+&#39;/bin/&#39;) for file in lib_flist: cmd = &#39;./arm-eabi-objdump -x ./lib/&#39;+ file + &#39; |grep -e NEEDED&#39; stdout, stdin, stderr = popen3(cmd) print file print stdout.read() print stderr.read() for file in bin_flist: cmd = &#39;./arm-eabi-objdump -x ./bin/&#39;+ file + &#39; |grep -e NEEDED&#39; stdout, stdin, stderr = popen3(cmd) print file print stdout.</description>
    </item>
    <item>
      <title>cd hoge; ls-aと打つのがめんどくさくて、、</title>
      <link>https://github.pyyoshi.com/blog/2011/02/cd-hoge-ls-a%E3%81%A8%E6%89%93%E3%81%A4%E3%81%AE%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%8F%E3%81%A6/</link>
      <pubDate>Wed, 09 Feb 2011 17:00:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/02/cd-hoge-ls-a%E3%81%A8%E6%89%93%E3%81%A4%E3%81%AE%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%8F%E3%81%A6/</guid>
      <description>最近リナックスを使う機会が多くなってきて、どうもcd コマンドの後にls -aと打つのが面倒になってきた。&#xA;最初はまぁそーいうものだろうと思ってたんだけど我慢の限界だったので、bashrcにcd hoge; ls -aをcdコマンドだけで出来るようにした。&#xA;$vim .bashrc&#xA;function cd() {&#xA;builtin cd $@&#xA;ls -a&#xA;}&#xA;$source .bashrc&#xA;を追加して終了。&#xA;動くか心配だったけど無事動きましたｗ</description>
    </item>
    <item>
      <title>暗号化したHomeで注意すること SSH編</title>
      <link>https://github.pyyoshi.com/blog/2011/01/%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%97%E3%81%9FHome%E3%81%A7%E6%B3%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8-SSH%E7%B7%A8/</link>
      <pubDate>Sat, 15 Jan 2011 19:20:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/01/%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%97%E3%81%9FHome%E3%81%A7%E6%B3%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8-SSH%E7%B7%A8/</guid>
      <description>普段はHomeなんて暗号化しない設定でOSを構築するのでが、正月中に作ったとある鯖では暗号化したHomeを採用していた。&#xA;そのときは、まぁ何も影響ないだろうと思っていたのだが、SSHなどの公開鍵認証でそれにぶち当たった。&#xA;基本的に公開鍵はHome以下の&amp;quot;.ssh&amp;quot;に置くのだが、暗号化Homeの場合はそのデフォルトの状態だと公開鍵を読みに行くことが出来ないのだ。&#xA;/home以下がマウントされることはないので。&#xA;なので、公開鍵は/home以外の場所に置く必要が出てくる。&#xA;で、実際やることは&#xA;/homeが見える環境で公開鍵を別の場所にコピーすればおｋってことで作業開始。&#xA;$sudo mkdir /etc/&#xA;$sudo cp $HOME/.ssh/authorized_keys /etc//authorized_keys&#xA;$sudo chmod 700 /etc/&#xA;$sudo chown /etc/&#xA;$sudo chmod 600 /etc//authorized_keys&#xA;$sudo chown /etc//authorized_keys&#xA;$sudo vim /etc/ssh/sshd_config&#xA;「AuthorizedKeysFile /etc//authorized_keys」部分を編集&#xA;$sudo /etc/init.d/ssh restart&#xA;問題は$HOME以下にこのままではアクセス出来ないこと。&#xA;どうすればいいんだろうか？&#xA;参考: Encrypted Home Directory</description>
    </item>
    <item>
      <title>githubにプッシュ</title>
      <link>https://github.pyyoshi.com/blog/2010/12/github%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5/</link>
      <pubDate>Fri, 24 Dec 2010 00:46:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/12/github%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5/</guid>
      <description>git init&#xA;git add .&#xA;git commit -m &amp;lsquo;first commit&amp;rsquo;&#xA;git remote add origin git@github.com:hoge/fuga.git&#xA;git push origin master</description>
    </item>
    <item>
      <title>IS01 rooterでうまーくモジュールが呼び出せないとおもったらの巻き</title>
      <link>https://github.pyyoshi.com/blog/2010/12/IS01-rooter%E3%81%A7%E3%81%86%E3%81%BE%E3%83%BC%E3%81%8F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%9B%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8A%E3%82%82%E3%81%A3%E3%81%9F%E3%82%89%E3%81%AE%E5%B7%BB%E3%81%8D/</link>
      <pubDate>Sun, 12 Dec 2010 14:00:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/12/IS01-rooter%E3%81%A7%E3%81%86%E3%81%BE%E3%83%BC%E3%81%8F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%9B%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8A%E3%82%82%E3%81%A3%E3%81%9F%E3%82%89%E3%81%AE%E5%B7%BB%E3%81%8D/</guid>
      <description>※文鎮化する可能性が高い操作を行っていますので注意してください。&#xA;いやはや便利な者が出来てしまうとそれに頼ってしまうのですが、それが盲点となってしまった。&#xA;たぶん僕だけの環境で起こったことだと思うので気にせずに＾＾；&#xA;MIRO氏作成のIS01 rooter_002ですが、こちらを使用した際にmsm_nand_exをinsmodすることが出来なかった。&#xA;なぜ出来なかったのか？&#xA;まずは、/sqlite_journals/is01root/以下にあるautoexecに実行権限が付与されていなかった。&#xA;#chmod 755 /sqlite_journals/is01root/autoexec.sh&#xA;それと。autoexec.shに書かれている２行に「/sqlite_journals/is01root/_su &amp;hellip;」とあるが、is01root以下に「_su」が入っていない。&#xA;ファイルをDL解凍したら&#xA;adb push _su /sqlite_journals/is01root/&#xA;#chown root.root _su&#xA;#chmod 6755 _su&#xA;で再起動を行う。&#xA;これでlsmodしてモジュールがロードされていればおｋです。&#xA;あと*.koは基本的に644で。&#xA;で、ここまで書いたが。&#xA;MIRO氏はたぶんsystemを書き込めないように上記手順を行わなかったのかなと思います。</description>
    </item>
    <item>
      <title>IS01のkernelをビルドしちゃおう！ ※修正: 20101213</title>
      <link>https://github.pyyoshi.com/blog/2010/12/IS01%E3%81%AEkernel%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86-%E4%BF%AE%E6%AD%A3-20101213/</link>
      <pubDate>Sat, 04 Dec 2010 20:08:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/12/IS01%E3%81%AEkernel%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86-%E4%BF%AE%E6%AD%A3-20101213/</guid>
      <description>※このビルドはNANDロック解除などのセキュリティ部分の解除はしていません。&#xA;nandロックが解除出きるようになって、recovery等の書き変えも可能になりいろいろと旬になってきたIS01ですが、まだまだスタートしたばかりです。&#xA;で、まぁカスタムロム作りたくてandroidのソースをぼちぼち読んでいるのですが云々。&#xA;さてさて、今回はSH Developers Squareに公開されているIS01のkernelソースをビルドしていきます。&#xA;ソースは前記事のスクリプトから取得しておきましょう。&#xA;STEP1: android.git.kernel.orgからコンパイル用ソースをとってきましょう。(既にやっている人はSTEP2へ)&#xA;#mkdir mydroid&#xA;#wget http://android.git.kernel.org/repo&#xA;#chmod 755 repo&#xA;#./repo init -u git://android.git.kernel.org/platform/manifest.git -b froyo&#xA;#./repo sync&#xA;ここのSTEPは取得に時間がかかりますので気長に待ちましょう。&#xA;STEP2: IS01のソースをビルドするための準備1&#xA;IS01のkernelソースに移動&#xA;#vim ./arch/arm/mach-msm/sh_sleepcheck.c&#xA;最初の行にある#include &amp;lt;smd_private.h&amp;gt;を#include &amp;ldquo;smd_private.h&amp;rdquo;&#xA;に書き換える。diffはよーわからないのでそのうち勉強する。&#xA;STEP3: IS01のソースをビルドするための準備2&#xA;IS01での操作です。&#xA;rootとった状態でTerminal Emulatorから&#xA;#busybox cp /proc/config.gz /sdcard/config.gz ←この操作はbusyboxとそのpathが必要です。&#xA;config.gzをPCに持ってきて展開する。&#xA;それをIS01のkernelフォルダに「.config」という名前で保存してください。&#xA;「.config」はmakeするときに使用します。&#xA;STEP4: kernelのビルド&#xA;#make ARCH=arm CROSS_COMPILE=../../mydroid/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin/arm-eabi-&#xA;を実行すると、&#xA;arch/arm/boot/にImageというファイルが出来上がります。これがkernelです。&#xA;お疲れ様でした。&#xA;と記事書いてたら仙石さんが仕事早いｗ&#xA;「Android 端末 IS01 のカーネルを入れ替えてみた ? さよならデッカード LSM」&#xA;とりあえず僕はnandプロテクト外したものを作っています。&#xA;froyoベースになるにはもうちょいお勉強。。&#xA;STEP 番外編1: android.kernel.orgとcode auroraからのkernelソース取得&#xA;・純粋なandroid向けkernelの取得</description>
    </item>
    <item>
      <title>SH DevelopersSquareからIS01等のAndroid向けソースをDLするスクリプト作ったよ！</title>
      <link>https://github.pyyoshi.com/blog/2010/12/SH-DevelopersSquare%E3%81%8B%E3%82%89IS01%E7%AD%89%E3%81%AEAndroid%E5%90%91%E3%81%91%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92DL%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/</link>
      <pubDate>Fri, 03 Dec 2010 16:43:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/12/SH-DevelopersSquare%E3%81%8B%E3%82%89IS01%E7%AD%89%E3%81%AEAndroid%E5%90%91%E3%81%91%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92DL%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/</guid>
      <description>SH DevelopersSquareがgitとかsvnとか用意してくれていないのでソースのDLがまんどくさいことこの上ないのでPythonでスクリプトを作成しました。&#xA;このスクリプトを利用することにより、is01, sh-10b, jn-dk01のソースを取得・展開してくれます。&#xA;使い方（Ubuntu環境）は以下の通りです。&#xA;まず、easy_install等で必要なモジュールをインストールします。&#xA;#sudo apt-get install setup_tools ←インストールしていない場合&#xA;#sudo easy_install -U MultipartPostHandler&#xA;#sudo easy_install -U BeautifulSoup&#xA;スクリプトの実行例は以下の通りです。&#xA;#python ./sdasg.py is01 ←is01のソースを取得・展開したい場合&#xA;#python ./sdasg.py sh-10b ←sh-10bのソースを取得・展開したい場合&#xA;#python ./sdasg.py jn-dk01 ←jn-dk01のソースを取得・展開したい場合&#xA;以下がスクリプトです。&#xA;# -*- coding: utf-8 -*- #------------------------------------------------------------------------------- # Name: SH Dev Android Source Getter(特に名前決めてない) # Purpose: (https://sh-dev.sharp.co.jp/android/modules/oss/)がsvnやgitでの # ソース公開してなかったので自動でダウンロードしてきて展開するスク # リプト作った。 # 使用する際は、GPL(http://www.gnu.org/licenses/)と各々のソフトウェ # ア使用許諾契約書に同意すること。 # # Usage: 引数にis01, sh-10b, jn-dk01のどれかを与えてください。 # スクリプト直下にディレクトリを作られ保存されます。 # 例)is01のソースを取得・展開します。 # #python .</description>
    </item>
    <item>
      <title>beautifulsoupが3.0.1から3.2.0に変わったらHTMLParseErrorなくなってた！</title>
      <link>https://github.pyyoshi.com/blog/2010/12/beautifulsoup%E3%81%8C3.0.1%E3%81%8B%E3%82%893.2.0%E3%81%AB%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89HTMLParseError%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F/</link>
      <pubDate>Fri, 03 Dec 2010 01:13:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/12/beautifulsoup%E3%81%8C3.0.1%E3%81%8B%E3%82%893.2.0%E3%81%AB%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89HTMLParseError%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F/</guid>
      <description>beautifulsoupが3.0.1から3.2.0に変わったらHTMLParseErrorなくなっていました。&#xA;そういえばアップデートしてないなーとか思いながらeasy_installから実行したら、そうなっちまった。&#xA;良いことなのか悪いのか、&#xA;間違いなく例外とかfrom importとか書き換えないと行けない場所が出てしまった。&#xA;しかし、パースエラーあった部分が問題なくパースされるようになったりどっこいどっこいなのかな。&#xA;で、まぁアップデートによって&#xA;from html5lib import HTMLParser from html5lib import treebuilders from BeautifulSoup import HTMLParseError try: soup = BeautifulSoup(html) except HTMLParseError, e: parser = HTMLParser(tree=treebuilders.getTreeBuilder(&amp;quot;beautifulsoup&amp;quot;)) soup = parser.parse(html) とかやって別なパーサーでエラー部分を除去って貰う形をとっていたことが必要なくなったのかな？&#xA;ということで前回書いた記事「BeautifulSoupでHTMLParseErrorが起きた時の対処」もこんなことやれば良かったのかな？&#xA;まぁまとめるとアップデートしとけ(ﾟДﾟ)ｺﾞﾙｧ!! ですね・・・ｗ</description>
    </item>
    <item>
      <title>UnicodeEncodeError: &#39;ascii&#39; codec...が出てしまった。</title>
      <link>https://github.pyyoshi.com/blog/2010/11/UnicodeEncodeError-ascii-codec...%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</link>
      <pubDate>Fri, 05 Nov 2010 22:29:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/11/UnicodeEncodeError-ascii-codec...%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</guid>
      <description>UnicodeEncodeError: &amp;lsquo;ascii&amp;rsquo; codec can&amp;rsquo;t encode characters in position 3-4: ordinal not in range(128)&#xA;Pyscripterの環境で弄くり回していたのだが、↑のようなエラーが吐かれました。&#xA;よく分からないことにPythonインタプリタに直接投げた場合はそのようなエラーは吐かれないんですよね。&#xA;で、&#xA;問題解決しました。&#xA;凡ミスというか、恥ずかしいミス。&#xA;Pathにマルチバイトコードが入っていたんですね。&#xA;ディレクトリ名やファイル名に日本語等の名前をつけちゃうと起こるみたいです。&#xA;で、&#xA;なんでなったのかというと。&#xA;普段からファイル名やディレクトリ名にはマルチバイト使わないようにしてるのですが、&#xA;ちょっとしたことからいつも保存している場所から別の場所に保存していて、それに気づかなかったという落ちでした。&#xA;気づくまでに時間掛かりましたよ。&#xA;ええ。&#xA;うん、こーいう問題は俺だけじゃなくて他の人もやってしまってる見たいですよ。&#xA;こちらにその指摘があります。(ソース)&#xA;でもさ、Pyscripterさんもそのへん放置しないでさ。何とかしてくださいよ…</description>
    </item>
    <item>
      <title>BeautifulSoupでHTMLParseErrorが起きた時の対処</title>
      <link>https://github.pyyoshi.com/blog/2010/11/BeautifulSoup%E3%81%A7HTMLParseError%E3%81%8C%E8%B5%B7%E3%81%8D%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
      <pubDate>Thu, 04 Nov 2010 21:16:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/11/BeautifulSoup%E3%81%A7HTMLParseError%E3%81%8C%E8%B5%B7%E3%81%8D%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
      <description>BeautifulSoupでスクレイピングしていたとき、「bad end tag: u&amp;quot;&amp;quot;」というHTMLParseErrorが起きてしまった。&#xA;これから研究でぶち当たっていきそうなのでとりあえずメモ。&#xA;結果から言うと単純に例外処理で該当部分を書き換えてしまえばいいのだ。&#xA;#!/usr/bin/env python # -*- coding: utf-8 -*- import urllib2 from BeautifulSoup import BeautifulSoup from HTMLParser import HTMLParseError def fix_html(html): #UTF8に強制変換 html = html.encode(&amp;quot;utf-8&amp;quot;) try: soup = BeautifulSoup(html) return soup except HTMLParseError,e: emsg = e.msg #無理矢理、問題の該当箇所を抽出し空文字列に置換 emsg_start = emsg.find(&#39;u&amp;quot;&#39;) rpl_str = eval(emsg[emsg_start:]).encode(&amp;quot;utf-8&amp;quot;) html = html.replace(rpl_str,u&amp;quot;&amp;quot;) #再帰的処理 return fix_html(html) except e: raise e def main(): try: set_url = &amp;quot;#適宜URLを&amp;quot; html = urllib2.urlopen(set_url).read() print fix_html(html) except urllib2.HTTPError, e: e.</description>
    </item>
    <item>
      <title>arm-Ubuntuのビルド（qemu用</title>
      <link>https://github.pyyoshi.com/blog/2010/10/arm-Ubuntu%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89qemu%E7%94%A8/</link>
      <pubDate>Wed, 27 Oct 2010 21:18:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/arm-Ubuntu%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89qemu%E7%94%A8/</guid>
      <description>ちょっとarm触る必要あったのでUbuntuでいくかと。&#xA;ビルドはいつも通りUbuntuで行います。はい。&#xA;ちなみに10.10です。もしかしたら、それ以前ではうまくいかないかもしれません。&#xA;んでは。&#xA;あ、今回QEMU上で動かすVer.は9.04です＾＾；&#xA;QEMU用のimg作成&#xA;#sudo mkdir arm-ubuntu&#xA;#cd arm-ubuntu&#xA;#sudo wget http://people.ubuntu.com/~ogra/arm/build-arm-rootfs&#xA;#sudo wget http://ports.ubuntu.com/ubuntu-ports/dists/lucid/main/installer-armel/current/images/versatile/netboot/vmlinuz&#xA;#sudo chmod 744 build-arm-rootfs&#xA;#sudo ./build-arm-rootfs &amp;ndash;fqdn ubuntu &amp;ndash;login ubuntuuser &amp;ndash;password hogefuga &amp;ndash;notarball &amp;ndash;imagesize 1G&#xA;※fdqn、login、passwordは任意のものに変えること。imagesizeも任意に変えるといいと思います。&#xA;QEMU上でUbuntuを起動&#xA;#cp qemu-armel-&amp;lt;タイムスタンプ&amp;gt;.img qemu-armel.img&#xA;※cpで元残すのも良いし、mvで名前変えるのもよし。&#xA;#sudo qemu-system-arm -M versatilepb -cpu cortex-a8 -kernel vmlinuz -hda qemu-armel.img -m 256 -append &amp;ldquo;root=/dev/sda rootwait&amp;rdquo;&#xA;起動後にやること&#xA;#LANG=C&#xA;#sudo vi /etc/network/interfaces&#xA;auto eth0&#xA;iface eth0 inet dhcp&#xA;#sudo ifconfig eth0 up&#xA;#sudo dhclient eth0</description>
    </item>
    <item>
      <title>document.getElementsByClassNameがChromeで実装されていた。</title>
      <link>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</link>
      <pubDate>Sun, 24 Oct 2010 11:29:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</guid>
      <description>いつに実装されたかは知らないがなんか使えた。(ソース)</description>
    </item>
    <item>
      <title>AndroidでSkypeAppが復活したのでさっそく</title>
      <link>https://github.pyyoshi.com/blog/2010/10/Android%E3%81%A7SkypeApp%E3%81%8C%E5%BE%A9%E6%B4%BB%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F/</link>
      <pubDate>Tue, 05 Oct 2010 19:33:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/Android%E3%81%A7SkypeApp%E3%81%8C%E5%BE%A9%E6%B4%BB%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F/</guid>
      <description>やっと来ました！！&#xA;今年初めに一部のキャリアでしかSkypeを使用することが出来ないようになってしまいましたが、いよいよ復活です！&#xA;ただし、日本のプロバイダー(ストア固有ID)情報だとマーケットで表示することが出来ませんのでちょっとしたてこ入れをしてあげないといけません。&#xA;ということで、手順です。（root権限が必要です。）&#xA;用意するものはMarketEnablerです。こちらからDLしてインスコしてしまいましょう。&#xA;あとは、MarketEnablerを起動して「Setting List -&amp;gt; T-Mobile」のところで長押しすればプロバイダー情報を偽装することが出来ます。（プロバイダー情報のバックアップは行っておいてください。）&#xA;そしたら、こちらのQRコードからアクセスを行いSkypeのインストールを行っちゃいましょう！！&#xA;以上で終了です！お疲れ様でした！！&#xA;あ、DoCoMo回線だと使えないからね。</description>
    </item>
    <item>
      <title>Acer Liquid EにLeaked Froyoを入れてみたよ</title>
      <link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%ABLeaked-Froyo%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</link>
      <pubDate>Sat, 02 Oct 2010 19:08:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%ABLeaked-Froyo%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</guid>
      <description>用意するもの：&#xA;Leaked Froyo&#xA;Acer Download Tool for A1&#xA;installMalezRecovery_0.6_FULL&#xA;Part1:&#xA;Acer Download Tool for A1はWin7では正常動作しないので互換モードで行ってください。&#xA;まずAcer Download Tool for A1を起動し、先ほどDLしてきたROMをBrowseから選択してください。&#xA;次にStartを押してROM焼きを行います。&#xA;ここで注意ですがAppにも書いてあるとおり抜いて良いよと言われるまでは絶対に抜かないでください。&#xA;ここで抜いてしまうと文鎮化してしまい使い物にならない端末に変貌するかもしれません。&#xA;以上でROM焼きは終了です。&#xA;Part2:&#xA;カスタムリカバリーの導入です。&#xA;こちらのやり方自体は、以前の記事で解説済みですので割愛させていただきまする。&#xA;Acer Liquid Eにカスタムリカバリーを入れてみたよ&#xA;Part3:&#xA;リカバリーモードに入ってFull Wipe, System Root Menuからrooted化する&#xA;以上で終了です。&#xA;Liquidを購入し、rooted, ROM焼きを通して思ったことは、とても簡単に導入できてしまい楽ちんになったなぁということです。&#xA;いや、HT-03Aも楽だったけど。&#xA;たぶんですが、Liquidの情報は日本にあまりなく覚悟して望んだのに拍子抜けしてしまったんでしょう＾＾；</description>
    </item>
    <item>
      <title>Acer Liquid Eをrooted化しちゃおう！</title>
      <link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92rooted%E5%8C%96%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86/</link>
      <pubDate>Sat, 02 Oct 2010 09:58:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92rooted%E5%8C%96%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86/</guid>
      <description>リカバリーモードに入り（Vol- カメラキー　電源 で三回振動するのを待つ）&#xA;System Root menuから好きなモードを選んでrooted化終了です。&#xA;とても簡単にできますね。&#xA;出来ないって言うかたは、こちらのapkをインスコしてrooted化しちゃってください。（@Syu_uさん情報ありがとうございます。）&#xA;※責任は負えませんのでROMのバックアップは忘れずに&#xA;これでHT-03AでバックアップしたAppsをリストアすることが出来る。&#xA;バックアップ＆リストアに便利な『Titanium Backup』というものがあります。&#xA;ぜひ使ってみましょう。&#xA;使い方はとてもわかりやすく解説しているコムギさんのページをリンクしておきますね。&#xA;追記:&#xA;どうやらTitanium Backupではうまく復元することは出来ないみたい。&#xA;追記2:&#xA;apk版rootedのリンク張り忘れていたので修正。</description>
    </item>
    <item>
      <title>Acer Liquid Eにカスタムリカバリーを入れてみたよ</title>
      <link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</link>
      <pubDate>Fri, 01 Oct 2010 19:41:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</guid>
      <description>すっごく簡単にカスタムリカバリーが導入できました。&#xA;こちらからファイルをDLして解凍しましょう。&#xA;解凍先を開き、install_malez_recovery.cmdを開きいくつかスペース叩けば終了します。（英語だけど説明はちゃんと読んでね）&#xA;これで、カスタムリカバリーの導入は終了です。導入終了と同時に再起動されると思うので、その後すぐにUSBを抜いちゃいましょう。（当方、USBつないだままだと起動しなかったので。）&#xA;カスタムリカバリへの入り方は、&amp;ldquo;adb reboot recovery&amp;quot;です。&#xA;なにやらこのカスタムリカバリーにはrooted化する機能がある（見えるｗ）のですが、ちょっと不安なのでまだ触ってません。&#xA;異常で終了です。&#xA;次回投稿あたりでLiquid Eのrootedでも。</description>
    </item>
    <item>
      <title>Acer Liquid Eを購入したよ！</title>
      <link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%88/</link>
      <pubDate>Fri, 01 Oct 2010 19:17:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%88/</guid>
      <description>GDD2010であまりにも刺激されてしまい、Acer Liquid EをIYH!してしまいました。&#xA;HT-03A持っているのですが、なにぶんこれからのAndroid開発はARMv7以降じゃないときついのかな？&#xA;って感じですね。ジンジャーブレッド（噂されてるやつ）や、AdobeさんがつくってるAppの仕様要件を見ていると。&#xA;それと、AcerLiquidは発表当初からとても気になっていた端末で念願？の入手というわけです。&#xA;これからLiquidたんをｐｒｐｒしてきまふ(;ﾟ∀ﾟ)=3ﾊｧﾊｧ</description>
    </item>
    <item>
      <title>本日、GDD2010に参加してきます！！</title>
      <link>https://github.pyyoshi.com/blog/2010/09/%E6%9C%AC%E6%97%A5GDD2010%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%99/</link>
      <pubDate>Tue, 28 Sep 2010 05:38:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/09/%E6%9C%AC%E6%97%A5GDD2010%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%99/</guid>
      <description>去年からずっと楽しみにしていたイベントの一つGDDに参加できる資格を貰えたので参加してきます！&#xA;HTML5やChromeエクステンション、Androidなどのたくさんのディベロッパさんのセッション聞いて刺激をいっぱい貰って&#xA;次に活かせるように楽しんできたいと思います！！！！！&#xA;GDDが終わったあとなにやらスーパーハッカー枠で参加資格を貰った方々だけによる交友会なるものがあるみたいです。&#xA;それにも参加する予定ですが、正直怖いです。&#xA;怖い…&#xA;GDD2010:&#xA;http://www.google.co.jp/events/developerday/2010/tokyo/&#xA;DevLink:&#xA;http://gddjp-devlink.appspot.com/v.html?action=view&amp;amp;edit=true&amp;amp;id=RenaX</description>
    </item>
    <item>
      <title>9月は1日1Appをやってみようかと思う。</title>
      <link>https://github.pyyoshi.com/blog/2010/09/9%E6%9C%88%E3%81%AF1%E6%97%A51App%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%86/</link>
      <pubDate>Wed, 01 Sep 2010 00:32:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/09/9%E6%9C%88%E3%81%AF1%E6%97%A51App%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%86/</guid>
      <description>タイトル通り頑張る。&#xA;頑張るって言うと途中であきらめちゃうん？って感じだけど&#xA;やれるだけやってみる。糞みたいなAppが30個生成されると思うけど。&#xA;プラットフォームはまだ決めてないけど、たぶんWebAppとAndroidAppその辺だろうね。あとはChromeExtension。&#xA;やれるだけやってみよう</description>
    </item>
    <item>
      <title>Chromeのバージョンを戻す方法</title>
      <link>https://github.pyyoshi.com/blog/2010/07/Chrome%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%88%BB%E3%81%99%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 17 Jul 2010 11:41:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/07/Chrome%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%88%BB%E3%81%99%E6%96%B9%E6%B3%95/</guid>
      <description>※元々Chromeがインストールされたディレクトリに以前のバージョンが残っていることが原則&#xA;regeditでHKEY_CURRENT_USER\Software\Google\Updateを開き、現在のバージョン値で検索。&#xA;「pv」がヒットすると思うので、その値を戻したいバージョン値で書き換える。バージョン値はディレクトリ名をコピって良いと思う。&#xA;dev使ってる時点でアレですから、regeditの使い方はしらね。&#xA;自己責任でよろしく。</description>
    </item>
    <item>
      <title>PortablePython2.6.xにeasy_installを入れる。</title>
      <link>https://github.pyyoshi.com/blog/2010/06/PortablePython2.6.x%E3%81%ABeasy_install%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</link>
      <pubDate>Mon, 21 Jun 2010 11:06:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/06/PortablePython2.6.x%E3%81%ABeasy_install%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</guid>
      <description>PortablePythonで、easy_installを使おうと思ったんだが、そもそもそのような実行ファイルが見つからなかったので調べてみた。&#xA;やり方:&#xA;PortablePythonフォルダのAppにある、setuptools, easy_install.py, pkg_resources.py, site.pyを削除 ez_setup.pyをDLし、Appフォルダに投下する。 コンソールより、python ez_setup.pyを実行する。 あとは、&#xA;Scripts/easy_installがあるのでそいつを使えばおｋ ※PortablePythonはUSBフラッシュ環境など、インストールできない環境でもPythonを使うことができる魔法のソフト(←　ここでDLできます。&#xA;参照:&#xA;http://groups.google.com/group/portablepython/browse_thread/thread/5cc217f34b895541?pli=1</description>
    </item>
    <item>
      <title>PSP Type B Driver 64bitをオレオレ署名する</title>
      <link>https://github.pyyoshi.com/blog/2010/06/PSP-Type-B-Driver-64bit%E3%82%92%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E7%BD%B2%E5%90%8D%E3%81%99%E3%82%8B/</link>
      <pubDate>Thu, 17 Jun 2010 22:53:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/06/PSP-Type-B-Driver-64bit%E3%82%92%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E7%BD%B2%E5%90%8D%E3%81%99%E3%82%8B/</guid>
      <description>準備:&#xA;Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1 (ISO)をDLしインスコ。&#xA;ちなみに、CPU毎に違うので以下でチェック。&#xA;X86 version: GRMSDK_EN_DVD.iso AMD64 version: GRMSDKX_EN_DVD.iso Itanium version: GRMSDKIAI_EN_DVD.iso .NET Frameworkツールのリファレンスはここ。&#xA;PSP Type B DriverをDL、driver_x64準備。&#xA;以下手順:&#xA;各ツールは&amp;quot;Microsoft SDKs\Windows\v7.0\Bin&amp;quot;&#xA;makecert -sv &amp;ldquo;libusb0_x64.pvk&amp;rdquo; -a sha1 -eku 1.3.6.1.5.5.7.3.3 -r -ss Root -len 1024 -sr localMachine -n CN=&amp;ldquo;libusb0_x64.sys&amp;rdquo; &amp;ldquo;libusb0_x64.cer&amp;rdquo; ダイアログが出るのでパスワードを決める。（参考画像） もう1つダイアログでるので、先ほど決めたパスワードを入力（参考画像） cert2spc &amp;ldquo;libusb0_x64.cer&amp;rdquo; &amp;ldquo;libusb0_x64.spc&amp;rdquo; pvk2pfx -pvk &amp;ldquo;libusb0_x64.pvk&amp;rdquo; -pi &amp;ldquo;パスワード&amp;rdquo; -spc &amp;ldquo;libusb0_x64.spc&amp;rdquo; -pfx &amp;ldquo;libusb0_x64.pfx&amp;rdquo; -po &amp;ldquo;パスワード&amp;rdquo; パスワードは先ほど決めたものを使用。 signtool sign /f &amp;ldquo;libusb0_x64.pfx&amp;rdquo; /p &amp;ldquo;パスワード&amp;rdquo; /d &amp;ldquo;libusb0_x64.</description>
    </item>
    <item>
      <title>Bloggerのポスト日付取得うんたら</title>
      <link>https://github.pyyoshi.com/blog/2010/06/Blogger%E3%81%AE%E3%83%9D%E3%82%B9%E3%83%88%E6%97%A5%E4%BB%98%E5%8F%96%E5%BE%97%E3%81%86%E3%82%93%E3%81%9F%E3%82%89/</link>
      <pubDate>Sat, 05 Jun 2010 15:53:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/06/Blogger%E3%81%AE%E3%83%9D%E3%82%B9%E3%83%88%E6%97%A5%E4%BB%98%E5%8F%96%E5%BE%97%E3%81%86%E3%82%93%E3%81%9F%E3%82%89/</guid>
      <description>なんか、仕様変更？があったみたいでtimestampでの取得は時刻のみっぽい。&#xA;いや、わからないんだけど。別ブログでテンプレートDLしたやつ使ってたら未定義値が返ってきたので。&#xA;まぁ備忘録ということで。&#xA;投稿のデザイン編集で、日付の雛形は20001231みたいなかたちのやつで。&#xA;他のやつの対応はだるいのでしないｗ&#xA;以下ソース&#xA;&amp;lt;div class=&#39;post&#39; id=&#39;post&#39;&amp;gt; &amp;lt;div class=&#39;date&#39;&amp;gt; &amp;lt;small&amp;gt; &amp;lt;script type=&#39;text/javascript&#39;&amp;gt; var date = &amp;lt;data:post.dateHeader/&amp;gt; var date2 = date.toString(); var year = date2.substring(0,4); var month = date2.substring(4,6); var day = date2.substring(6,8); &amp;lt;/script&amp;gt; &amp;lt;div class=&#39;date_y&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(year);&amp;lt;/script&amp;gt;年&amp;lt;/div&amp;gt; &amp;lt;div class=&#39;date_m&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(month);&amp;lt;/script&amp;gt;月&amp;lt;/div&amp;gt; &amp;lt;div class=&#39;date_d&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(day);&amp;lt;/script&amp;gt;日&amp;lt;/div&amp;gt; &amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    <item>
      <title>gdippを各々のアプリケーションに適用させる方法</title>
      <link>https://github.pyyoshi.com/blog/2010/05/gdipp%E3%82%92%E5%90%84%E3%80%85%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 19 May 2010 18:21:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/05/gdipp%E3%82%92%E5%90%84%E3%80%85%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>Twitter上で相性悪いアプリがあるなー云々とかいってたので、全体適用ではなく各々のアプリに適用させる方法を紹介したいと思います。(やり方自体はgdi++の時と一緒ｗ)&#xA;ダウンロード:&#xA;gdippのダウンロードはこちら。32bit, 64bit版があるので使っているOSにあわせてください。&#xA;インストール:&#xA;Program Loaderを選択してインストール。※64bit版のかたは、64bit componentだけじゃなく32bit componentのほうもインストールしてくださいね(標準ではチェック入っているはず)&#xA;使い方:&#xA;デスクトップに「gdipp Loader 32」というショートカットができていると思います。 ※64bit版は「gdipp Loader 64」も作成されます。そのプロパティを開き、リンク先をメモっておきましょう。&#xA;次に適用させたいアプリのショートカット作りプロパティを開いてください。&#xA;先ほどメモしておいたリンクを今作成したショートカットの先頭に貼り付けて、次に半角スペースを入れてあげてください。&#xA;例) リンク先:[&amp;ldquo;C:\Program Files (x86)\gdipp\gdipp_loader_32.exe&amp;rdquo; &amp;ldquo;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&amp;rdquo;]&#xA;↑の感じです。これで完成です。あとは完成したショートカットから起動させればおｋです。お疲れ様でした。&#xA;※1 「gdipp Loader 64」ショートカットは、64bitアプリで使用します。やり方は一緒です。&#xA;※2 ショートカットアイコンがgdippのものになってしまいます。気になるかたは逐次変更してください。</description>
    </item>
    <item>
      <title>近況</title>
      <link>https://github.pyyoshi.com/blog/2010/05/%E8%BF%91%E6%B3%81/</link>
      <pubDate>Mon, 10 May 2010 21:52:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/05/%E8%BF%91%E6%B3%81/</guid>
      <description>クローラのテストコードをPythonで記述。&#xA;本コードをC++で。という感じ。GUIにするならC#あたり？ さわってみたのだけれども、Cという名前がついているだけであんまりCっぽくない。ちょっと微妙… MS製だし… あと、Linuxでやりたいし…&#xA;来期から研究室配属（単位次第ｗ）なのでその前までには完成させて、研究内容と結合してサービス云々。&#xA;今のところどのようなクローラーを作るかという段階ではない。とりあえずどっかのサービスをハックしようとか云々。</description>
    </item>
    <item>
      <title>UbuntuでMumble Serverを。</title>
      <link>https://github.pyyoshi.com/blog/2010/05/Ubuntu%E3%81%A7Mumble-Server%E3%82%92/</link>
      <pubDate>Mon, 10 May 2010 21:26:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/05/Ubuntu%E3%81%A7Mumble-Server%E3%82%92/</guid>
      <description>1,インストール&#xA;sudo apt-get install mumble-server&#xA;2,設定&#xA;dpkg-reconfigure mumble-server&#xA;sudo vim /etc/mumble-server.ini&#xA;4,起動（実は自動起動されますが、-supwすると落ちるので。&#xA;sudo /usr/sbin/murmurd -ini /etc/mumble-server.ini&#xA;注意することはsudoしてあげないとデータベースを読み込んでくれないということ。&#xA;詳しい設定方法はちょっとわからないので割愛ｗ</description>
    </item>
    <item>
      <title>Ubuntu 64bit環境でFlash Playerを使う</title>
      <link>https://github.pyyoshi.com/blog/2010/05/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A7Flash-Player%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Fri, 07 May 2010 14:33:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/05/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A7Flash-Player%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>すっかり忘れておったのでメモ&#xA;sudo apt-get install flashplugin-installer&#xA;で、いちよインストールされる。&#xA;Google ChromeとかFirefoxで使えるようにするには&#xA;Chromeは&#xA;sudo mkdir /opt/google/chrome/plugins&#xA;sudo ln -s /usr/lib/flashplugin-installer/libflashplayer.so /opt/google/chrome/plugins&#xA;Firefoxは&#xA;sudo ln -s /usr/lib/flashplugin-installer/libflashplayer.so /usr/lib/mozilla/plugins&#xA;**&#xA;**&#xA;このやり方のほかにも&#xA;こことかから拾ってきたのを適当なディレクトリにぶっ込んでlnすりゃいいと思われる。&#xA;※それにしてもadobeさん(´・ω・)ｶﾜｲｿｽ&#xA;いろんなサイトの動画プレイヤーがHTML5版とかでテスト始まってていよいよって感じ。</description>
    </item>
    <item>
      <title>Win7のブートローダが別HDDにインストールしやがったので</title>
      <link>https://github.pyyoshi.com/blog/2010/04/Win7%E3%81%AE%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%81%8C%E5%88%A5HDD%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%84%E3%81%8C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7/</link>
      <pubDate>Wed, 07 Apr 2010 21:01:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/04/Win7%E3%81%AE%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%81%8C%E5%88%A5HDD%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%84%E3%81%8C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7/</guid>
      <description>SSDにWin7をインスコした際、めんどくさかったのでほかのHDDを接続したまま行ったせいか、&#xA;うんこWindows様はOSがインスコされたSSDにMBRを書き込まずに、別HDDに書き込んでしまいました。&#xA;その際の修復方法の備忘録です。&#xA;修復Disk or InstallDiskから修復モード選択後、ターミナルを開きます。&#xA;以下コマンドを&#xA;diskpart&#xA;list diskpart ←ここでインストール先のdisk番号をメモ！&#xA;select disk [先ほどメモった番号を入力]&#xA;list partition ←ここでインストールされているパーティッション番号をメモ！&#xA;select partition [先ほどメモった番号を入力]&#xA;active&#xA;exit&#xA;bootrec /fixboot&#xA;bootrec /fixmbr&#xA;ここまでやってまだWin7が起動しなかった。でもmbrは書き込まれているみたい。&#xA;もっかい修復ディスクを開いて、スタートアップの修復を行う。&#xA;この時、ちゃんとOSが表示されていればうまくいっているはず。&#xA;この方法はMBRを誤って壊したときやGrubを使わなくなったときに使える。&#xA;日本語でおｋ</description>
    </item>
    <item>
      <title>Ubuntu 9.10にMongoDBをインストール</title>
      <link>https://github.pyyoshi.com/blog/2010/03/Ubuntu-9.10%E3%81%ABMongoDB%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
      <pubDate>Fri, 26 Mar 2010 01:15:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/03/Ubuntu-9.10%E3%81%ABMongoDB%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
      <description>&amp;ldquo;sudo apt-get install mongodb&amp;rdquo; できる娘うぶんちゅたんなのでほいほい投げてみたけど、やっぱり無かったので、素直にgitから持ってきてコンパイルすることに。&#xA;下準備としてコンパイルに必要なパッケージをインストール&#xA;sudo apt-get install build-dep scons libreadline-dev libmozjs-dev libpcre++-dev libboost-dev&#xA;gitからソースを拝借&#xA;cd /usr/src&#xA;sudo git clone git://github.com/mongodb/mongo.git&#xA;cd mongo&#xA;sudo scons all&#xA;でやったらエラーはいてくれやがったので、ググる先生に聞いたら、SpiderMonkeyをUTF8形式でインスコしないとだめとかなんとか。&#xA;cd -&#xA;sudo wget ftp://ftp.mozilla.org/pub/mozilla.org/js/js-1.7.0.tar.gz&#xA;sudo tar zxvf js-1.7.0.tar.gz&#xA;mv js/src mongo/js&#xA;cd mongo/js&#xA;export CFLAGS=&amp;quot;-DJS_C_STRINGS_ARE_UTF8&amp;quot;&#xA;sudo make -f Makefile.ref&#xA;sudo env JS_DIST=/usr make -f Makefile.ref export&#xA;で、ここまでいれておｋ的なこと書いてあって&amp;quot;sudo scons all&amp;quot;したんだけど、同じエラーがでやがったぜばかやろー！&#xA;いろいろ調べたら、&#xA;sudo apt-get install xulrunner-dev&#xA;すりゃーいいらしい。&#xA;気を取り直して&#xA;cd&#xA;cd /usr/src/mongo&#xA;sudo scons all</description>
    </item>
    <item>
      <title>Tumbler Photoバックアップスクリプトを作ったのだが…</title>
      <link>https://github.pyyoshi.com/blog/2010/03/Tumbler-Photo%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A0%E3%81%8C/</link>
      <pubDate>Sat, 06 Mar 2010 23:37:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/03/Tumbler-Photo%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A0%E3%81%8C/</guid>
      <description>DL→Ziped→配布までするスクリプト書いたんだけど、I/Oがネックで時間かかりすぎた。&#xA;なので、キューリスト作成だけでいいかと、コード書き直して実行したのですが、拡張子判定のために頻繁にI/Oでやっぱり時間喰う。 700位Photo投稿数あると10分くらいかかるｗ（最適化できるところはしたのだが&#xA;ただ、URLだけで良いというのであればAPIにアクセスするだけなのでそんなに時間はかからなかった。&#xA;でも、拡張子判定されていないので各自で行って貰わなければいけないのだけれど。&#xA;といううことで、クローラー作れば、いいんじゃね？って展開になったのだが。&#xA;クローラー作る知識なくて＼(^o^)／状態ｗ&#xA;幸いなことにPythonには数多くのモジュール＆情報が流れているので何とかなりそうなんだけど。&#xA;一から作ることになったら、ついったーの皆さんに聞きまくりながらどうにかしたいところｗ（人頼み&#xA;URLリストだけで良いよってかたがいたら、CGIにして公開しようと思います。</description>
    </item>
    <item>
      <title>初JavaScript&#43;初GoogleChromeExtensionで。</title>
      <link>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</link>
      <pubDate>Fri, 26 Feb 2010 16:41:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</guid>
      <description>ついったーに今閲覧している情報をついーとするExtensionを作成した。&#xA;Post Now Watching!&#xA;初JSで、もうわけわかめじょうたいでつくった。バグでるとおもう。&#xA;なんでつくったかというえば、Devfestの課題のため（笑）としか言いようがないけど、まぁ良い機会にはなったかな。&#xA;JavaScriptもやってみるとマゾッ気のある僕には適しているのかなとも思うけど&#xA;これはテキストエディタでやってたら頭がこんがらがるかもとも。&#xA;Aptanaたんのおかげで乗り越えられたけどね。&#xA;まぁそんなところ。</description>
    </item>
    <item>
      <title>EASEUS Disk CopyをブータブルUSBメモリで。</title>
      <link>https://github.pyyoshi.com/blog/2010/02/EASEUS-Disk-Copy%E3%82%92%E3%83%96%E3%83%BC%E3%82%BF%E3%83%96%E3%83%ABUSB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%A7/</link>
      <pubDate>Wed, 03 Feb 2010 14:56:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/02/EASEUS-Disk-Copy%E3%82%92%E3%83%96%E3%83%BC%E3%82%BF%E3%83%96%E3%83%ABUSB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%A7/</guid>
      <description>EASEUS Disk Copy自体はDiskからの起動をサポートしていますが、ネットブックなどのドライブを持たないPCからは、USBドライブで使わなくてはいけなく非常にだるいですね。&#xA;とりあえずEASEUS Disk CopyをDLしてきてiso内を見たらGrubにより起動させているみたいなのでUnetbootinでいけるんじゃね？ということで試したらいけたのでその時のメモ。&#xA;手順&#xA;1、EASEUS Disk CopyをDLしてきましょう。&#xA;2、UnetbootinをDLしてきましょう。（僕はWindows版）&#xA;3、dc.zipを展開する。&#xA;4、Unetbootinを起動してDiskimageモードで、先程展開したdc.isoを選択します。&#xA;5、OKを押してしばらくすればブータブルUSBメモリーの完成です。&#xA;参考画像</description>
    </item>
    <item>
      <title>NicoRoid</title>
      <link>https://github.pyyoshi.com/blog/2010/01/NicoRoid/</link>
      <pubDate>Tue, 05 Jan 2010 23:34:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/01/NicoRoid/</guid>
      <description>NicoRoidはAndroidでニコニコ動画を楽しむアプリです。&#xA;とか言っておく。&#xA;夏コミリリースに向けて Java･C++の勉強を兼ねてとかなんとか。&#xA;ついったーぼっと作成意欲も薄れたし、新たな目標が出来て良かった。</description>
    </item>
    <item>
      <title>Android端末買った。</title>
      <link>https://github.pyyoshi.com/blog/2010/01/Android%E7%AB%AF%E6%9C%AB%E8%B2%B7%E3%81%A3%E3%81%9F/</link>
      <pubDate>Tue, 05 Jan 2010 22:57:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/01/Android%E7%AB%AF%E6%9C%AB%E8%B2%B7%E3%81%A3%E3%81%9F/</guid>
      <description>あけましておめでとうございます。&#xA;さてAndroid端末の件ですが、思い切ってauからDoCoMoへMNPでHT-03Aを0円で入手。&#xA;今のところさくさく動いてるところ。&#xA;カスタムROM云々あるけど、サポート効かなくなるのでやらない方向だけれど&#xA;別機種を入手したら開発用端末としていろいろ弄る予定。&#xA;プランなどの使用形態は&#xA;SSバリュー,bizホダブル,モペラUライト,ケータイ補償をつけた。&#xA;パケは初月だけフル使用で、あとはCMR-250で芋を使い、2000円弱/月に抑えようと考えている。&#xA;さっそく作りたいものが出来たのでJavaのお勉強しないと（ぇ</description>
    </item>
    <item>
      <title>Ubuntuサーバ再構築(４)</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%89%EF%BC%94/</link>
      <pubDate>Sun, 27 Dec 2009 19:20:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%89%EF%BC%94/</guid>
      <description>DynamicDNSに登録してもIPころころ変わっては意味がないのでなんとか対応したい！そういう時にスクリプト書いて対応するのは良いのだが管理が大変になるかも。そーいうときはDiCEを使おう！&#xA;ということでDiCE導入から設定まで&#xA;cd /usr/local/bin&#xA;sudo wget http://www.hi-ho.ne.jp/cgi-bin/user/yoshihiro_e/download.cgi?p=diced019&#xA;sudo tar zxvf diced01914.tar.gz&#xA;sudo rm &amp;ldquo;diced01914.tar.gz&amp;rdquo;&#xA;※端末の文字コードをEUCへ変更する&#xA;sudo ./diced&#xA;:setup&#xA;IPアドレスの検出方法を指定してください&#xA;(0) 自動検出&#xA;(1) ローカルのネットワークアダプタから検出&#xA;(2) 外部のスクリプトから検出&#xA;&amp;lt;現在:0&amp;gt;&#xA;(N)変更しない (P)戻る&#xA;&amp;gt;2&#xA;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&#xA;スクリプトのURLを入力してください&#xA;&amp;lt;現在:&amp;gt;&#xA;(N)変更しない (P)戻る&#xA;&amp;gt;http://ipcheck.ieserver.net/&#xA;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&#xA;プライベートIPアドレスも検出対象ですか？ (Y/N)&#xA;&amp;lt;現在:いいえ&amp;gt;&#xA;(P)戻る&#xA;&amp;gt;n&#xA;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&#xA;IPアドレスの検出をテストしますか？ (Y/N)&#xA;(P)戻る&#xA;&amp;gt;y&#xA;検出IPアドレス&amp;gt;*******&#xA;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&#xA;IPアドレスの検出をテストしますか？ (Y/N)&#xA;(P)戻る&#xA;&amp;gt;n&#xA;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&#xA;IPアドレスをチェックする間隔を指定してください(分)&#xA;設定可能範囲は5分以上です&#xA;&amp;lt;現在:10&amp;gt;&#xA;(N)変更しない (P)戻る&#xA;&amp;gt;5&#xA;=================================================&#xA;DNSサーバーの負荷を軽減するために頻繁なDNS更新を防ぐ必要があります&#xA;前回の更新から一定時間DNS更新処理を行わないように保護時間を設定して&#xA;ください(分) 設定可能範囲は10分から1440分です&#xA;&amp;lt;現在:60&amp;gt;&#xA;(N)変更しない (P)戻る&#xA;&amp;gt;30&#xA;=================================================&#xA;設定を保存しますか? (Y/N)</description>
    </item>
    <item>
      <title>Qt4環境を構築</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Qt4%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</link>
      <pubDate>Sun, 27 Dec 2009 17:04:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Qt4%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</guid>
      <description>sudo apt-get install libqt4-opengl-dev qt4-dev-tools libqt4-webkit-dbg libqt4-xmlpatterns-dbg libqt4-dbg　qt4-doc qt4-demos-dbg</description>
    </item>
    <item>
      <title>Ubuntu 64bit環境で32bitアプリを使う場合</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A732bit%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88/</link>
      <pubDate>Sun, 27 Dec 2009 16:35:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A732bit%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88/</guid>
      <description>**sudo apt-get install ia32-libs&#xA;**&#xA;でパッケージをインスコ。</description>
    </item>
    <item>
      <title>Ubuntuサーバ再構築(3)</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%893/</link>
      <pubDate>Sun, 27 Dec 2009 15:51:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%893/</guid>
      <description>OpenSSHインスコ&#xA;sudo apt-get install ssh&#xA;設定(参考)&#xA;vim /etc/ssh/sshd_config&#xA;#プロトコル&#xA;Protocol 2,1&#xA;#rootのログインの許可&#xA;PermitRootLogin no&#xA;でおｋ&#xA;あとはクライアントからログインでリモート操作出来ると思う。&#xA;出来ない場合はFWall関係を調べてみるといいだろう。</description>
    </item>
    <item>
      <title>Ubuntuサーバ再構築(2)</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%892/</link>
      <pubDate>Thu, 24 Dec 2009 15:33:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%892/</guid>
      <description>vsftpdをインスコ&#xA;sudo apt-get install vsftpd&#xA;次にconfig弄りなのだが、そのまえにvimをインスコ(vimデビューなう)&#xA;sudo apt-get install vim-full&#xA;sudo.vimもついでに。(参考)&#xA;sudo wget -P /usr/share/vim/addons/plugin -O sudo.vim &amp;ldquo;http://www.vim.org/scripts/download_script.php?src_id=3477&amp;rdquo;&#xA;vimの使い方はこちらを参照&#xA;標準のエディタの変更は&#xA;sudo update-alternatives &amp;ndash;config editor&#xA;で行える。&#xA;さて、気を取り直してvsftpdのconfigを弄る&#xA;基本的にvsftpd.confは/etc直下にあるが、ないという場合は以下を叩いてファイル位置を確認しよう。&#xA;dpkg -L vsftpd&#xA;vsftpd.confで弄った部分(参考１)(参考２)&#xA;#匿名ログインを許可&#xA;anonymous_enable=NO&#xA;#ローカルユーザのログインを許可&#xA;local_enable=YES&#xA;#書き込み許可&#xA;write_enable=YES&#xA;#デフォルトのumaskを022へ&#xA;local_umask=022&#xA;#ログ保存位置&#xA;xferlog_file=/var/log/vsftpd.log&#xA;#ログフォーマット&#xA;xferlog_std_fomat=NO&#xA;#アスキーモードでのアップロード許可&#xA;ascii_upload_enable=YES&#xA;#アスキーモードでのダウンロード許可&#xA;ascii_download_enable=YES&#xA;#ftpサーバ名 バージョンを表示させない。代替メッセージ&#xA;ftpd_banner=Welcome to my FTP serer.&#xA;#/homeより上層へのアクセスを制限&#xA;chroot_local_user=YES #/homeより上層へのアクセスを制限するリストの有効化&#xA;chroot_list_enable=YES #/homeより上層へのアクセスを制限リストの場所&#xA;chroot_list_file=/etc/vsftpd/chroot_list #Dirごと削除できるようにする。&#xA;ls_recurse_enable=YES&#xA;service start vsftpd&#xA;最低限設定したほうがいいやつを上げた。あとは自分の構築したい環境に適宜変更よろ。</description>
    </item>
    <item>
      <title>メモリ使用量の確認コマンド</title>
      <link>https://github.pyyoshi.com/blog/2009/12/%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link>
      <pubDate>Wed, 23 Dec 2009 00:52:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid>
      <description>free&#xA;でおｋ。</description>
    </item>
    <item>
      <title>Ubuntuサーバ再構築(1)</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%891/</link>
      <pubDate>Tue, 22 Dec 2009 23:54:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%891/</guid>
      <description>結構前に触ったきりでちょい不安になったので、OS再インスコすることにした。&#xA;ディストリはUbuntu9.04。9.10はバグがアルらしく様子見（どんなバグがあるか詳しく調べていない）&#xA;DNS Server LAMP Server OpenSSH Server を選択。&#xA;BasicUbuntuServerに何が入っているのか分からないのでひとまずこれで。&#xA;ネットインスコだったけど念のため&#xA;sudo apt-get update / sudo apt-get upgrade&#xA;を叩いた。&#xA;ついでにGUI環境もということで**LXDE**を。&#xA;sudo apt-get install lxde 鯖構築終わったら、lxdeを起動時に立ち上げないようにすることを忘れずに。&#xA;次回は vsftpd apache2 Python FireWall などの設定構築。</description>
    </item>
    <item>
      <title>CSVモジュールでのエラー解決！</title>
      <link>https://github.pyyoshi.com/blog/2009/12/CSV%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA/</link>
      <pubDate>Mon, 21 Dec 2009 21:02:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/CSV%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA/</guid>
      <description>この記事でとっても悩んでいたのですが、ついったーでこの問題を解決していただきました。 以下がやりとりです。&#xA;Dirにあるファイルのプライオリティが高いみたいです。&#xA;こーいう問題にぶち当たる辺り、ちゃんとどういう動作をしているのか意識しながらやらないといけないのかな。触り始めたばかり、なんて言って逃げたくはないので頑張ろう。</description>
    </item>
    <item>
      <title>DoCoMoでスマフォ生活</title>
      <link>https://github.pyyoshi.com/blog/2009/12/DoCoMo%E3%81%A7%E3%82%B9%E3%83%9E%E3%83%95%E3%82%A9%E7%94%9F%E6%B4%BB/</link>
      <pubDate>Sat, 19 Dec 2009 19:06:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/DoCoMo%E3%81%A7%E3%82%B9%E3%83%9E%E3%83%95%E3%82%A9%E7%94%9F%E6%B4%BB/</guid>
      <description>DoCoMoのサイトで見て、てきとーに計算した。&#xA;タイプSS バリュー(ひとりでも割50)　934円(税込980円)/月&#xA;mopera U(Uライトプラン)　300円(税込315円)/月&#xA;Biz・ホーダイ ダブル　5,700円(税込5,985円)/月&#xA;計　6,916円(税込7,280円)/月&#xA;うむ。結構良い値段。これに端末代をいくらかずつ払うとなると8000～9000円になるだろう。&#xA;芋場とauを解約すれば何とかなるなぁ。&#xA;追記&#xA;以下サイトが詳しくかいてあった。&#xA;http://www40.atwiki.jp/ht03a2ch/</description>
    </item>
    <item>
      <title>なんか残念なFirefoxさん</title>
      <link>https://github.pyyoshi.com/blog/2009/12/%E3%81%AA%E3%82%93%E3%81%8B%E6%AE%8B%E5%BF%B5%E3%81%AAFirefox%E3%81%95%E3%82%93/</link>
      <pubDate>Wed, 16 Dec 2009 23:46:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/%E3%81%AA%E3%82%93%E3%81%8B%E6%AE%8B%E5%BF%B5%E3%81%AAFirefox%E3%81%95%E3%82%93/</guid>
      <description>アップデートを促してきて指示に従ったのだが、更新できませんでした。っと言うのダサいなぁ～とか思った。まぁそれだけ。</description>
    </item>
    <item>
      <title>自鯖の中身を引越した。</title>
      <link>https://github.pyyoshi.com/blog/2009/12/%E8%87%AA%E9%AF%96%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E5%BC%95%E8%B6%8A%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 14 Dec 2009 00:18:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/%E8%87%AA%E9%AF%96%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E5%BC%95%E8%B6%8A%E3%81%97%E3%81%9F/</guid>
      <description>以前のケースがMini-ITX用で鯖に不向きだったのでATXケースに換装。&#xA;まぁこんな感じに。&#xA;構成は&#xA;MB:D945GCLF2D&#xA;RAM:2GB&#xA;POW:100W(AC)&#xA;HDD:160GB(HGST)&#xA;これに、爆熱チップセットのヒートシンクをHV-3747BL、サウスブリッジのチップセットにYH-3020Aをつけた。あとは8センチファンを2重にした糸で固定して完成（笑）。&#xA;ケースはDPC-2768BKを3980円で入手。&#xA;久しぶりのアキバでものすごく疲れたけど、楽しめたので良しとしよう。</description>
    </item>
    <item>
      <title>csvモジュールが・・・・</title>
      <link>https://github.pyyoshi.com/blog/2009/12/csv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C/</link>
      <pubDate>Sat, 12 Dec 2009 17:23:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/csv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C/</guid>
      <description>下のようなコードを実行すると、「AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;reader&amp;rsquo;」っと出るんですよね・・・。&#xA;import csv csvfile = &#39;a.csv&#39; reader = csv.reader(open(csvfile, &#39;r&#39;)) for row in reader: print row 謎すぎる。解決策をぼちぼち調べないと・・・&#xA;追記：&#xA;問題解決しました。 →記事</description>
    </item>
    <item>
      <title>当ブログについて</title>
      <link>https://github.pyyoshi.com/blog/2009/12/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Sat, 12 Dec 2009 00:21:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>まず最初に書かなくてはいけないノだけれども。&#xA;とりあえず、このブログはRenax64のメモ ノートとして使ってます。&#xA;ぶちあった問題などをとりあえず書いていきます。</description>
    </item>
    <item>
      <title>PythonのcsvモジュールがUTF-16に対応していない件について</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%AEcsv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8CUTF-16%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Sat, 12 Dec 2009 00:07:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%AEcsv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8CUTF-16%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>なんどやってもエラー吐くのでｇｇってみたら、案の定だめっぽい。&#xA;どうしても読みたい場合はココのサンプルを利用すればいいっぽい。&#xA;まぁ、ファイルの文字コードにUTF-16を避けることに注意すればおｋですね。&#xA;ここも参考になるかも。</description>
    </item>
    <item>
      <title>SQLiteでデータ型指定の有無</title>
      <link>https://github.pyyoshi.com/blog/2009/12/SQLite%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E6%8C%87%E5%AE%9A%E3%81%AE%E6%9C%89%E7%84%A1/</link>
      <pubDate>Fri, 11 Dec 2009 20:53:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/SQLite%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E6%8C%87%E5%AE%9A%E3%81%AE%E6%9C%89%E7%84%A1/</guid>
      <description>詳しくはどうなっているか分からないけど、データ型を指定しなくても通る。&#xA;INSERT INTOで『&amp;rsquo;&amp;rsquo;』で括っているか否かで判定しているのかな？</description>
    </item>
    <item>
      <title>CSV2SQLなるものを見つけた。</title>
      <link>https://github.pyyoshi.com/blog/2009/12/CSV2SQL%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F/</link>
      <pubDate>Thu, 10 Dec 2009 23:37:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/CSV2SQL%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F/</guid>
      <description>題通りなんか見つけた。とりあえず参考にしながら自分でもCSV2SQL for Pythonを作ってみようと思う。&#xA;import sqlite3 import csv # SQLite内のデータはutf-8を想定 def sqlite2csv(db_name, table_name, out_filename): dbh = sqlite3.connect(db_name) writer = csv.writer(file(out_filename, &#39;w&#39;)) for row in dbh.execute(&#39;SELECT * FROM %(table_name)s&#39; % locals()): writer.writerow([col.encode(&#39;utf-8&#39;) if isinstance(col, unicode) else col for col in row]) dbh.close() # csvのセパレータはカンマを想定 def csv2sqlite(db_name, table_name, in_filename): dbh = sqlite3.connect(db_name) reader = csv.reader(open(&amp;quot;import.csv&amp;quot;, &amp;quot;rb&amp;quot;)) for row in reader: ph = &amp;quot;?,&amp;quot; * (len(row) - 1) + &amp;quot;?&amp;quot; dbh.execute(&amp;quot;INSERT INTO %(table_name)s VALUES(%(ph)s)&amp;quot; % locals(), tuple(row)) dbh.</description>
    </item>
    <item>
      <title>CSS small-caps</title>
      <link>https://github.pyyoshi.com/blog/2009/12/CSS-small-caps/</link>
      <pubDate>Thu, 10 Dec 2009 00:38:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/CSS-small-caps/</guid>
      <description>英小文字をやや小さなサイズの英大文字に変える</description>
    </item>
    <item>
      <title>カラム名でDBからデータを取得する方法</title>
      <link>https://github.pyyoshi.com/blog/2009/12/%E3%82%AB%E3%83%A9%E3%83%A0%E5%90%8D%E3%81%A7DB%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 08 Dec 2009 23:41:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/%E3%82%AB%E3%83%A9%E3%83%A0%E5%90%8D%E3%81%A7DB%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>row_factory = sqlite3.Rowを利用する。&#xA;ex)&#xA;db = sqlite3.connect(&#39;xxx&#39;, isolation_level=None) sql = u”select * from hoge” db.row_factory = sqlite3.Row c = db.execute(sql) for row in c: print row[&amp;quot;カラム名を指定&amp;quot;] </description>
    </item>
    <item>
      <title>Pythonでの関数定義</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%9A%E7%BE%A9/</link>
      <pubDate>Tue, 08 Dec 2009 23:00:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%9A%E7%BE%A9/</guid>
      <description>def hoge():&#xA;処理内容 : インデントすること。&#xA;ex)&#xA;def hoge(): print &#39;Hello Python&#39; hoge() 最初は何処まで定義されるのか分からなかったが、インデントされたか否かで判定してるっぽいです。&#xA;コードが綺麗に見えると言われる理由の一つなのかな？</description>
    </item>
    <item>
      <title>Pythonで特定の行を読み込ませる</title>
      <link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E8%A1%8C%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BE%E3%81%9B%E3%82%8B/</link>
      <pubDate>Tue, 08 Dec 2009 22:53:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E8%A1%8C%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BE%E3%81%9B%E3%82%8B/</guid>
      <description>readlines()[n]&#xA;nに読み込みたい行を入れるだけ。&#xA;ex)&#xA;f = ‘fopeninout.txt’ fp = open(f, ‘r’) Str = fp.readlines()[1] fp.close print Str&#xA;fopeninout.txt&#xA;test1&#xA;test2&#xA;test3</description>
    </item>
  </channel>
</rss>
