<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on PyYoshiのログ置き場</title>
    <link>https://github.pyyoshi.com/blog/tags/JavaScript/</link>
    <description>Recent content in JavaScript on PyYoshiのログ置き場</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 12 Mar 2013 18:52:00 +0900</lastBuildDate>
    <atom:link href="https://github.pyyoshi.com/blog/tags/JavaScript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>node.jsでBuffer経由でArrayBufferを使う</title>
      <link>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</link>
      <pubDate>Tue, 12 Mar 2013 18:52:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</guid>
      <description>Qiitaに書いた記事と同じです。&#xA;ブラウザ向けに書いていたコードをどうしてもサーバサイドでも使いたいと思い調べた結果以下のコードで使えることがわかった。&#xA;これでDataStream.jsをちょこっと変更するだけでnode.jsでも手軽にバイナリをいじれるようになった。&#xA;node向けに変更したDataStream.js</description>
    </item>
    <item>
      <title>JavaScriptでOAuth認証するときの注意点</title>
      <link>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Thu, 30 Jun 2011 19:18:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>JavaScript単体でOAuth認証する場合ConsumerKey/SecretKeyが見えてしまう。&#xA;難読化（base64など）ですぐにはバレないようにはできてもいずれ見つかってしますのだけれど、どのように他のJSなアプリは隠しているのだろうか？&#xA;単体ではなくサーバプロキシを通せばそんな意識しなくてもいいのだろうけど気になるところではある。&#xA;思いつく限りだと、JS本体には置かずバイナリをJSでパースしてキーを使うというものもある。&#xA;xhrでバイナリ取得&#xA;var xhr = new XMLHttpRequest();&#xA;xhr.open(&amp;lsquo;GET&amp;rsquo;, path, false);&#xA;xhr.overrideMimeType(&amp;rsquo;text/plain; charset=x-user-defined&amp;rsquo;);&#xA;xhr.send(null);&#xA;binary_string = xhr.responseText;&#xA;binary_stringをbinaryに変換する&#xA;bytes = []&#xA;for(var i=0, t; i &amp;lt; binary_string.length; i++){&#xA;bytes[i] = binary_string.charCodeAt(i) &amp;amp; 0xff;&#xA;}&#xA;こんなかんじでJS内でバイナリ化して、各自パース処理を書けばいいのではないでしょうか？&#xA;隠し方は人それぞれだと想いますが＾＾；&#xA;他の方法としてはyqlを使う方法もあるようですね。&#xA;How-to: Secure OAuth in JavaScript</description>
    </item>
    <item>
      <title>document.getElementsByClassNameがChromeで実装されていた。</title>
      <link>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</link>
      <pubDate>Sun, 24 Oct 2010 11:29:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</guid>
      <description>いつに実装されたかは知らないがなんか使えた。(ソース)</description>
    </item>
    <item>
      <title>初JavaScript&#43;初GoogleChromeExtensionで。</title>
      <link>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</link>
      <pubDate>Fri, 26 Feb 2010 16:41:00 +0900</pubDate>
      <guid>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</guid>
      <description>ついったーに今閲覧している情報をついーとするExtensionを作成した。&#xA;Post Now Watching!&#xA;初JSで、もうわけわかめじょうたいでつくった。バグでるとおもう。&#xA;なんでつくったかというえば、Devfestの課題のため（笑）としか言いようがないけど、まぁ良い機会にはなったかな。&#xA;JavaScriptもやってみるとマゾッ気のある僕には適しているのかなとも思うけど&#xA;これはテキストエディタでやってたら頭がこんがらがるかもとも。&#xA;Aptanaたんのおかげで乗り越えられたけどね。&#xA;まぁそんなところ。</description>
    </item>
  </channel>
</rss>
