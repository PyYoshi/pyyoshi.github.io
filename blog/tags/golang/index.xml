<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on PyYoshiのログ置き場</title>
    <link>https://github.pyyoshi.com/blog/tags/golang/</link>
    <description>Recent content in golang on PyYoshiのログ置き場</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 07 Dec 2016 18:20:12 +0000</lastBuildDate>
    
	<atom:link href="https://github.pyyoshi.com/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>redigoのPoolとredigomockを利用する方法</title>
      <link>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 07 Dec 2016 18:20:12 +0000</pubDate>
      
      <guid>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>redigoのredis.Poolはredis.Connとは異なりインタフェースではなく構造体として定義されています.
それとredigomockはredis.Poolを生成する機能を有していないことからぱっと見使うことができないだろうなっと判断しましたが
よくよく考えてみるとredis.Poolで利用する関数群をインタフェースとして定義すれば良いのではないかと気づきがあったので共有します.
以下Example
// service.go  package service import (...) // 省略  type RedigoPool interface { Get() redis.Conn Close() error } type ExampleService struct { pool RedigoPool // *redis.Poolを直接定義せず, RedigoPoolというインタフェースを利用する } func (s *ExampleService) HmSetWithExpire(key string, a, b int64, expireSeconds uint) (interface{}, error) { redisConn := s.pool.Get() defer redisConn.Close() redisConn.Send(&amp;#34;MULTI&amp;#34;) redisConn.Send(&amp;#34;HMSET&amp;#34;, key, &amp;#34;a&amp;#34;, a, &amp;#34;b&amp;#34;, b) redisConn.Send(&amp;#34;EXPIRE&amp;#34;, key, expireSeconds) reply, err := redisConn.Do(&amp;#34;EXEC&amp;#34;) if err != nil { return nil, err } return reply, nil } // service_test.</description>
    </item>
    
    <item>
      <title>golangでstructにマッピング前にJSONの特定のプロパティの値を確認したい</title>
      <link>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</link>
      <pubDate>Tue, 13 Sep 2016 06:11:20 +0000</pubDate>
      
      <guid>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</guid>
      <description>上記をやりたいことがたまにある.
具体的に言うと
type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; 	X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.4&amp;#34; 	Y string `json:&amp;#34;y&amp;#34;` // value: &amp;#34;123.4&amp;#34; } type DataV2 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v2&amp;#34; 	X int64 `json:&amp;#34;x&amp;#34;` // value: 123.4 	Y int64 `json:&amp;#34;y&amp;#34;` // value: 123.4 } DataV1のX, Yはstring型だが. 次バージョンのDataV2ではint64になっている.
中の構造体がバージョンごとに変わっているために振り分けをしたい!
そういう時にgithub.com/antonholmquist/jasonが役に立ちました.
極端なコードで恐縮ですが
package main import &amp;#34;github.com/antonholmquist/jason&amp;#34; type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; 	X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.</description>
    </item>
    
    <item>
      <title>Go言語Webフレームワークrevelについて (動作確認編)</title>
      <link>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</link>
      <pubDate>Wed, 22 May 2013 05:58:00 +0900</pubDate>
      
      <guid>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</guid>
      <description>web.goは簡単なアプリを作るには最適なのですが複雑なものを作るにはちと機能が足らない感じです。
というわけでWebフレームワーク探してたらPlayフレームワークっぽく実装できるrevelっていうのがあることを知りました。
で、
私 Playフレームワークがどういうものなのか知りません。もちろんきいたことはあります。
いつも使うのはSinatra系かDjangoばかり使っています。
なのでいい機会なのでプロジェクトの構造とかメモがわりに残せればなと思います。
※goenv環境を前提にしています。とてもCoolな開発環境を提供してくれるので導入必須！
まずはrevelを使える状態にします。
 $ cd $HOME/src
$ goenv NyanWeb
$ cd NyanWeb
$ source activate
$ go get github.com/robfig/revel
$ go build -o bin/revel github.com/robfig/revel/cmd
 revelプロジェクトを作成します。
 $ revel new Nyan
 これによってsrc/以下にNyanというプロジェクトが作成されます。
実際に動かしてみましょう。
 $ revel run Nyan
 実行したら127.0.0.1:9000にアクセスして正しく動作していることを確認してください。
一旦Ctrl+Cにて終了させます。
続いてビルドが通るようにプロジェクトのパスを変更します。
 $ cd $HOME/src/NyanWeb
$ cd src/
$ mkdir webapps
$ mv Nyan/ webapps/
$ cd -
 これで$HOME/src/NyanWeb/webapps/Nyanという構造になったかと思います。</description>
    </item>
    
    <item>
      <title>golangでfib(39)の実行時間</title>
      <link>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</link>
      <pubDate>Mon, 18 Mar 2013 00:43:00 +0900</pubDate>
      
      <guid>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</guid>
      <description>以前の記事をgolangではどうなるのかやってみた。
結果:
$ go build fib.go$ go versiongo version go1$ time ./fib 63245986**./fib 0.54s user 0.00s system 99% cpu 0.548 total**</description>
    </item>
    
  </channel>
</rss>