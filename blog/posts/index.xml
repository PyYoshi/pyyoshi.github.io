<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on PyYoshiのログ置き場</title>
		<link>https://github.pyyoshi.com/blog/posts/</link>
		<description>Recent content in Posts on PyYoshiのログ置き場</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>ja</language>
		<lastBuildDate>Wed, 31 Oct 2018 14:21:48 +0000</lastBuildDate>
		<atom:link href="https://github.pyyoshi.com/blog/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>XPS 13(9360 Intel 8th gen)のi915設定</title>
			<link>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AEi915%E8%A8%AD%E5%AE%9A/</link>
			<pubDate>Wed, 31 Oct 2018 14:21:48 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AEi915%E8%A8%AD%E5%AE%9A/</guid>
			<description>i915.modeset=1 i915.enable_rc6=1 i915.enable_fbc=1 i915.enable_guc_loading=1 i915.enable_guc_submission=1 i915.disable_power_well=0 ちらつきまたはラップトップ側のディスプレイがブラックアウトする場合は
i915.enable_psr=0 にする.
$ dmesg で
[drm:intel_dp_start_link_train [i915]] *ERROR* [CONNECTOR:71:eDP-1] Link Training failed at link rate = 540000, lane count = 4 が見られる場合もまた
i915.enable_psr=0 にする必要がある.
i915ドライバーの設定情報は以下で参照できる.
$ modinfo -p i915 GRUB設定を更新する /etc/default/grub の
GRUB_CMDLINE_LINUX_DEFAULT に上の設定値を追加する.
設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う.
$ sudo grub-mkconfig -o /boot/grub/grub.cfg </description>
			<content type="html"><![CDATA[<pre><code>i915.modeset=1 i915.enable_rc6=1 i915.enable_fbc=1 i915.enable_guc_loading=1 i915.enable_guc_submission=1 i915.disable_power_well=0
</code></pre><p>ちらつきまたはラップトップ側のディスプレイがブラックアウトする場合は</p>
<pre><code>i915.enable_psr=0
</code></pre><p>にする.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ dmesg
</code></pre></div><p>で</p>
<pre><code>[drm:intel_dp_start_link_train [i915]] *ERROR* [CONNECTOR:71:eDP-1] Link Training failed at link rate = 540000, lane count = 4
</code></pre><p>が見られる場合もまた</p>
<pre><code>i915.enable_psr=0
</code></pre><p>にする必要がある.</p>
<p>i915ドライバーの設定情報は以下で参照できる.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ modinfo -p i915
</code></pre></div><h2 id="grub">GRUB設定を更新する</h2>
<pre><code>/etc/default/grub
</code></pre><p>の</p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT
</code></pre><p>に上の設定値を追加する.</p>
<p>設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>XPS 13(9360 Intel 8th gen)のNVMEの省電力機能を有効にする</title>
			<link>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AENVME%E3%81%AE%E7%9C%81%E9%9B%BB%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/</link>
			<pubDate>Wed, 31 Oct 2018 13:53:07 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2018/10/XPS-139360-Intel-8th-gen%E3%81%AENVME%E3%81%AE%E7%9C%81%E9%9B%BB%E5%8A%9B%E6%A9%9F%E8%83%BD%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B/</guid>
			<description>NVMEのモデルと設定値を調べる $ sudo nvme list 東芝の512GBの場合はカーネルコマンドラインに以下を指定
nvme_core.default_ps_max_latency_us=170000 1TBの場合は以下を指定
nvme_core.default_ps_max_latency_us=180000 GRUB設定を更新する /etc/default/grub の
GRUB_CMDLINE_LINUX_DEFAULT に上で調べた設定値を追加する
東芝512GBモデルの場合は以下のようになる
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;nvme_core.default_ps_max_latency_us=170000&amp;quot; 設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う
$ sudo grub-mkconfig -o /boot/grub/grub.cfg </description>
			<content type="html"><![CDATA[<h2 id="nvme">NVMEのモデルと設定値を調べる</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo nvme list
</code></pre></div><p>東芝の512GBの場合はカーネルコマンドラインに以下を指定</p>
<pre><code>nvme_core.default_ps_max_latency_us=170000
</code></pre><p>1TBの場合は以下を指定</p>
<pre><code>nvme_core.default_ps_max_latency_us=180000
</code></pre><h2 id="grub">GRUB設定を更新する</h2>
<pre><code>/etc/default/grub
</code></pre><p>の</p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT
</code></pre><p>に上で調べた設定値を追加する</p>
<p>東芝512GBモデルの場合は以下のようになる</p>
<pre><code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;nvme_core.default_ps_max_latency_us=170000&quot;
</code></pre><p>設定を更新したら以下コマンドを実行してカーネルイメージの更新を行う</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Ubuntu 18.04で起動時間が遅い場合の対処</title>
			<link>https://github.pyyoshi.com/blog/2018/10/Ubuntu-18.04%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E9%96%93%E3%81%8C%E9%81%85%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
			<pubDate>Tue, 09 Oct 2018 19:19:21 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2018/10/Ubuntu-18.04%E3%81%A7%E8%B5%B7%E5%8B%95%E6%99%82%E9%96%93%E3%81%8C%E9%81%85%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
			<description>起動時のコンソールに以下が表示されたあとにログイン画面が表示される場合は
give up waiting for suspend/resume device $ cat /etc/initramfs-tools/conf.d/resume RESUME=none すれば解決する.
ハイバネーションを利用しない場合に限る</description>
			<content type="html"><![CDATA[<p>起動時のコンソールに以下が表示されたあとにログイン画面が表示される場合は</p>
<pre><code>give up waiting for suspend/resume device
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat /etc/initramfs-tools/conf.d/resume

RESUME<span style="color:#f92672">=</span>none
</code></pre></div><p>すれば解決する.</p>
<p>ハイバネーションを利用しない場合に限る</p>
]]></content>
		</item>
		
		<item>
			<title>ローカル環境にElasticSearchをインストール</title>
			<link>https://github.pyyoshi.com/blog/2018/05/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%ABElasticSearch%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
			<pubDate>Tue, 22 May 2018 15:36:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2018/05/%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E7%92%B0%E5%A2%83%E3%81%ABElasticSearch%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
			<description>ローカルにElasticSearch開発環境を構築します.
ターゲットは日本語データです.
必須環境 Ubuntu or Debian
Basicライセンスの取得 https://www.elastic.co/jp/subscriptions
https://register.elastic.co/ でBasicライセンスを取得する
メールでライセンスダウンロードURLが送られてくるのでそのJSONファイルをダウンロードしておく
ElasticSearchのインストール wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - echo &amp;#34;deb https://artifacts.elastic.co/packages/6.x/apt stable main&amp;#34; | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list sudo apt update sudo apt install elasticsearch sudo systemctl disable elasticsearch.service sudo service elasticsearch status sudo service elasticsearch start sudo service elasticsearch status X-Packのインストール sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install x-pack sudo service elasticsearch restart sudo service elasticsearch status sudo /usr/share/elasticsearch/bin/x-pack/setup-passwords interactive ElasticSearchライセンスの更新 curl -XPUT -u elastic &amp;#39;http://localhost:9200/_xpack/license?</description>
			<content type="html"><![CDATA[<p>ローカルにElasticSearch開発環境を構築します.</p>
<p>ターゲットは日本語データです.</p>
<h2 id="heading">必須環境</h2>
<p>Ubuntu or Debian</p>
<h2 id="basic">Basicライセンスの取得</h2>
<p><a href="https://www.elastic.co/jp/subscriptions">https://www.elastic.co/jp/subscriptions</a></p>
<p><a href="https://register.elastic.co/">https://register.elastic.co/</a> でBasicライセンスを取得する</p>
<p>メールでライセンスダウンロードURLが送られてくるのでそのJSONファイルをダウンロードしておく</p>
<h2 id="elasticsearch">ElasticSearchのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
echo <span style="color:#e6db74">&#34;deb https://artifacts.elastic.co/packages/6.x/apt stable main&#34;</span> | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list
sudo apt update
sudo apt install elasticsearch
sudo systemctl disable elasticsearch.service
sudo service elasticsearch status
sudo service elasticsearch start
sudo service elasticsearch status
</code></pre></div><h2 id="x-pack">X-Packのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install x-pack
sudo service elasticsearch restart
sudo service elasticsearch status
sudo /usr/share/elasticsearch/bin/x-pack/setup-passwords interactive
</code></pre></div><h2 id="elasticsearch-1">ElasticSearchライセンスの更新</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl -XPUT -u elastic <span style="color:#e6db74">&#39;http://localhost:9200/_xpack/license?acknowledge=true&#39;</span> -H <span style="color:#e6db74">&#34;Content-Type: application/json&#34;</span> -d @&lt;ライセンスファイル.json&gt;
curl -XGET -u elastic <span style="color:#e6db74">&#39;http://localhost:9200/_xpack/license&#39;</span>
</code></pre></div><p>※<code>&lt;ライセンスファイル.json&gt;</code>の前の<code>@</code>は含めること</p>
<h2 id="japanese-kuromoji-analysis">Japanese (kuromoji) Analysisプラグインのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-kuromoji
sudo service elasticsearch restart
sudo service elasticsearch status
</code></pre></div><h2 id="icu-analysis">ICU Analysisプラグインのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu
sudo service elasticsearch restart
sudo service elasticsearch status
</code></pre></div><h2 id="phonetic-analysis">Phonetic Analysisプラグインのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-phonetic
sudo service elasticsearch restart
sudo service elasticsearch status
</code></pre></div><h2 id="elasticsearch-analysis-kuromoji-neologd">Elasticsearch Analysis Kuromoji Neologdをインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install  org.codelibs:elasticsearch-analysis-kuromoji-neologd:6.2.1
sudo service elasticsearch restart
sudo service elasticsearch status
</code></pre></div><h2 id="kibana">Kibanaのインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install kibana
sudo systemctl disable kibana.service
sudo service kibana status
sudo service kibana start
sudo service kibana status
</code></pre></div><h2 id="kibanax-pack">KibanaにX-Packをインストール</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo /usr/share/kibana/bin/kibana-plugin install x-pack
sudo service kibana restart
sudo service kibana status
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Ubuntuのバックアップ環境 - 調査</title>
			<link>https://github.pyyoshi.com/blog/2018/01/Ubuntu%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83-%E8%AA%BF%E6%9F%BB/</link>
			<pubDate>Fri, 05 Jan 2018 19:14:38 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2018/01/Ubuntu%E3%81%AE%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83-%E8%AA%BF%E6%9F%BB/</guid>
			<description>以前まではバックアップソフトは使わず必要なものはプライベートリポジトリに入れたりGdriveに入れたりしてた. (macOSはTimeMachineを常用)
これで十分だったけど, どうせならエンジニアらしくそれらをそれらしく自動化するのもおもしろそうなのでやっていく.
■ 欲しい機能 暗号化 バックアップ用ストレージは基本持って歩かないけれど, 仕事でもつかうので.
できるならば秘密鍵はYubiKey(PGP)で管理したい.
フルバックアップ 月1ペースでクリーンアップしたい.
差分バックアップ リストアは全体より単一ファイルで行う用途のほうが圧倒的に多い.
メンテが止まってもベースとなるツール(rsyncなど)でリストアが可能 これは大前提.
どうせ新しいUbuntuが出たら乗り換えるとおもうけど, そのリリースでも使えるかどうかはわからん.
あくまでバックアップだけど, リストアしたいときにメンテされて無くてリストアできないのは大変困る.
ディスクベースじゃなくてディレクトリベースで管理 ファイルシステムになるべく依存したくない.
NASへアップロードしたい.
■ TimeShift https://launchpad.net/timeshift
システムのバックアップ･リストアにフォーカスしている.
なのでHomeとかキャッシュとかそういうのは除外リストに入ってる.
Homeなどのユーザデータは別アプリに頼るべき.
暗号化されたファイルシステムのバックアップは可能.
ファイル自体の暗号化はたぶんできない(要調査).
なのでファイルシステム側で暗号化したほうがいいかも.
フルバックアップ後のバックアップは差分バックアップで行っていくようだ.
■ Deja Dup https://launchpad.net/deja-dup
ubuntuに標準で搭載されてるあれ.
Homeディレクトリ以下はこれでバックアップしたほうがよいっぽい.
差分バックアップの他にフルバックアップも用意されているので, 差分バックアップは2時間おき, フルバックアップは1ヶ月おきくらいで良いかもしれない.
これにすることで, あたらしいフルバックアップが作られたとき, 差分バックアップはそれをベースに行っていくみたい.
パスワードやPGPによる暗号化が可能.
■ Back In Time https://github.com/bit-team/backintime
TimeShift同様シンプル.
EncFSによるファイルシステムベースでの暗号化.
SSHでファイル転送できる.
EncFS使ってるので正直使いたいとは思えない…
■ Systemback https://launchpad.net/systemback
メンテしないようなので使わない.
■ 参考:  https://wiki.ubuntulinux.jp/UbuntuTips/Install/Backup http://gihyo.jp/admin/serial/01/ubuntu-recipe/0399 https://allabout.co.jp/gm/gc/436735/  </description>
			<content type="html"><![CDATA[<p>以前まではバックアップソフトは使わず必要なものはプライベートリポジトリに入れたりGdriveに入れたりしてた. (macOSはTimeMachineを常用)</p>
<p>これで十分だったけど, どうせならエンジニアらしくそれらをそれらしく自動化するのもおもしろそうなのでやっていく.</p>
<h5 id="-">■ 欲しい機能</h5>
<h6 id="heading">暗号化</h6>
<p>バックアップ用ストレージは基本持って歩かないけれど, 仕事でもつかうので.</p>
<p>できるならば秘密鍵はYubiKey(PGP)で管理したい.</p>
<h6 id="heading-1">フルバックアップ</h6>
<p>月1ペースでクリーンアップしたい.</p>
<h6 id="heading-2">差分バックアップ</h6>
<p>リストアは全体より単一ファイルで行う用途のほうが圧倒的に多い.</p>
<h6 id="rsync">メンテが止まってもベースとなるツール(rsyncなど)でリストアが可能</h6>
<p>これは大前提.</p>
<p>どうせ新しいUbuntuが出たら乗り換えるとおもうけど, そのリリースでも使えるかどうかはわからん.</p>
<p>あくまでバックアップだけど, リストアしたいときにメンテされて無くてリストアできないのは大変困る.</p>
<h6 id="heading-3">ディスクベースじゃなくてディレクトリベースで管理</h6>
<p>ファイルシステムになるべく依存したくない.</p>
<p>NASへアップロードしたい.</p>
<h5 id="-timeshift">■ TimeShift</h5>
<p><a href="https://launchpad.net/timeshift">https://launchpad.net/timeshift</a></p>
<p>システムのバックアップ･リストアにフォーカスしている.</p>
<p>なのでHomeとかキャッシュとかそういうのは除外リストに入ってる.</p>
<p>Homeなどのユーザデータは別アプリに頼るべき.</p>
<p>暗号化されたファイルシステムのバックアップは<a href="https://github.com/teejee2008/timeshift#supported-system-configurations">可能</a>.</p>
<p>ファイル自体の暗号化はたぶんできない(要調査).</p>
<p>なのでファイルシステム側で暗号化したほうがいいかも.</p>
<p>フルバックアップ後のバックアップは差分バックアップで行っていくようだ.</p>
<h5 id="-deja-dup">■ Deja Dup</h5>
<p><a href="https://launchpad.net/deja-dup">https://launchpad.net/deja-dup</a></p>
<p>ubuntuに標準で搭載されてるあれ.</p>
<p>Homeディレクトリ以下はこれでバックアップしたほうがよいっぽい.</p>
<p>差分バックアップの他にフルバックアップも用意されているので, 差分バックアップは2時間おき, フルバックアップは1ヶ月おきくらいで良いかもしれない.</p>
<p>これにすることで, あたらしいフルバックアップが作られたとき, 差分バックアップはそれをベースに行っていくみたい.</p>
<p>パスワードやPGPによる暗号化が可能.</p>
<h5 id="-back-in-time">■ Back In Time</h5>
<p><a href="https://github.com/bit-team/backintime">https://github.com/bit-team/backintime</a></p>
<p>TimeShift同様シンプル.</p>
<p>EncFSによるファイルシステムベースでの暗号化.</p>
<p>SSHでファイル転送できる.</p>
<p>EncFS使ってるので正直使いたいとは思えない…</p>
<h5 id="-systemback">■ Systemback</h5>
<p><a href="https://launchpad.net/systemback">https://launchpad.net/systemback</a></p>
<p>メンテしないようなので使わない.</p>
<h5 id="--1">■ 参考:</h5>
<ul>
<li><a href="https://wiki.ubuntulinux.jp/UbuntuTips/Install/Backup">https://wiki.ubuntulinux.jp/UbuntuTips/Install/Backup</a></li>
<li><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0399">http://gihyo.jp/admin/serial/01/ubuntu-recipe/0399</a></li>
<li><a href="https://allabout.co.jp/gm/gc/436735/">https://allabout.co.jp/gm/gc/436735/</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>2018年やりたいリスト</title>
			<link>https://github.pyyoshi.com/blog/2017/12/2018%E5%B9%B4%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%83%AA%E3%82%B9%E3%83%88/</link>
			<pubDate>Sun, 31 Dec 2017 15:00:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/12/2018%E5%B9%B4%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%83%AA%E3%82%B9%E3%83%88/</guid>
			<description>Rust まだシンタックスとかそういう根本的なところでつまずいて, スムーズに書くことはできてないので今年こそはやりたいことをそれなりに書けるくらいにはなりたい.
WebAssembly with Rust コードハイライターとかMarkdownパーザとか書きたい.
WebRTC 主にP2P部分に興味あり.
PeerCastのような仕組みをWebRTC上で作ってトラッカー以外は依存しない配信システムの仕組みを作っていきたい.
ダイエット 3年弱, 忙しすぎて体調管理できてなかったので健康的な肉体になるように頑張る.
語学 英語 記事などのアウトプットも英語で書いていく.
Duolingoを頑張る.
余裕が出てきたら英会話教室みたいなやつにいく.
副業 家賃程度は稼げるようになりたい.
そのための地盤がためを今年1年に割り当てたい.
稼いだお金は自分に投資したい.
WebIDEを試す iPad Proなどの軽い端末で出先で開発できる環境がほしいとずっと思っていたので, 今年こそはいろいろ試していきたい.
AWS Cloud9とかCodeMirrorとかCloud Shellとか.
Ethereum上でなにか作りたい. Ethereum上でアプリを動かせる仕組みがあるみたいなので簡単なものをつくってみたい.
技能試験の勉強  FP カラーコーディネーター  3Dプリンタ 小物作りに使いたい.
精度とか出来とか気になるタイプなので本番はDMMとかでやると思うけど, PoCづくりにやっすいやつは用意しておきたい.</description>
			<content type="html"><![CDATA[<h3 id="rust">Rust</h3>
<p>まだシンタックスとかそういう根本的なところでつまずいて, スムーズに書くことはできてないので今年こそはやりたいことをそれなりに書けるくらいにはなりたい.</p>
<h3 id="webassembly-with-rust">WebAssembly with Rust</h3>
<p>コードハイライターとかMarkdownパーザとか書きたい.</p>
<h3 id="webrtc">WebRTC</h3>
<p>主にP2P部分に興味あり.</p>
<p>PeerCastのような仕組みをWebRTC上で作ってトラッカー以外は依存しない配信システムの仕組みを作っていきたい.</p>
<h3 id="heading">ダイエット</h3>
<p>3年弱, 忙しすぎて体調管理できてなかったので健康的な肉体になるように頑張る.</p>
<h3 id="heading-1">語学</h3>
<h4 id="heading-2">英語</h4>
<p>記事などのアウトプットも英語で書いていく.</p>
<p>Duolingoを頑張る.</p>
<p>余裕が出てきたら英会話教室みたいなやつにいく.</p>
<h3 id="heading-3">副業</h3>
<p>家賃程度は稼げるようになりたい.</p>
<p>そのための地盤がためを今年1年に割り当てたい.</p>
<p>稼いだお金は自分に投資したい.</p>
<h3 id="webide">WebIDEを試す</h3>
<p>iPad Proなどの軽い端末で出先で開発できる環境がほしいとずっと思っていたので, 今年こそはいろいろ試していきたい.</p>
<p>AWS Cloud9とかCodeMirrorとかCloud Shellとか.</p>
<h3 id="ethereum">Ethereum上でなにか作りたい.</h3>
<p>Ethereum上でアプリを動かせる仕組みがあるみたいなので簡単なものをつくってみたい.</p>
<h3 id="heading-4">技能試験の勉強</h3>
<ul>
<li>FP</li>
<li>カラーコーディネーター</li>
</ul>
<h3 id="3d">3Dプリンタ</h3>
<p>小物作りに使いたい.</p>
<p>精度とか出来とか気になるタイプなので本番はDMMとかでやると思うけど, PoCづくりにやっすいやつは用意しておきたい.</p>
]]></content>
		</item>
		
		<item>
			<title>2017年とこれから</title>
			<link>https://github.pyyoshi.com/blog/2017/12/2017%E5%B9%B4%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89/</link>
			<pubDate>Sun, 31 Dec 2017 01:38:05 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/12/2017%E5%B9%B4%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89/</guid>
			<description>今年もいろいろありましたが, 中でも3年CTOとして働いていたIdemoの役員を退任したことがなにより大きな出来事だったかと思います.
なかなか成長させることができずの退任でとても悔しさが残りますが, たくさんのことが学ぶことができ, 血肉となり感謝してもしきれないくらいです.
いつかまたIdemoのようなEdTechに関わりたいなという気持ちは残っています.
2018年は具体的にこうしていきたい!っていうのはあまり無いのですが,
これまでエンジニアとしてフルスタックにやってきました.
やってきたというか, 実現するために必要なものはすべて学ぶスタンスが私をそうしたのだと思います.
これはいい面もあり悪い面もあると認識しています.
どちらの技術も知っているので客観的に問題を捉えて解決できたりだとか, 0から1, 1から5くらいまではとても活躍するだとか, マルチタレント寄りに活躍できるいい面があります.
逆に, 広く浅く技術を学んでしまい, 大きな課題を解決するためにはスペシャリスト寄りの技術力が求められるシーンではなかなか活躍できない可能性もあります.
そういった悪い面を今後どう克服するか悩んでいるところであり, キャリアにも関わってくる要素であると考えています.
2018年はそういった部分を考えながら過ごしていきたいと考えています.
あとはもうちょっとアウトプットを増やそうと考えています. RFCとかそういった技術にこったものだったりOSSコントリビュートだったり.
来年からは東京でお仕事する予定です. やっと人並みの生活がおくれそう(年収面で)です.
勉強会にも積極的に参加して刺激をたくさん受けモチベ向上に力を入れていくつもりです.
では2018年もどうぞよろしくお願いします.</description>
			<content type="html"><![CDATA[<p>今年もいろいろありましたが, 中でも3年CTOとして働いていたIdemoの役員を退任したことがなにより大きな出来事だったかと思います.</p>
<p>なかなか成長させることができずの退任でとても悔しさが残りますが, たくさんのことが学ぶことができ, 血肉となり感謝してもしきれないくらいです.</p>
<p>いつかまたIdemoのようなEdTechに関わりたいなという気持ちは残っています.</p>
<p>2018年は具体的にこうしていきたい!っていうのはあまり無いのですが,</p>
<p>これまでエンジニアとして<code>フルスタック</code>にやってきました.</p>
<p>やってきたというか, <code>実現するために必要なものはすべて学ぶ</code>スタンスが私をそうしたのだと思います.</p>
<p>これはいい面もあり悪い面もあると認識しています.</p>
<p>どちらの技術も知っているので客観的に問題を捉えて解決できたりだとか, 0から1, 1から5くらいまではとても活躍するだとか, マルチタレント寄りに活躍できるいい面があります.</p>
<p>逆に, 広く浅く技術を学んでしまい, 大きな課題を解決するためにはスペシャリスト寄りの技術力が求められるシーンではなかなか活躍できない可能性もあります.</p>
<p>そういった悪い面を今後どう克服するか悩んでいるところであり, キャリアにも関わってくる要素であると考えています.</p>
<p>2018年はそういった部分を考えながら過ごしていきたいと考えています.</p>
<p>あとはもうちょっとアウトプットを増やそうと考えています. RFCとかそういった技術にこったものだったりOSSコントリビュートだったり.</p>
<p>来年からは東京でお仕事する予定です. やっと人並みの生活がおくれそう(年収面で)です.</p>
<p>勉強会にも積極的に参加して刺激をたくさん受けモチベ向上に力を入れていくつもりです.</p>
<p>では2018年もどうぞよろしくお願いします.</p>
]]></content>
		</item>
		
		<item>
			<title>WebAssemblyをブラウザで実行するときにハマった</title>
			<link>https://github.pyyoshi.com/blog/2017/11/WebAssembly%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F/</link>
			<pubDate>Tue, 14 Nov 2017 16:55:30 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/11/WebAssembly%E3%82%92%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%A7%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F/</guid>
			<description>せっかくRustちまちま書けるようになってきたのでWebAssemblyを触り始めた.
基本的にChromeで実行していて気づかなかったのだけど, Firefoxで実行しようとしたとき, 以下の初期化コードでは動かなかった.
fetch(&amp;#39;wasm/hello.wasm&amp;#39;) .then((response) =&amp;gt; response.arrayBuffer()) .then((buffer) =&amp;gt; { Module.wasmBinary = buffer const scriptElem = document.createElement(&amp;#34;script&amp;#34;); scriptElem.src = &amp;#34;wasm/hello.js&amp;#34;; scriptElem.addEventListener(&amp;#39;load&amp;#39;, (e) =&amp;gt; { const mainScriptElem = document.createElement(&amp;#39;script&amp;#39;); mainScriptElem.src = &amp;#39;main.js&amp;#39;; document.body.appendChild(mainScriptElem); }); document.body.appendChild(scriptElem); }) それで, このコードの
... scriptElem.addEventListener(&amp;#39;load&amp;#39;, (e) =&amp;gt; { const mainScriptElem = document.createElement(&amp;#39;script&amp;#39;); mainScriptElem.src = &amp;#39;main.js&amp;#39;; document.body.appendChild(mainScriptElem); }); ... が良くなかった.
何が良くないかというとwasm/hello.jsの読み込みが終わっただけで, WebAssemblyのランタイムの準備が整ったわけではなく, このあとmain.jsがロードされてもwasmの初期化がされていないのでエラーになることがある.
この問題, Chromeのパースがはやいのか気づかなかった. Firefoxでいざ実行してみたらwasmが準備できてないのに実行するなみたいなエラーが出た.
Assertion failed: you need to wait for the runtime to be ready (e.</description>
			<content type="html"><![CDATA[<p>せっかくRustちまちま書けるようになってきたのでWebAssemblyを触り始めた.</p>
<p>基本的にChromeで実行していて気づかなかったのだけど, Firefoxで実行しようとしたとき, 以下の初期化コードでは動かなかった.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;wasm/hello.wasm&#39;</span>)
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">response</span>) =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">arrayBuffer</span>())
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">buffer</span>) =&gt; {
        <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">wasmBinary</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">buffer</span>

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">scriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;script&#34;</span>);
        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wasm/hello.js&#34;</span>;
        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;load&#39;</span>, (<span style="color:#a6e22e">e</span>) =&gt; {
            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mainScriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
            <span style="color:#a6e22e">mainScriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;main.js&#39;</span>;
            document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">mainScriptElem</span>);
        });
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">scriptElem</span>);
    })
</code></pre></div><p>それで, このコードの</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">...
        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;load&#39;</span>, (<span style="color:#a6e22e">e</span>) =&gt; {
            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mainScriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;script&#39;</span>);
            <span style="color:#a6e22e">mainScriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;main.js&#39;</span>;
            document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">mainScriptElem</span>);
        });
...
</code></pre></div><p>が良くなかった.</p>
<p>何が良くないかというと<code>wasm/hello.js</code>の読み込みが終わっただけで, WebAssemblyのランタイムの準備が整ったわけではなく, このあと<code>main.js</code>がロードされても<code>wasm</code>の初期化がされていないのでエラーになることがある.</p>
<p>この問題, Chromeのパースがはやいのか気づかなかった. Firefoxでいざ実行してみたら<code>wasmが準備できてないのに実行するな</code>みたいなエラーが出た.</p>
<p><code>Assertion failed: you need to wait for the runtime to be ready (e.g. wait for main() to be called)</code></p>
<p>はい. しっかりとライフサイクルに従いましょう!</p>
<p><code>wasmがパースされた後にmain.jsをロード</code>するようにすれば解決できるっということは理解できているので, そのように振る舞ってくれるAPIを利用すれば良いのです.</p>
<p>今回の場合, <code>main.js</code>をロードさせるところから始めるので <code>Module.onRuntimeInitialized</code>が該当するはずです.</p>
<p>他にも<code>Module._main</code>や<code>Module.addOnInit</code>があると思いますが, WebAssemblyランタイムが初期化されて初めて使えるものなので利用できません.</p>
<p>以下が正しく動作するコードです.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Module</span> <span style="color:#f92672">=</span> {}
<span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">onRuntimeInitialized</span> <span style="color:#f92672">=</span> () =&gt; {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mainScriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;script&#34;</span>);
    <span style="color:#a6e22e">mainScriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;main.js&#34;</span>;
    document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">mainScriptElem</span>);
};
<span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;wasm/hello.wasm&#39;</span>)
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">response</span>) =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">arrayBuffer</span>())
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">buffer</span>) =&gt; {
        <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">wasmBinary</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">buffer</span>

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">scriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;script&#34;</span>);
        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wasm/hello.js&#34;</span>;
        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">scriptElem</span>);
    })
</code></pre></div><p>※<code>Module</code>はEmscriptenが用意しているものでWebAssembly規格標準のものではありません</p>
<h6 id="heading">おまけ:</h6>
<p>Firefoxでライフサイクルを確認するコード</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;wasm/hello.wasm&#39;</span>)
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">response</span>) =&gt; <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">arrayBuffer</span>())
    .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">buffer</span>) =&gt; {
        <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">wasmBinary</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">buffer</span>

        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">scriptElem</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#34;script&#34;</span>);
        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">src</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wasm/hello.js&#34;</span>;

        <span style="color:#a6e22e">scriptElem</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;load&#39;</span>, (<span style="color:#a6e22e">e</span>) =&gt; {
            <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">addOnPreRun</span>(() =&gt; {
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;addOnPreRun() has been called!&#39;</span>)
            });
            <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">addOnPostRun</span>(() =&gt; {
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;addOnPostRun() has been called!&#39;</span>)
            });
            <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">addOnExit</span>(() =&gt; {
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;addOnExit() has been called!&#39;</span>)
            });
            <span style="color:#a6e22e">Module</span>.<span style="color:#a6e22e">addOnInit</span>(() =&gt; {
                <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;addOnInit() has been called!&#39;</span>)
            });
        });

        document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">scriptElem</span>);
    })
</code></pre></div><h6 id="ref">Ref:</h6>
<ul>
<li><a href="https://kripken.github.io/emscripten-site/docs/api_reference/module.html?highlight=onruntimeinitialized">Module object — Emscripten documentation</a></li>
<li><a href="https://kripken.github.io/emscripten-site/docs/getting_started/FAQ.html">FAQ — Emscripten documentation</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>react-native bundle/start実行時にbundlingが0%のまま進まない場合</title>
			<link>https://github.pyyoshi.com/blog/2017/11/react-native-bundle/start%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%ABbundling%E3%81%8C0%E3%81%AE%E3%81%BE%E3%81%BE%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</link>
			<pubDate>Sun, 05 Nov 2017 01:59:59 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/11/react-native-bundle/start%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%ABbundling%E3%81%8C0%E3%81%AE%E3%81%BE%E3%81%BE%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</guid>
			<description>$ react-native run-ios を実行してシミュレータが立ち上がってコードのロードを始めるが一向に進捗が0%のまま動かない問題に遭遇した.
nodeのバージョンを変えてもダメ, react-nativeのバージョンを変えてもダメでどうしたものかと悩んで, キャッシュ削除試してみようとしたときに
$ watchman watch-del-all を実行しても終了しないでずっと実行し続ける状態であることに気づいた.
これはwatchmanが悪さしているのだろうと思い, プロセスを殺したら正しく動いた…
$ pkill watchman </description>
			<content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ react-native run-ios
</code></pre></div><p>を実行してシミュレータが立ち上がってコードのロードを始めるが一向に進捗が0%のまま動かない問題に遭遇した.</p>
<p><img src="/images/2017/11/----------2017-11-05-18.06.59.png" alt=""></p>
<p>nodeのバージョンを変えてもダメ, react-nativeのバージョンを変えてもダメでどうしたものかと悩んで, キャッシュ削除試してみようとしたときに</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ watchman watch-del-all
</code></pre></div><p>を実行しても終了しないでずっと実行し続ける状態であることに気づいた.</p>
<p>これはwatchmanが悪さしているのだろうと思い, プロセスを殺したら正しく動いた…</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ pkill watchman
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>githubなどのwebhookをうけとる便利なGo製サーバー adnanh/webhook</title>
			<link>https://github.pyyoshi.com/blog/2017/10/github%E3%81%AA%E3%81%A9%E3%81%AEwebhook%E3%82%92%E3%81%86%E3%81%91%E3%81%A8%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AAGo%E8%A3%BD%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-adnanh/webhook/</link>
			<pubDate>Wed, 25 Oct 2017 21:45:08 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/10/github%E3%81%AA%E3%81%A9%E3%81%AEwebhook%E3%82%92%E3%81%86%E3%81%91%E3%81%A8%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AAGo%E8%A3%BD%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC-adnanh/webhook/</guid>
			<description>hugoでビルド&amp;amp;プッシュしたgitリポジトリをサーバに反映させるためにwebhookが有効だと思ったのでいろいろ調べてみた結果
https://github.com/adnanh/webhook
が, シングルバイナリのこれが一番使い勝手が良かった.
設定ファイル(hooks.json)は以下
[{ &amp;#34;id&amp;#34;: &amp;#34;update-script&amp;#34;, &amp;#34;execute-command&amp;#34;: &amp;#34;/tmp/update-script.sh&amp;#34;, &amp;#34;command-working-directory&amp;#34;: &amp;#34;/tmp&amp;#34;, &amp;#34;trigger-rule&amp;#34;: { &amp;#34;and&amp;#34;: [{ &amp;#34;match&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;payload-hash-sha1&amp;#34;, &amp;#34;secret&amp;#34;: &amp;#34;&amp;lt;&amp;lt;SECRET KEY&amp;gt;&amp;gt;&amp;#34;, &amp;#34;parameter&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;header&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;X-Hub-Signature&amp;#34; } } }, { &amp;#34;match&amp;#34;: { &amp;#34;parameter&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;header&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;X-GitHub-Event&amp;#34; }, &amp;#34;type&amp;#34;: &amp;#34;value&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;push&amp;#34; } } ] } }] これでSECRET KEYで認証が行えるのと pushイベント以外は弾くようにできる.
http://&amp;lt;&amp;lt;HOSTADDR:PORT&amp;gt;&amp;gt;/hooks/update-scriptにgithubからpostが飛んでくるとあとは設定したスクリプトが実行される.
あとはsystemdなりにサービス登録しておわり.
[Unit] Description=webhook [Service] User=root Group=root WorkingDirectory=/tmp ExecStart=/usr/local/bin/webhook -hooks /tmp/hooks.json -verbose -hotreload [Install] WantedBy=multi-user.target 自分の環境はlet&#39;s encrypt + nginxでhttpsなリバプロでセキュアなフックサーバを建てた.</description>
			<content type="html"><![CDATA[<p>hugoでビルド&amp;プッシュしたgitリポジトリをサーバに反映させるためにwebhookが有効だと思ったのでいろいろ調べてみた結果</p>
<p><a href="https://github.com/adnanh/webhook">https://github.com/adnanh/webhook</a></p>
<p>が, シングルバイナリのこれが一番使い勝手が良かった.</p>
<p>設定ファイル(hooks.json)は以下</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[{
	<span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;update-script&#34;</span>,
	<span style="color:#f92672">&#34;execute-command&#34;</span>: <span style="color:#e6db74">&#34;/tmp/update-script.sh&#34;</span>,
	<span style="color:#f92672">&#34;command-working-directory&#34;</span>: <span style="color:#e6db74">&#34;/tmp&#34;</span>,
	<span style="color:#f92672">&#34;trigger-rule&#34;</span>: {
		<span style="color:#f92672">&#34;and&#34;</span>: [{
				<span style="color:#f92672">&#34;match&#34;</span>: {
					<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;payload-hash-sha1&#34;</span>,
					<span style="color:#f92672">&#34;secret&#34;</span>: <span style="color:#e6db74">&#34;&lt;&lt;SECRET KEY&gt;&gt;&#34;</span>,
					<span style="color:#f92672">&#34;parameter&#34;</span>: {
						<span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;header&#34;</span>,
						<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;X-Hub-Signature&#34;</span>
					}
				}
			},
			{
				<span style="color:#f92672">&#34;match&#34;</span>: {
					<span style="color:#f92672">&#34;parameter&#34;</span>: {
						<span style="color:#f92672">&#34;source&#34;</span>: <span style="color:#e6db74">&#34;header&#34;</span>,
						<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;X-GitHub-Event&#34;</span>
					},
					<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;value&#34;</span>,
					<span style="color:#f92672">&#34;value&#34;</span>: <span style="color:#e6db74">&#34;push&#34;</span>
				}
			}
		]
	}
}]
</code></pre></div><p>これでSECRET KEYで認証が行えるのと <code>push</code>イベント以外は弾くようにできる.</p>
<p><code>http://&lt;&lt;HOSTADDR:PORT&gt;&gt;/hooks/update-script</code>にgithubからpostが飛んでくるとあとは設定したスクリプトが実行される.</p>
<p>あとはsystemdなりにサービス登録しておわり.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-systemd" data-lang="systemd"><span style="color:#66d9ef">[Unit]</span>
<span style="color:#a6e22e">Description</span><span style="color:#f92672">=</span><span style="color:#e6db74">webhook</span>

<span style="color:#66d9ef">[Service]</span>
<span style="color:#a6e22e">User</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
<span style="color:#a6e22e">Group</span><span style="color:#f92672">=</span><span style="color:#e6db74">root</span>
<span style="color:#a6e22e">WorkingDirectory</span><span style="color:#f92672">=</span><span style="color:#e6db74">/tmp</span>
<span style="color:#a6e22e">ExecStart</span><span style="color:#f92672">=</span><span style="color:#e6db74">/usr/local/bin/webhook -hooks /tmp/hooks.json -verbose -hotreload</span>

<span style="color:#66d9ef">[Install]</span>
<span style="color:#a6e22e">WantedBy</span><span style="color:#f92672">=</span><span style="color:#e6db74">multi-user.target</span>
</code></pre></div><p>自分の環境は<code>let's encrypt</code> + <code>nginx</code>でhttpsなリバプロでセキュアなフックサーバを建てた.</p>
<ul>
<li><a href="https://developer.github.com/webhooks/">https://developer.github.com/webhooks/</a></li>
<li><a href="https://github.com/adnanh/webhook/wiki">https://github.com/adnanh/webhook/wiki</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>WebStormの時代は終わったのかもしれない</title>
			<link>https://github.pyyoshi.com/blog/2017/10/WebStorm%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AF%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</link>
			<pubDate>Thu, 12 Oct 2017 21:18:42 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/10/WebStorm%E3%81%AE%E6%99%82%E4%BB%A3%E3%81%AF%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</guid>
			<description>JavaScriptの補完もTypeScriptの補完もVSCodeがとても賢く余計なことはしないでシンプル
一方WebStormは頼んでいない補完をサジェストしてくるは関係ない(名前が同じ)コンポネントを拾ってくるわでひどいなっと思った
どう困っているかというと下の画像の通り, import済みのコンポネントがあるのに繰り返し, このコンポネントじゃね?ってサジェストしてきてコードを書くことに集中できない…
ちな, EAPでも治らなかった…
IDEA, PyCharm, PHPStormっと使ってきて本当にありがたい気持ちでいっぱいだったけど, 正直がっかりした</description>
			<content type="html"><![CDATA[<p>JavaScriptの補完もTypeScriptの補完もVSCodeがとても賢く余計なことはしないでシンプル</p>
<p>一方WebStormは頼んでいない補完をサジェストしてくるは関係ない(名前が同じ)コンポネントを拾ってくるわでひどいなっと思った</p>
<p>どう困っているかというと下の画像の通り, import済みのコンポネントがあるのに繰り返し, このコンポネントじゃね?ってサジェストしてきてコードを書くことに集中できない…</p>
<p><img src="/images/2017/10/----------2017-10-13-11.43.07.png" alt=""></p>
<p>ちな, EAPでも治らなかった…</p>
<p>IDEA, PyCharm, PHPStormっと使ってきて本当にありがたい気持ちでいっぱいだったけど, 正直がっかりした</p>
]]></content>
		</item>
		
		<item>
			<title>react-native-cameraをAndroidで使うときのちょっとした罠</title>
			<link>https://github.pyyoshi.com/blog/2017/10/react-native-camera%E3%82%92Android%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E7%BD%A0/</link>
			<pubDate>Mon, 09 Oct 2017 17:49:35 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/10/react-native-camera%E3%82%92Android%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D%E3%81%AE%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%97%E3%81%9F%E7%BD%A0/</guid>
			<description>なぜかカメラプレビューが真っ白/真っ黒で映らない
これはAndroid 6.0以上の端末でたぶん陥ります
で, なんでかというとアプリにカメラ権限が付与されていないから
AndroidのときはPermissionsAndroidを利用して権限リクエスト･管理をしっかり行いましょう
あと同じように位置情報取得とか連絡先取得そういうのもリクエストが必要です
 PermissionsAndroid - React Native 実行時のパーミッション リクエスト | Android Developers Normal パーミッションと Dangerous パーミッション | Android Developers 少し親切なRuntime Permission対応 - Qiita  </description>
			<content type="html"><![CDATA[<p>なぜかカメラプレビューが真っ白/真っ黒で映らない</p>
<p>これはAndroid 6.0以上の端末でたぶん陥ります</p>
<p>で, なんでかというとアプリにカメラ権限が付与されていないから</p>
<p>Androidのときは<code>PermissionsAndroid</code>を利用して権限リクエスト･管理をしっかり行いましょう</p>
<p>あと同じように位置情報取得とか連絡先取得そういうのもリクエストが必要です</p>
<ul>
<li><a href="https://facebook.github.io/react-native/docs/permissionsandroid.html">PermissionsAndroid - React Native</a></li>
<li><a href="https://developer.android.com/training/permissions/requesting.html?hl=ja">実行時のパーミッション リクエスト | Android Developers</a></li>
<li><a href="https://developer.android.com/guide/topics/security/permissions.html?hl=ja#normal-dangerous">Normal パーミッションと Dangerous パーミッション | Android Developers</a></li>
<li><a href="https://qiita.com/caad1229/items/35bab757217b204711df">少し親切なRuntime Permission対応 - Qiita</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Firebase Databaseでパスにuidを含めたユーザ権限周りをFirestoreでやるには</title>
			<link>https://github.pyyoshi.com/blog/2017/10/Firebase-Database%E3%81%A7%E3%83%91%E3%82%B9%E3%81%ABuid%E3%82%92%E5%90%AB%E3%82%81%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E6%A8%A9%E9%99%90%E5%91%A8%E3%82%8A%E3%82%92Firestore%E3%81%A7%E3%82%84%E3%82%8B%E3%81%AB%E3%81%AF/</link>
			<pubDate>Fri, 06 Oct 2017 08:42:49 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/10/Firebase-Database%E3%81%A7%E3%83%91%E3%82%B9%E3%81%ABuid%E3%82%92%E5%90%AB%E3%82%81%E3%81%9F%E3%83%A6%E3%83%BC%E3%82%B6%E6%A8%A9%E9%99%90%E5%91%A8%E3%82%8A%E3%82%92Firestore%E3%81%A7%E3%82%84%E3%82%8B%E3%81%AB%E3%81%AF/</guid>
			<description>あきらめましょう
通常のKVSのようにドキュメントにオーナーのユーザIDを含めてセキュリティルールでオーナー以外を弾く設定をしましょう
おわり
.
.
.
.
.
.
っとしても良いのだけどどうせならexampleでも
まずベースとなるモデルを定義します.
このモデルをベースにモデルを作ります.
// BaseModel.ts  export default abstract class BaseModel { // ドキュメントオーナーのID  readonly userID: string; // ドキュメントのID  id: string | null; // ドキュメントの作成･更新日時  timestamp: Date; constructor(userID: string, timestamp: Date) { this.userID = userID; this.timestamp = timestamp; } // Firestoreに保存するとき用  abstract toJSON(): Object; } toJSONはデータベースに保存する際に特定のプロパティのみを保存するためにあります.
これを定義すればidを保存対象から無視できます.
このBaseModelを継承したToDoModelを実装します.
// ToDoModel.ts  import BaseModel from &amp;#39;./BaseModel&amp;#39;; export default class ToDoModel extends BaseModel { // タイトル  title: string; // ToDoが完了したかどうか  completed: boolean = false; constructor(userID: string, title: string, timestamp: Date) { super(userID, timestamp); this.</description>
			<content type="html"><![CDATA[<p>あきらめましょう</p>
<p>通常のKVSのようにドキュメントにオーナーのユーザIDを含めてセキュリティルールでオーナー以外を弾く設定をしましょう</p>
<p>おわり</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>っとしても良いのだけどどうせならexampleでも</p>
<p>まずベースとなるモデルを定義します.</p>
<p>このモデルをベースにモデルを作ります.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-typescript" data-lang="typescript"><span style="color:#75715e">// BaseModel.ts
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BaseModel</span> {
    <span style="color:#75715e">// ドキュメントオーナーのID
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">readonly</span> <span style="color:#a6e22e">userID</span>: <span style="color:#66d9ef">string</span>;

    <span style="color:#75715e">// ドキュメントのID
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">string</span> <span style="color:#f92672">|</span> <span style="color:#66d9ef">null</span>;

    <span style="color:#75715e">// ドキュメントの作成･更新日時
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">timestamp</span>: <span style="color:#66d9ef">Date</span>;

    <span style="color:#66d9ef">constructor</span>(<span style="color:#a6e22e">userID</span>: <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">timestamp</span>: <span style="color:#66d9ef">Date</span>) {
        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">userID</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">userID</span>;
        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">timestamp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">timestamp</span>;
    }

    <span style="color:#75715e">// Firestoreに保存するとき用
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">abstract</span> <span style="color:#a6e22e">toJSON</span>()<span style="color:#f92672">:</span> Object;
}
</code></pre></div><p><code>toJSON</code>はデータベースに保存する際に特定のプロパティのみを保存するためにあります.</p>
<p>これを定義すれば<code>id</code>を保存対象から無視できます.</p>
<p>この<code>BaseModel</code>を継承した<code>ToDoModel</code>を実装します.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-typescript" data-lang="typescript"><span style="color:#75715e">// ToDoModel.ts
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">BaseModel</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./BaseModel&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ToDoModel</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">BaseModel</span> {
    <span style="color:#75715e">// タイトル
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">title</span>: <span style="color:#66d9ef">string</span>;
    
    <span style="color:#75715e">// ToDoが完了したかどうか
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">completed</span>: <span style="color:#66d9ef">boolean</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>;

    <span style="color:#66d9ef">constructor</span>(<span style="color:#a6e22e">userID</span>: <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">title</span>: <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">timestamp</span>: <span style="color:#66d9ef">Date</span>) {
        <span style="color:#66d9ef">super</span>(<span style="color:#a6e22e">userID</span>, <span style="color:#a6e22e">timestamp</span>);

        <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">title</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">title</span>;
    }

    <span style="color:#a6e22e">toJSON</span>()<span style="color:#f92672">:</span> Object {
        <span style="color:#75715e">// NOTICE: idはfirestore上で自動で割り振られるのでわざわざデータとして格納しなくてよい
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> {
            <span style="color:#a6e22e">userID</span>: <span style="color:#66d9ef">this.userID</span>,
            <span style="color:#a6e22e">title</span>: <span style="color:#66d9ef">this.title</span>,
            <span style="color:#a6e22e">completed</span>: <span style="color:#66d9ef">this.completed</span>,
            <span style="color:#a6e22e">timestamp</span>: <span style="color:#66d9ef">this.timestamp</span>,
        };
    }
}
</code></pre></div><p>ここまで実装して重要なのは<code>userID</code>を定義しておくことです.</p>
<p>この<code>userID</code>が<code>セキュリティルール</code>でドキュメントの所有者かどうかチェックを行うのに必要になります.</p>
<p>さて次に<code>セキュリティルール</code>を定義してあげます.</p>
<p>RTDBの場合リファレンスパスは<code>/todos/$uid/&lt;todoDoc.id&gt;</code>なので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">/</span><span style="color:#960050;background-color:#1e0010">/</span> <span style="color:#960050;background-color:#1e0010">d</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">t</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">b</span><span style="color:#960050;background-color:#1e0010">a</span><span style="color:#960050;background-color:#1e0010">s</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#960050;background-color:#1e0010">r</span><span style="color:#960050;background-color:#1e0010">u</span><span style="color:#960050;background-color:#1e0010">l</span><span style="color:#960050;background-color:#1e0010">e</span><span style="color:#960050;background-color:#1e0010">s</span><span style="color:#960050;background-color:#1e0010">.</span><span style="color:#960050;background-color:#1e0010">j</span><span style="color:#960050;background-color:#1e0010">s</span><span style="color:#960050;background-color:#1e0010">o</span><span style="color:#960050;background-color:#1e0010">n</span>

{
    <span style="color:#f92672">&#34;rules&#34;</span>: {
        <span style="color:#f92672">&#34;todos&#34;</span>: {
            <span style="color:#f92672">&#34;$uid&#34;</span>: {
                <span style="color:#f92672">&#34;.read&#34;</span>: <span style="color:#e6db74">&#34;$uid === auth.uid&#34;</span>,
                <span style="color:#f92672">&#34;.write&#34;</span>: <span style="color:#e6db74">&#34;$uid === auth.uid&#34;</span>
            }
        }
    }
}
</code></pre></div><p>でドキュメントの所有者のみが閲覧･更新が可能になります.</p>
<p>つづいて,</p>
<p>Firestoreの場合はコレクションが<code>todos</code>となり,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">// firestore.rules

service cloud.firestore {
    match /databases/{database}/documents {
        match /todos/{todoID} {
            allow read, write: if get(/databases/$(database)/documents/todos/$(todoID)).userID == request.auth.uid;
        }
    }
}
</code></pre></div><p>でRTDBどうよう所有者のみが閲覧･更新が可能になります.</p>
<p>走らせる擬似コードも載せておきます. (
ブラウザで走らせるためにはやらなくてはいけないことがそれなりにあるが省略)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-typescript" data-lang="typescript"><span style="color:#75715e">// index.ts
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">import</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">as</span> <span style="color:#a6e22e">firebase</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;firebase&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;firebase/firestore&#39;</span>;

<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">ToDoModel</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./ToDoModel&#39;</span>;

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">frConfig</span> <span style="color:#f92672">=</span> {
    <span style="color:#a6e22e">apiKey</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&lt;API_KEY&gt;&#34;</span>,
    <span style="color:#a6e22e">authDomain</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&lt;PROJECT_ID&gt;.firebaseapp.com&#34;</span>,
    <span style="color:#a6e22e">databaseURL</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;https://&lt;DATABASE_NAME&gt;.firebaseio.com&#34;</span>,
    <span style="color:#a6e22e">storageBucket</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&lt;BUCKET&gt;.appspot.com&#34;</span>,
};

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">firebaseApp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">firebase</span>.<span style="color:#a6e22e">initializeApp</span>(<span style="color:#a6e22e">frConfig</span>);

<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rtdb</span>: <span style="color:#66d9ef">firebase.database.Database</span>;
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">frStore</span>: <span style="color:#66d9ef">firebase.firestore.Firestore</span>;
<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">uid</span>: <span style="color:#66d9ef">string</span>;

<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">setup</span>()<span style="color:#f92672">:</span><span style="color:#a6e22e">Promise</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">void</span><span style="color:#f92672">&gt;</span> {
    <span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">firebaseApp</span>.<span style="color:#a6e22e">auth</span>().<span style="color:#a6e22e">signInAnonymously</span>();
        <span style="color:#a6e22e">uid</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">uid</span>;
        <span style="color:#a6e22e">rtdb</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">firebaseApp</span>.<span style="color:#a6e22e">database</span>();
        <span style="color:#a6e22e">frStore</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">firebase</span>.<span style="color:#a6e22e">firestore</span>(<span style="color:#a6e22e">firebaseApp</span>);
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">resolve</span>();
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">e</span>);
    }
}

<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">rtdbCreate</span>()<span style="color:#f92672">:</span> <span style="color:#a6e22e">Promise</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">ToDoModel</span><span style="color:#f92672">&gt;</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">key</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">rtdb</span>.<span style="color:#a6e22e">ref</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">todos/</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">uid</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>).<span style="color:#a6e22e">push</span>().<span style="color:#a6e22e">key</span>;

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">todoDoc</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ToDoModel</span>(<span style="color:#a6e22e">uid</span>, <span style="color:#e6db74">&#39;🍣をたくさんたべる (๑•̀ㅂ•́)و✧&#39;</span>, <span style="color:#66d9ef">new</span> Date());
    <span style="color:#a6e22e">todoDoc</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">key</span>;

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">updates</span><span style="color:#f92672">:</span> { [<span style="color:#a6e22e">key</span>: <span style="color:#66d9ef">string</span>]<span style="color:#f92672">:</span> <span style="color:#a6e22e">any</span> } <span style="color:#f92672">=</span> {};
    <span style="color:#a6e22e">updates</span>[<span style="color:#e6db74">`</span><span style="color:#e6db74">todos/</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">uid</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">key</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">todoDoc</span>.<span style="color:#a6e22e">toJSON</span>();

    <span style="color:#66d9ef">try</span> {
        <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">rtdb</span>.<span style="color:#a6e22e">ref</span>().<span style="color:#a6e22e">update</span>(<span style="color:#a6e22e">updates</span>);
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">e</span>);
    }
    
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#a6e22e">todoDoc</span>);
}

<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">firestoreCreate</span>()<span style="color:#f92672">:</span> <span style="color:#a6e22e">Promise</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">ToDoModel</span><span style="color:#f92672">&gt;</span> {
    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">todoDoc</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">ToDoModel</span>(<span style="color:#a6e22e">uid</span>, <span style="color:#e6db74">&#39;🍣をたくさんたべる (๑•̀ㅂ•́)و✧&#39;</span>, <span style="color:#66d9ef">new</span> Date());

    <span style="color:#66d9ef">try</span> {
        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">todoDocRef</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">frStore</span>.<span style="color:#a6e22e">collection</span>(<span style="color:#e6db74">&#39;todos&#39;</span>).<span style="color:#a6e22e">add</span>(<span style="color:#a6e22e">todoDoc</span>.<span style="color:#a6e22e">toJSON</span>());
        <span style="color:#a6e22e">todoDoc</span>.<span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">todoDocRef</span>.<span style="color:#a6e22e">id</span>;
    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">e</span>) {
        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">e</span>);
    }

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">Promise</span>.<span style="color:#a6e22e">resolve</span>(<span style="color:#a6e22e">todoDoc</span>);
}

<span style="color:#a6e22e">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">main() {</span>
    <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">setup</span>();
    
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;uid: &#39;</span>, <span style="color:#a6e22e">uid</span>);

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">rtdbCreate</span>();
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result1</span>);

    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">result2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">await</span> <span style="color:#a6e22e">firestoreCreate</span>();
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">result2</span>);
}

<span style="color:#a6e22e">main</span>();

</code></pre></div><p>Firestoreのセキュリティルールに関数を定義できるの便利だけど, これテストしたいときどうするんですかね…</p>
<p>製品版に期待してFirestoreでどんどん実装していきたいと思います(๑•̀ㅂ•́)و✧</p>
]]></content>
		</item>
		
		<item>
			<title>react-nativeのpackagerが&#34;Ambiguous resolution of react-native&#34;とエラーを吐いたら試すこと</title>
			<link>https://github.pyyoshi.com/blog/2017/09/react-native%E3%81%AEpackager%E3%81%8CAmbiguous-resolution-of-react-native%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E5%90%90%E3%81%84%E3%81%9F%E3%82%89%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8/</link>
			<pubDate>Wed, 27 Sep 2017 03:36:06 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/09/react-native%E3%81%AEpackager%E3%81%8CAmbiguous-resolution-of-react-native%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E5%90%90%E3%81%84%E3%81%9F%E3%82%89%E8%A9%A6%E3%81%99%E3%81%93%E3%81%A8/</guid>
			<description>$ npm cache clean &amp;amp;&amp;amp; yarn cache clean $ watchman watch-del-all $ rm -rf node_module/ $ rm -rf ios/build/ $ npm start -- --reset-cache 上記各パターンを試す
それで解決しなかったら知らね
ちなみに一番最後の--reset-cacheのやつで私は解決した</description>
			<content type="html"><![CDATA[<pre><code>$ npm cache clean &amp;&amp; yarn cache clean
$ watchman watch-del-all
$ rm -rf node_module/
$ rm -rf ios/build/
$ npm start -- --reset-cache
</code></pre><p>上記各パターンを試す</p>
<p>それで解決しなかったら知らね</p>
<p>ちなみに一番最後の<code>--reset-cache</code>のやつで私は解決した</p>
]]></content>
		</item>
		
		<item>
			<title>XcodeでCoreFoundationなどのフレームワークのビルドに失敗した</title>
			<link>https://github.pyyoshi.com/blog/2017/09/Xcode%E3%81%A7CoreFoundation%E3%81%AA%E3%81%A9%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F/</link>
			<pubDate>Tue, 26 Sep 2017 16:40:51 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/09/Xcode%E3%81%A7CoreFoundation%E3%81%AA%E3%81%A9%E3%81%AE%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F/</guid>
			<description>Xcodeがぶっ壊れたと思って入れ直したり8.3.3に戻したりしたが治らずに利用しているモジュールの強豪が原因かと思ってしらべてみてもダメでもう諦めようかと思ったときに
Xcodeがお前のそのプロジェクト更新したるわ!ってサジェストされたので実行したら問題なく動いた／(^o^)＼
で, 何が原因かというと
そのモジュールは
IPHONEOS_DEPLOYMENT_TARGET = 7.0; で
自分のは
IPHONEOS_DEPLOYMENT_TARGET = 10.3; で食い違っていたことが原因? でした. というか7.0がだめだったくさい. 他のモジュールは8.0でも問題はありませんでした.
その時の修正がこちら
以上</description>
			<content type="html"><![CDATA[<p>Xcodeがぶっ壊れたと思って入れ直したり8.3.3に戻したりしたが治らずに利用しているモジュールの強豪が原因かと思ってしらべてみてもダメでもう諦めようかと思ったときに</p>
<p>Xcodeがお前のそのプロジェクト更新したるわ!ってサジェストされたので実行したら問題なく動いた／(^o^)＼</p>
<p>で, 何が原因かというと</p>
<p>そのモジュールは</p>
<pre><code>IPHONEOS_DEPLOYMENT_TARGET = 7.0;
</code></pre><p>で</p>
<p>自分のは</p>
<pre><code>IPHONEOS_DEPLOYMENT_TARGET = 10.3;
</code></pre><p>で食い違っていたことが原因? でした. というか<code>7.0</code>がだめだったくさい. 他のモジュールは<code>8.0</code>でも問題はありませんでした.</p>
<p>その時の修正が<a href="https://github.com/PyYoshi/react-native-google-signin/commit/34265ae9032c56401c393460e1fa9b64d7142e09">こちら</a></p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>お仕事探してます</title>
			<link>https://github.pyyoshi.com/blog/2017/08/%E3%81%8A%E4%BB%95%E4%BA%8B%E6%8E%A2%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99/</link>
			<pubDate>Mon, 07 Aug 2017 15:00:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/08/%E3%81%8A%E4%BB%95%E4%BA%8B%E6%8E%A2%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99/</guid>
			<description>追記: 2017/08/08 なんだかんだで1年ほどバタバタしていましたが, 今月よりお仕事探しを本格的にやっていきます. 以下と大体同じ内容ですがポートフォーリオも用意しています.
 現在(2017/08現在)は宮城に住んでいます.
リモート勤務または東京周辺でのお仕事を希望しています.
副業可能だととてもうれしいです.
 PythonとかGoとかJavascript(React.js)とか使える会社探し中.
バックエンドからフロントエンドまで幅広くできるので, そういう会社を探してる.
ただメインはバックエンドでサービス基盤の開発をやりたいと思ってる.
 とりあえず触れるもの一覧 言語  Go(現在のプロダクトで使ってる) Javascript(現在のプロダクトで使ってる) PHP(現在のプロダクトで使ってる) Python(Goが出るまで愛用. 今でもたまにflaskで遊んだり) Ruby(2013〜14のRailsを一年ほど. 最近はまったく)  フレームワーク Go  Gin Goa(最近これでAPI周りの設計やってる) net/http  Javascript  AngularJS(not Angular) React Native(iOS/Android)  PHP  PhalconPHP  ツール/ミドルウェアなど  Ansible(主に開発環境構築) Docker Jenkins MySQL nginx Packer(主に開発環境構築) Redis Vagrant(主に開発環境構築)  プラットフォーム  Google Cloud Platform  お仕事(過去/現在)  広告配信基盤(CMS的な部分とJSによる配信部分) リアルタイム系(Socket.ioとRailsを利用したiPad向けアプリ) ブラウザ拡張(NPAPIを利用. Chrome/Firefox) ソシャゲ攻略系アプリ(Android) EdTech(サービス)  サイトとか  Github Wantedly ポートフォーリオ  連絡先 Githubに掲載しているメールアドレス,</description>
			<content type="html"><![CDATA[<pre><code>追記: 2017/08/08

なんだかんだで1年ほどバタバタしていましたが, 今月よりお仕事探しを本格的にやっていきます.
</code></pre><p>以下と大体同じ内容ですが<a href="https://portfolio.pyyoshi.com/">ポートフォーリオ</a>も用意しています.</p>
<hr>
<p>現在(2017/08現在)は宮城に住んでいます.</p>
<p>リモート勤務または東京周辺でのお仕事を希望しています.</p>
<p>副業可能だととてもうれしいです.</p>
<hr>
<p>PythonとかGoとかJavascript(React.js)とか使える会社探し中.</p>
<p>バックエンドからフロントエンドまで幅広くできるので, そういう会社を探してる.</p>
<p>ただメインはバックエンドでサービス基盤の開発をやりたいと思ってる.</p>
<hr>
<h4 id="heading">とりあえず触れるもの一覧</h4>
<h5 id="heading-1">言語</h5>
<ul>
<li>Go(現在のプロダクトで使ってる)</li>
<li>Javascript(現在のプロダクトで使ってる)</li>
<li>PHP(現在のプロダクトで使ってる)</li>
<li>Python(Goが出るまで愛用. 今でもたまにflaskで遊んだり)</li>
<li>Ruby(2013〜14のRailsを一年ほど. 最近はまったく)</li>
</ul>
<h5 id="heading-2">フレームワーク</h5>
<h6 id="go">Go</h6>
<ul>
<li>Gin</li>
<li>Goa(最近これでAPI周りの設計やってる)</li>
<li>net/http</li>
</ul>
<h6 id="javascript">Javascript</h6>
<ul>
<li>AngularJS(not Angular)</li>
<li>React Native(iOS/Android)</li>
</ul>
<h6 id="php">PHP</h6>
<ul>
<li>PhalconPHP</li>
</ul>
<h5 id="heading-3">ツール/ミドルウェアなど</h5>
<ul>
<li>Ansible(主に開発環境構築)</li>
<li>Docker</li>
<li>Jenkins</li>
<li>MySQL</li>
<li>nginx</li>
<li>Packer(主に開発環境構築)</li>
<li>Redis</li>
<li>Vagrant(主に開発環境構築)</li>
</ul>
<h5 id="heading-4">プラットフォーム</h5>
<ul>
<li>Google Cloud Platform</li>
</ul>
<h4 id="heading-5">お仕事(過去/現在)</h4>
<ul>
<li>広告配信基盤(CMS的な部分とJSによる配信部分)</li>
<li>リアルタイム系(Socket.ioとRailsを利用したiPad向けアプリ)</li>
<li>ブラウザ拡張(NPAPIを利用. Chrome/Firefox)</li>
<li>ソシャゲ攻略系アプリ(Android)</li>
<li>EdTech(サービス)</li>
</ul>
<h4 id="heading-6">サイトとか</h4>
<ul>
<li><a href="https://github.com/PyYoshi">Github</a></li>
<li><a href="https://www.wantedly.com/users/134725">Wantedly</a></li>
<li><a href="https://portfolio.pyyoshi.com/">ポートフォーリオ</a></li>
</ul>
<h4 id="heading-7">連絡先</h4>
<p>Githubに掲載しているメールアドレス,</p>
<p>または<a href="https://www.wantedly.com/users/134725">Wantedly</a>よりお願いします.</p>
]]></content>
		</item>
		
		<item>
			<title>brotli</title>
			<link>https://github.pyyoshi.com/blog/2017/02/brotli/</link>
			<pubDate>Tue, 28 Feb 2017 09:29:30 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/02/brotli/</guid>
			<description>webpackで1つにまとめたjsファイルをbrotliの各クオリティで圧縮した時の結果
 466672 01.bro 373460 02.bro 366124 03.bro 350601 04.bro 323214 05.bro 316377 06.bro 310214 07.bro 308041 08.bro 305842 09.bro 282184 10.bro 1715473 original.js  458685 01.gz 439210 02.gz 427238 03.gz 394577 04.gz 379778 05.gz 373972 06.gz 372625 07.gz 371238 08.gz 371221 09.gz 1715473 original.js quality=1ではgzipに負けるが2以降はbrotliの圧勝
圧縮・伸長時間やそれの複数回の計測を行っていないので採用できるかどうかまだわからないけど, とりあえず採用してみるか! はありな気がしますね.
モバイルなどの品質があまり良くない環境だと強そうですね.
ただbrotliをhttp上で使うにはhttps必須なので注意が必要かと</description>
			<content type="html"><![CDATA[<p>webpackで1つにまとめたjsファイルをbrotliの各クオリティで圧縮した時の結果</p>
<pre><code> 466672       01.bro
 373460       02.bro
 366124       03.bro
 350601       04.bro
 323214       05.bro
 316377       06.bro
 310214       07.bro
 308041       08.bro
 305842       09.bro
 282184       10.bro
1715473  original.js
</code></pre><pre><code> 458685        01.gz
 439210        02.gz
 427238        03.gz
 394577        04.gz
 379778        05.gz
 373972        06.gz
 372625        07.gz
 371238        08.gz
 371221        09.gz
1715473  original.js
</code></pre><p>quality=1ではgzipに負けるが2以降はbrotliの圧勝</p>
<p>圧縮・伸長時間やそれの複数回の計測を行っていないので採用できるかどうかまだわからないけど, <code>とりあえず採用してみるか!</code> はありな気がしますね.</p>
<p>モバイルなどの品質があまり良くない環境だと強そうですね.</p>
<p>ただbrotliをhttp上で使うにはhttps必須なので注意が必要かと</p>
]]></content>
		</item>
		
		<item>
			<title>bazelでdockerコンテナを作るのつらい</title>
			<link>https://github.pyyoshi.com/blog/2017/02/bazel%E3%81%A7docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%A4%E3%82%89%E3%81%84/</link>
			<pubDate>Mon, 27 Feb 2017 04:45:13 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/02/bazel%E3%81%A7docker%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AE%E3%81%A4%E3%82%89%E3%81%84/</guid>
			<description>で, 結局</description>
			<content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>で, 結局</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>X96 TV Box(ARMv8)にArmbianなUbuntu 16.04を入れる</title>
			<link>https://github.pyyoshi.com/blog/2017/02/X96-TV-BoxARMv8%E3%81%ABArmbian%E3%81%AAUbuntu-16.04%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</link>
			<pubDate>Wed, 22 Feb 2017 01:47:04 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/02/X96-TV-BoxARMv8%E3%81%ABArmbian%E3%81%AAUbuntu-16.04%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</guid>
			<description>(2018/01/07 リンク切れを修正しました)
armv8環境が欲しかったのでお手頃な値段でそれなりのスペックなX96をgearbestで購入
http://www.gearbest.com/tv-box-mini-pc/pp_471548.html
たしか送料込みで5500円くらいだったかな
SoC: S905X RAM: 2GB STORAGE: 16GB(ただし今回はSDカードからのブートなので関係なし)
S905向けのLinuxやu-bootをすでに開発している人がいたので導入はさくっと終わりました
導入の際 付属のリモコンを利用しなくてはいけないので受信機の接続とリモコンに単4電池2本を入れて準備しておいてください(USBキーボードがある場合は必要ありません)
あと上記で察しがつくと思いますが内部ストレージへの書き込みはu-bootの更新だけでAndroidは消されないので安心してください
以下導入手順
1. u-bootを書き換える https://yadi.sk/d/bqV6MEL-sWKmv/v05
からaml_autoscript aml_autoscript.zipをDLし,
SDカードのルートにaml_autoscript aml_autoscript.zipを置く
こんなかんじ
/sdcard ├── aml_autoscript └── aml_autoscript.zip そしてSDCARDを起動しておいたX96に差し込んで
HOME -&amp;gt; Apps -&amp;gt; UPDATE&amp;amp;BACKUP と進みます
オレンジ色のAppsをクリック
右下のUPDATE&amp;amp;BACKUPをクリック
そして以下画面に映ると思います
中央右にSelectがあるのでクリックして先ほどSDCARDへ入れたaml_autoscript.zipを選択してUpdateをクリックしてウィザードに従いアップデートを行います
アップデートが完了するとX96が再起動します
これでu-bootの更新は完了です
2. Ubuntuを導入 ここからArmbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img.xzをダウンロードして展開します.
X96からSDCARDを取り外してPCへ挿入してフォーマットしてddコマンドでSDCARDへとOSイメージを書き込みます
ddコマンドに限った話じゃありませんが書き込み先のディスクを誤ると大変なことになるので不安がある人はWindowsの場合はWin32DiskImagerなどのGUIを利用することをおすすめします
今回は私はmacOSでddコマンドを利用しました
まずはdiskutil listでSDCARDのdevツリーを確認します
そして
sudo dd if=/Users/username/Downloads/Armbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img of=/dev/rdiskXXX bs=1m として書き込みました(結構時間かかるので作業の合間にやるのをおすすめします)
暇な人はCtrl-Tで進捗確認しながらでもｗ
3. Ubuntuの起動 X96の電源を落とした状態で先ほどOSイメージを書き込んだSDCARDを挿入しX96を起動します
LinuxKernelの起動ログが流れます
初回起動時にrootへパスワード1234でログインして新しいパスワードの変更と
新しいユーザの作成ウィザードが表示されるのでそれに従ってください
それが完了すると再起動されてUbuntu Mateの画面がでるかとおもいます
あとはキーボード・マウスをさして煮るなり焼くなりしてください
雑感 導入の楽さに開発者に圧倒的感謝！ :D</description>
			<content type="html"><![CDATA[<p>(2018/01/07 リンク切れを修正しました)</p>
<p>armv8環境が欲しかったのでお手頃な値段でそれなりのスペックなX96をgearbestで購入</p>
<p><a href="http://www.gearbest.com/tv-box-mini-pc/pp_471548.html">http://www.gearbest.com/tv-box-mini-pc/pp_471548.html</a></p>
<p>たしか送料込みで5500円くらいだったかな</p>
<p>SoC: S905X
RAM: 2GB
STORAGE: 16GB(ただし今回はSDカードからのブートなので関係なし)</p>
<p>S905向けのLinuxやu-bootをすでに開発している人がいたので導入はさくっと終わりました</p>
<p>導入の際 付属のリモコンを利用しなくてはいけないので受信機の接続とリモコンに単4電池2本を入れて準備しておいてください(USBキーボードがある場合は必要ありません)</p>
<p>あと上記で察しがつくと思いますが内部ストレージへの書き込みはu-bootの更新だけでAndroidは消されないので安心してください</p>
<p>以下導入手順</p>
<h1 id="1-u-boot">1. u-bootを書き換える</h1>
<p><a href="https://yadi.sk/d/bqV6MEL-sWKmv/v05">https://yadi.sk/d/bqV6MEL-sWKmv/v05</a></p>
<p>から<code>aml_autoscript</code> <code>aml_autoscript.zip</code>をDLし,</p>
<p>SDカードのルートに<code>aml_autoscript</code> <code>aml_autoscript.zip</code>を置く</p>
<p>こんなかんじ</p>
<pre><code>/sdcard
├── aml_autoscript
└── aml_autoscript.zip
</code></pre><p>そしてSDCARDを起動しておいたX96に差し込んで</p>
<p><code>HOME -&gt; Apps -&gt; UPDATE&amp;BACKUP</code> と進みます</p>
<p>オレンジ色の<code>Apps</code>をクリック</p>
<p><img src="/images/2017/02/IMG_0775-1.JPG" alt=""></p>
<p>右下の<code>UPDATE&amp;BACKUP</code>をクリック</p>
<p><img src="/images/2017/02/IMG_0776.JPG" alt=""></p>
<p>そして以下画面に映ると思います</p>
<p>中央右に<code>Select</code>があるのでクリックして先ほどSDCARDへ入れた<code>aml_autoscript.zip</code>を選択して<code>Update</code>をクリックしてウィザードに従いアップデートを行います</p>
<p><img src="/images/2017/02/IMG_0777.JPG" alt=""></p>
<p>アップデートが完了するとX96が再起動します</p>
<p>これでu-bootの更新は完了です</p>
<h1 id="2-ubuntu">2. Ubuntuを導入</h1>
<p><a href="https://yadi.sk/d/pHxaRAs-tZiei">ここ</a>から<code>Armbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img.xz</code>をダウンロードして展開します.</p>
<p>X96からSDCARDを取り外してPCへ挿入してフォーマットして<code>dd</code>コマンドでSDCARDへとOSイメージを書き込みます</p>
<p><code>dd</code>コマンドに限った話じゃありませんが書き込み先のディスクを誤ると大変なことになるので不安がある人はWindowsの場合は<code>Win32DiskImager</code>などのGUIを利用することをおすすめします</p>
<p>今回は私は<code>macOS</code>で<code>dd</code>コマンドを利用しました</p>
<p>まずは<code>diskutil list</code>でSDCARDのdevツリーを確認します</p>
<p>そして</p>
<pre><code>sudo dd if=/Users/username/Downloads/Armbian_5.37_S9xxx_Ubuntu_xenial_3.14.29_mate_20171226.img of=/dev/rdiskXXX bs=1m
</code></pre><p>として書き込みました(結構時間かかるので作業の合間にやるのをおすすめします)</p>
<p>暇な人は<code>Ctrl-T</code>で進捗確認しながらでもｗ</p>
<h1 id="3-ubuntu">3. Ubuntuの起動</h1>
<p><code>X96の電源を落とした状態</code>で先ほどOSイメージを書き込んだSDCARDを挿入しX96を起動します</p>
<p>LinuxKernelの起動ログが流れます</p>
<p>初回起動時に<code>root</code>へパスワード<code>1234</code>でログインして<code>新しいパスワード</code>の変更と</p>
<p>新しいユーザの作成ウィザードが表示されるのでそれに従ってください</p>
<p>それが完了すると再起動されてUbuntu Mateの画面がでるかとおもいます</p>
<p><img src="/images/2017/02/IMG_0780.JPG" alt=""></p>
<p><img src="/images/2017/02/IMG_0781.JPG" alt=""></p>
<p>あとはキーボード・マウスをさして煮るなり焼くなりしてください</p>
<h1 id="heading">雑感</h1>
<p>導入の楽さに開発者に圧倒的感謝！ :D</p>
<p>SDCARDからのブートなのでeMMCと比べて遅いのとSDCARDが壊れやすいのが怖いので内部ストレージへの書き込みもそのうちためしたい</p>
<p>Linux Kernelがサポート切れの3.14なのが残念だけどAmlogicが未だに4系出す出す詐欺状態なのでどうしようもないのかな(ちなみに4系でODROID-C2サポートが入り始めたので使えないことはないのかもしれない)</p>
<p>Debian Xfceは私の環境ではモニタの解像度が適切でないのかちゃんと動きませんでした</p>
<p>本来の目的は<code>cChardet</code>の<code>ARMv8</code>対応なので週末にちょっくらがんばりますかね</p>
<h1 id="heading-1">めも</h1>
<h2 id="heading-2">現在時刻の調整とタイムゾーンの変更</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo sed -i <span style="color:#e6db74">&#39;s/#NTP=/NTP=ntp.nict.jp/g&#39;</span> /etc/systemd/timesyncd.conf
$ sudo timedatectl set-timezone Asia/Tokyo
</code></pre></div><h2 id="1g">スワップを1G作成</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ sudo fallocate -l 1G /var/swap
$ ls -lah /var/swap
$ sudo chmod <span style="color:#ae81ff">600</span> /var/swap
$ sudo mkswap /var/swap
$ sudo swapon /var/swap
$ sudo swapon --show
$ sudo cp /etc/fstab /etc/fstab.bak
$ echo <span style="color:#e6db74">&#39;/var/swap none swap sw 0 0&#39;</span> | sudo tee -a /etc/fstab
</code></pre></div><h2 id="heading-3">ミラーリポジトリ</h2>
<p>/etc/apt/sources.list</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">deb http://jp.archive.ubuntu.com/ports/ xenial main restricted universe multiverse
deb http://jp.archive.ubuntu.com/ports/ xenial-security main restricted universe multiverse
deb http://jp.archive.ubuntu.com/ports/ xenial-updates main restricted universe multiverse
deb http://jp.archive.ubuntu.com/ports/ xenial-backports main restricted universe multiverse
</code></pre></div><h1 id="refs">Refs</h1>
<ul>
<li><a href="http://www.gearbest.com/tv-box-mini-pc/pp_471548.html">http://www.gearbest.com/tv-box-mini-pc/pp_471548.html</a></li>
<li><a href="https://forum.armbian.com/index.php/topic/2419-armbian-for-amlogic-s905-and-s905x/?st=0">https://forum.armbian.com/index.php/topic/2419-armbian-for-amlogic-s905-and-s905x/?st=0</a></li>
<li><a href="https://github.com/150balbes/Amlogic_s905/wiki/s905_multi_boot">https://github.com/150balbes/Amlogic_s905/wiki/s905_multi_boot</a></li>
<li><a href="http://freaktab.com/forum/tv-player-support/amlogic-based-tv-players/s905/tronsmart-ac/firmware-roms-tools-at/565449-running-linux-from-sd-card-or-usb-flash-drive-using-balbes150-method-and-files">http://freaktab.com/forum/tv-player-support/amlogic-based-tv-players/s905/tronsmart-ac/firmware-roms-tools-at/565449-running-linux-from-sd-card-or-usb-flash-drive-using-balbes150-method-and-files</a></li>
<li><a href="http://freaktab.com/forum/tv-player-support/amlogic-based-tv-players/s905/tronsmart-ac/firmware-roms-tools-at/565449-running-linux-from-sd-card-or-usb-flash-drive-using-balbes150-method-and-files">http://freaktab.com/forum/tv-player-support/amlogic-based-tv-players/s905/tronsmart-ac/firmware-roms-tools-at/565449-running-linux-from-sd-card-or-usb-flash-drive-using-balbes150-method-and-files</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>リモートワークについて</title>
			<link>https://github.pyyoshi.com/blog/2017/02/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Wed, 08 Feb 2017 07:13:09 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2017/02/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>3年弱リモートワークやってきて思ったこと
出社してやる仕事より5倍位連絡の取り合いが必要
面と向かって仕事していると相手の状態の把握がし易いけど， リモートだとそうはいかなくて抱え込むストレスの量が半端じゃない
ちゃんと仕組みを考えて， メリット・デメリットを考えてやりましょうって話ですね</description>
			<content type="html"><![CDATA[<p>3年弱リモートワークやってきて思ったこと</p>
<p>出社してやる仕事より5倍位連絡の取り合いが必要</p>
<p>面と向かって仕事していると相手の状態の把握がし易いけど， リモートだとそうはいかなくて抱え込むストレスの量が半端じゃない</p>
<p>ちゃんと仕組みを考えて， メリット・デメリットを考えてやりましょうって話ですね</p>
]]></content>
		</item>
		
		<item>
			<title>redigoのPoolとredigomockを利用する方法</title>
			<link>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Wed, 07 Dec 2016 18:20:12 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/12/redigo%E3%81%AEPool%E3%81%A8redigomock%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>redigoのredis.Poolはredis.Connとは異なりインタフェースではなく構造体として定義されています.
それとredigomockはredis.Poolを生成する機能を有していないことからぱっと見使うことができないだろうなっと判断しましたが
よくよく考えてみるとredis.Poolで利用する関数群をインタフェースとして定義すれば良いのではないかと気づきがあったので共有します.
以下Example
// service.go  package service import (...) // 省略  type RedigoPool interface { Get() redis.Conn Close() error } type ExampleService struct { pool RedigoPool // *redis.Poolを直接定義せず, RedigoPoolというインタフェースを利用する } func (s *ExampleService) HmSetWithExpire(key string, a, b int64, expireSeconds uint) (interface{}, error) { redisConn := s.pool.Get() defer redisConn.Close() redisConn.Send(&amp;#34;MULTI&amp;#34;) redisConn.Send(&amp;#34;HMSET&amp;#34;, key, &amp;#34;a&amp;#34;, a, &amp;#34;b&amp;#34;, b) redisConn.Send(&amp;#34;EXPIRE&amp;#34;, key, expireSeconds) reply, err := redisConn.Do(&amp;#34;EXEC&amp;#34;) if err != nil { return nil, err } return reply, nil } // service_test.</description>
			<content type="html"><![CDATA[<p>redigoのredis.Poolはredis.Connとは異なりインタフェースではなく構造体として定義されています.</p>
<p>それとredigomockはredis.Poolを生成する機能を有していないことからぱっと見使うことができないだろうなっと判断しましたが</p>
<p>よくよく考えてみるとredis.Poolで利用する関数群をインタフェースとして定義すれば良いのではないかと気づきがあったので共有します.</p>
<p>以下Example</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// service.go
</span><span style="color:#75715e"></span>
<span style="color:#f92672">package</span> <span style="color:#a6e22e">service</span>

<span style="color:#f92672">import</span> (<span style="color:#f92672">...</span>) <span style="color:#75715e">// 省略
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">RedigoPool</span> <span style="color:#66d9ef">interface</span> {
	<span style="color:#a6e22e">Get</span>() <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Conn</span>
	<span style="color:#a6e22e">Close</span>() <span style="color:#66d9ef">error</span>
}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">ExampleService</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">pool</span> <span style="color:#a6e22e">RedigoPool</span> <span style="color:#75715e">// *redis.Poolを直接定義せず, RedigoPoolというインタフェースを利用する
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">s</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ExampleService</span>) <span style="color:#a6e22e">HmSetWithExpire</span>(<span style="color:#a6e22e">key</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int64</span>, <span style="color:#a6e22e">expireSeconds</span> <span style="color:#66d9ef">uint</span>) (<span style="color:#66d9ef">interface</span>{}, <span style="color:#66d9ef">error</span>) {
	<span style="color:#a6e22e">redisConn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">s</span>.<span style="color:#a6e22e">pool</span>.<span style="color:#a6e22e">Get</span>()
	<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">redisConn</span>.<span style="color:#a6e22e">Close</span>()

	<span style="color:#a6e22e">redisConn</span>.<span style="color:#a6e22e">Send</span>(<span style="color:#e6db74">&#34;MULTI&#34;</span>)
	<span style="color:#a6e22e">redisConn</span>.<span style="color:#a6e22e">Send</span>(<span style="color:#e6db74">&#34;HMSET&#34;</span>, <span style="color:#a6e22e">key</span>, <span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#a6e22e">a</span>, <span style="color:#e6db74">&#34;b&#34;</span>, <span style="color:#a6e22e">b</span>)
	<span style="color:#a6e22e">redisConn</span>.<span style="color:#a6e22e">Send</span>(<span style="color:#e6db74">&#34;EXPIRE&#34;</span>, <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">expireSeconds</span>)

	<span style="color:#a6e22e">reply</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redisConn</span>.<span style="color:#a6e22e">Do</span>(<span style="color:#e6db74">&#34;EXEC&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">nil</span>, <span style="color:#a6e22e">err</span>
	}
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">reply</span>, <span style="color:#66d9ef">nil</span>
}

</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// service_test.go
</span><span style="color:#75715e"></span>
<span style="color:#f92672">package</span> <span style="color:#a6e22e">service</span>

<span style="color:#f92672">import</span> (<span style="color:#f92672">...</span>) <span style="color:#75715e">// 省略
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// redigoMockPool redigomock用RedisPool
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">redigoMockPool</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">conn</span> <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Conn</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">m</span> <span style="color:#a6e22e">redigoMockPool</span>) <span style="color:#a6e22e">Get</span>() <span style="color:#a6e22e">redis</span>.<span style="color:#a6e22e">Conn</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">conn</span>
}

<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">m</span> <span style="color:#a6e22e">redigoMockPool</span>) <span style="color:#a6e22e">Close</span>() <span style="color:#66d9ef">error</span> {
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">conn</span>.<span style="color:#a6e22e">Close</span>()
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestExampleService_HmSetWithExpire</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>) {
	<span style="color:#a6e22e">mockConn</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">redigomock</span>.<span style="color:#a6e22e">NewConn</span>()
	<span style="color:#a6e22e">mockPool</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">redigoMockPool</span>{
		<span style="color:#a6e22e">conn</span>: <span style="color:#a6e22e">mockConn</span>,
	}

	<span style="color:#a6e22e">svc</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ExampleService</span>{
		<span style="color:#a6e22e">pool</span>: <span style="color:#a6e22e">mockPool</span>,
	}

	<span style="color:#a6e22e">key</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;test-uhyouhyo!&#34;</span>
	<span style="color:#a6e22e">a</span> <span style="color:#f92672">:=</span> int64(<span style="color:#ae81ff">1</span>)
	<span style="color:#a6e22e">b</span> <span style="color:#f92672">:=</span> int64(<span style="color:#ae81ff">2</span>)
	<span style="color:#a6e22e">expireSeconds</span> <span style="color:#f92672">:=</span> uint(<span style="color:#ae81ff">3200</span>)

	<span style="color:#a6e22e">cmd1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#e6db74">&#34;MULTI&#34;</span>)
	<span style="color:#a6e22e">cmd2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#e6db74">&#34;HMSET&#34;</span>, <span style="color:#a6e22e">key</span>, <span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#a6e22e">a</span>, <span style="color:#e6db74">&#34;b&#34;</span>, <span style="color:#a6e22e">b</span>)
	<span style="color:#a6e22e">cmd3</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#e6db74">&#34;EXPIRE&#34;</span>, <span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">expireSeconds</span>)
	<span style="color:#a6e22e">cmd4</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Command</span>(<span style="color:#e6db74">&#34;EXEC&#34;</span>).<span style="color:#a6e22e">Expect</span>([]<span style="color:#66d9ef">interface</span>{}{<span style="color:#e6db74">&#34;OK&#34;</span>, <span style="color:#e6db74">&#34;OK&#34;</span>})

	<span style="color:#a6e22e">_</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">svc</span>.<span style="color:#a6e22e">HmSetWithExpire</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">expireSeconds</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">err</span>)
	}
	
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Stats</span>(<span style="color:#a6e22e">cmd1</span>); <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;Expected cmd1 to be called once but was called %d times&#34;</span>, <span style="color:#a6e22e">counter</span>)
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Stats</span>(<span style="color:#a6e22e">cmd2</span>); <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;Expected cmd2 to be called once but was called %d times&#34;</span>, <span style="color:#a6e22e">counter</span>)
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Stats</span>(<span style="color:#a6e22e">cmd3</span>); <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;Expected cmd3 to be called once but was called %d times&#34;</span>, <span style="color:#a6e22e">counter</span>)
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">counter</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">mockConn</span>.<span style="color:#a6e22e">Stats</span>(<span style="color:#a6e22e">cmd4</span>); <span style="color:#a6e22e">counter</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> {
		<span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;Expected cmd4 to be called once but was called %d times&#34;</span>, <span style="color:#a6e22e">counter</span>)
	}
}
</code></pre></div><p>上記のコードの<code>RedigoPool</code>が味噌で予めredis.Poolで利用する関数をインタフェースに定義しておけば, 割とさくっとMockを利用可能になります.</p>
<p>ちなみに<code>redis.Pool#Dial</code>で<code>redigomock.Conn</code>を取得できるようにすればいいのでは? っとおもう方もいると思いますが,</p>
<p><code>redis.Conn</code>を取得する<code>redis.Pool#Get</code>は複雑なことをやってるのでうまいこと<code>redigomock.Conn</code>を取得することができません.</p>
<h6 id="ref">Ref</h6>
<ul>
<li><a href="https://godoc.org/github.com/garyburd/redigo/redis">redigo</a></li>
<li><a href="https://godoc.org/github.com/rafaeljusto/redigomock">redigomock</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Let&#39;s encryptをnginxで利用する際の注意点</title>
			<link>https://github.pyyoshi.com/blog/2016/11/Lets-encrypt%E3%82%92nginx%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Mon, 14 Nov 2016 01:17:47 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/11/Lets-encrypt%E3%82%92nginx%E3%81%A7%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>certbot-autoを利用する. renewする際は--nginx引数を入れること. 例) $ /opt/letsencrypt/certbot-auto renew --nginx  特にrenewに関してはこの引数を追加しないとPort 443が他のプロセスで使われているから更新できない主旨のエラーが吐かれる.
digitaloceanのガイドにはこれ載ってないのだけど, ちゃんと更新できるか確認したのか疑問が残る.</description>
			<content type="html"><![CDATA[<ul>
<li>certbot-autoを利用する.</li>
<li>renewする際は<code>--nginx</code>引数を入れること. 例) <code>$ /opt/letsencrypt/certbot-auto renew --nginx</code></li>
</ul>
<p>特にrenewに関してはこの引数を追加しないとPort 443が他のプロセスで使われているから更新できない主旨のエラーが吐かれる.</p>
<p>digitaloceanのガイドにはこれ載ってないのだけど, ちゃんと更新できるか確認したのか疑問が残る.</p>
]]></content>
		</item>
		
		<item>
			<title>OGPやTwitter Cardsなどの画像解像度について</title>
			<link>https://github.pyyoshi.com/blog/2016/10/OGP%E3%82%84Twitter-Cards%E3%81%AA%E3%81%A9%E3%81%AE%E7%94%BB%E5%83%8F%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Tue, 25 Oct 2016 18:25:48 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/10/OGP%E3%82%84Twitter-Cards%E3%81%AA%E3%81%A9%E3%81%AE%E7%94%BB%E5%83%8F%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>OGPなどに対応している各サービスごとに最適な解像度が変わってくると思ったのでちょっと調査してみた.
※2016年10月26日現在
Twitter Cards | 種類 | 幅 | 高さ | サイズ | |-------------------------------|-----------|-----------|---------| | Summary Card with Large Image | 280px以上 | 150px以上 | 1MB未満 | | Photo Card(Web) | 435px以下 | 375px以下 | 1MB未満 | | Photo Card(Mobile Retinaなし) | 280px以下 | 375px以下 | 1MB未満 | | Photo Card(Mobile Retinaあり) | 560px以下 | 750px以下 | 1MB未満 | http://www.tablesgenerator.com/markdown_tables  https://dev.twitter.com/cards/types/summary-large-image https://dev.twitter.com/cards/types/photo  Facebook OGP | 種類 | 幅 | 高さ | サイズ | |------------|------------|-----------|---------| | Retina推奨 | 1200px以上 | 630px以上 | 8MB未満 | | 通常 | 600px以上 | 315px以上 | 8MB未満 | | 最小 | 200px | 200px | 8MB未満 | http://www.</description>
			<content type="html"><![CDATA[<p>OGPなどに対応している各サービスごとに最適な解像度が変わってくると思ったのでちょっと調査してみた.</p>
<p>※2016年10月26日現在</p>
<h6 id="twitter-cards">Twitter Cards</h6>
<pre><code>| 種類                          | 幅        | 高さ      | サイズ  |
|-------------------------------|-----------|-----------|---------|
| Summary Card with Large Image | 280px以上 | 150px以上 | 1MB未満 |
| Photo Card(Web)               | 435px以下 | 375px以下 | 1MB未満 |
| Photo Card(Mobile Retinaなし) | 280px以下 | 375px以下 | 1MB未満 |
| Photo Card(Mobile Retinaあり) | 560px以下 | 750px以下 | 1MB未満 |

http://www.tablesgenerator.com/markdown_tables
</code></pre><ul>
<li><a href="https://dev.twitter.com/cards/types/summary-large-image">https://dev.twitter.com/cards/types/summary-large-image</a></li>
<li><a href="https://dev.twitter.com/cards/types/photo">https://dev.twitter.com/cards/types/photo</a></li>
</ul>
<h6 id="facebook-ogp">Facebook OGP</h6>
<pre><code>| 種類       | 幅         | 高さ      | サイズ  |
|------------|------------|-----------|---------|
| Retina推奨 | 1200px以上 | 630px以上 | 8MB未満 |
| 通常       | 600px以上  | 315px以上 | 8MB未満 |
| 最小       | 200px      | 200px     | 8MB未満 |

http://www.tablesgenerator.com/markdown_tables
</code></pre><ul>
<li><a href="https://developers.facebook.com/docs/sharing/best-practices">https://developers.facebook.com/docs/sharing/best-practices</a></li>
</ul>
<h6 id="google-ogp-or-schemaorg">Google+ OGP or schema.org</h6>
<ul>
<li>
<p>幅: 400px以上</p>
</li>
<li>
<p>アスペクト比: 5(幅):2(高さ)よりも大きくならないように</p>
</li>
<li>
<p><a href="https://developers.google.com/+/web/snippet/article-rendering">https://developers.google.com/+/web/snippet/article-rendering</a></p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>slackのチャットログをお手軽バックアップ</title>
			<link>https://github.pyyoshi.com/blog/2016/10/slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%AD%E3%82%B0%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97/</link>
			<pubDate>Tue, 18 Oct 2016 01:09:16 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/10/slack%E3%81%AE%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%AD%E3%82%B0%E3%82%92%E3%81%8A%E6%89%8B%E8%BB%BD%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97/</guid>
			<description>課金していると簡単にすべてのログをエクスポートできる機能がSlackのダッシュボードに備わっているが無料版を利用しているとプライベートチャンネルなどの一部のログをエクスポートすることができない.
これではちょっと困るのでどうにかしたいと思って調べたらslack-dumpというGo製のツールが存在していたので, それをフォークして自分にあった挙動へ修正したものをリリースしました.
こちらから各プラットフォームに合わせたバイナリをダウンロードしてお使いください.
またslack-dumpを利用するにあたってAPIトークンを取得する必要があります.
こちらから取得しておいてください.
 使い方
$ slack-dump -t &amp;lt;取得したトークン&amp;gt; で閲覧可能なすべてのチャンネルのログ及びDMを取得することが可能です.
取得できる範囲はAPIトークンを生成したアカウントの権限によって変わりますので
すべて取得したい方はAdmin権限からトークンを生成することをおすすめします.</description>
			<content type="html"><![CDATA[<p>課金していると簡単にすべてのログをエクスポートできる機能がSlackの<a href="https://get.slack.help/hc/en-us/articles/201658943-Export-your-team-s-Slack-history">ダッシュボード</a>に備わっているが無料版を利用しているとプライベートチャンネルなどの一部のログをエクスポートすることができない.</p>
<p>これではちょっと困るのでどうにかしたいと思って調べたら<code>slack-dump</code>というGo製のツールが存在していたので, それをフォークして自分にあった挙動へ修正したものをリリースしました.</p>
<p><a href="https://github.com/PyYoshi/slack-dump/releases">こちら</a>から各プラットフォームに合わせたバイナリをダウンロードしてお使いください.</p>
<p>また<code>slack-dump</code>を利用するにあたってAPIトークンを取得する必要があります.</p>
<p><a href="https://api.slack.com/docs/oauth-test-tokens">こちら</a>から取得しておいてください.</p>
<hr>
<p>使い方</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ slack-dump -t &lt;取得したトークン&gt;
</code></pre></div><p>で閲覧可能なすべてのチャンネルのログ及びDMを取得することが可能です.</p>
<p>取得できる範囲はAPIトークンを生成したアカウントの権限によって変わりますので</p>
<p>すべて取得したい方はAdmin権限からトークンを生成することをおすすめします.</p>
]]></content>
		</item>
		
		<item>
			<title>[ReactJS] Server side renderingのライフサイクル</title>
			<link>https://github.pyyoshi.com/blog/2016/09/ReactJS-Server-side-rendering%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</link>
			<pubDate>Thu, 29 Sep 2016 23:19:01 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/09/ReactJS-Server-side-rendering%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB/</guid>
			<description>サーバ側で__componentWillMount__は呼ばれるがcomponentDidMountは呼ばれない.
windowなどのブラウザでしか触れないものはcomponentDidMountで行う.
という知見を得た.
そりゃそうだ…
ref: Component Specs and Lifecycle | React</description>
			<content type="html"><![CDATA[<p>サーバ側で__componentWillMount__は呼ばれるがcomponentDidMountは呼ばれない.</p>
<p><code>window</code>などのブラウザでしか触れないものはcomponentDidMountで行う.</p>
<p>という知見を得た.</p>
<p>そりゃそうだ…</p>
<p>ref: <a href="https://facebook.github.io/react/docs/component-specs.html">Component Specs and Lifecycle | React</a></p>
]]></content>
		</item>
		
		<item>
			<title>golangでstructにマッピング前にJSONの特定のプロパティの値を確認したい</title>
			<link>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</link>
			<pubDate>Tue, 13 Sep 2016 06:11:20 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/09/golang%E3%81%A7struct%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E5%89%8D%E3%81%ABJSON%E3%81%AE%E7%89%B9%E5%AE%9A%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E5%80%A4%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%9F%E3%81%84/</guid>
			<description>上記をやりたいことがたまにある.
具体的に言うと
type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; 	X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.4&amp;#34; 	Y string `json:&amp;#34;y&amp;#34;` // value: &amp;#34;123.4&amp;#34; } type DataV2 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v2&amp;#34; 	X int64 `json:&amp;#34;x&amp;#34;` // value: 123.4 	Y int64 `json:&amp;#34;y&amp;#34;` // value: 123.4 } DataV1のX, Yはstring型だが. 次バージョンのDataV2ではint64になっている.
中の構造体がバージョンごとに変わっているために振り分けをしたい!
そういう時にgithub.com/antonholmquist/jasonが役に立ちました.
極端なコードで恐縮ですが
package main import &amp;#34;github.com/antonholmquist/jason&amp;#34; type DataV1 struct { Version string `json:&amp;#34;version&amp;#34;` // value: &amp;#34;v1&amp;#34; 	X string `json:&amp;#34;x&amp;#34;` // value: &amp;#34;123.</description>
			<content type="html"><![CDATA[<p>上記をやりたいことがたまにある.</p>
<p>具体的に言うと</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-golang" data-lang="golang"><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataV1</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Version</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;version&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e">// value: &#34;v1&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">X</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;x&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: &#34;123.4&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Y</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;y&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: &#34;123.4&#34;
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataV2</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Version</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;version&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e">// value: &#34;v2&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">X</span>       <span style="color:#66d9ef">int64</span>  <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;x&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: 123.4
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Y</span>       <span style="color:#66d9ef">int64</span>  <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;y&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: 123.4
</span><span style="color:#75715e"></span>}
</code></pre></div><p>DataV1のX, Yはstring型だが. 次バージョンのDataV2ではint64になっている.</p>
<p>中の構造体がバージョンごとに変わっているために振り分けをしたい!</p>
<p>そういう時に<a href="https://github.com/antonholmquist/jason">github.com/antonholmquist/jason</a>が役に立ちました.</p>
<p>極端なコードで恐縮ですが</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-golang" data-lang="golang"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/antonholmquist/jason&#34;</span>

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataV1</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Version</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;version&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e">// value: &#34;v1&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">X</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;x&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: &#34;123.4&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Y</span>       <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;y&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: &#34;123.4&#34;
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">type</span> <span style="color:#a6e22e">DataV2</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Version</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;version&#34;</span><span style="color:#e6db74">`</span> <span style="color:#75715e">// value: &#34;v2&#34;
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">X</span>       <span style="color:#66d9ef">int64</span>  <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;x&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: 123.4
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">Y</span>       <span style="color:#66d9ef">int64</span>  <span style="color:#e6db74">`</span><span style="color:#e6db74">json:&#34;y&#34;</span><span style="color:#e6db74">`</span>       <span style="color:#75715e">// value: 123.4
</span><span style="color:#75715e"></span>}

<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">jsonDataString</span> = <span style="color:#e6db74">&#34;...&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#a6e22e">obj</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">jason</span>.<span style="color:#a6e22e">NewObjectFromBytes</span>([]byte(<span style="color:#a6e22e">jsonDataString</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#a6e22e">version</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">GetString</span>(<span style="color:#e6db74">&#34;version&#34;</span>)
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		panic(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">version</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;v1&#34;</span> {
		<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">GetString</span>(<span style="color:#e6db74">&#34;x&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			panic(<span style="color:#a6e22e">err</span>)
		}

		<span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">GetString</span>(<span style="color:#e6db74">&#34;y&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			panic(<span style="color:#a6e22e">err</span>)
		}

		<span style="color:#a6e22e">data</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">DataV1</span>{
			<span style="color:#a6e22e">Version</span>: <span style="color:#e6db74">&#34;v1&#34;</span>,
			<span style="color:#a6e22e">X</span>:       <span style="color:#a6e22e">x</span>,
			<span style="color:#a6e22e">Y</span>:       <span style="color:#a6e22e">y</span>,
		}

		<span style="color:#75715e">// do something...
</span><span style="color:#75715e"></span>
	} <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">version</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;v2&#34;</span> {
		<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">GetFloat64</span>(<span style="color:#e6db74">&#34;x&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			panic(<span style="color:#a6e22e">err</span>)
		}

		<span style="color:#a6e22e">y</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">GetFloat64</span>(<span style="color:#e6db74">&#34;y&#34;</span>)
		<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
			panic(<span style="color:#a6e22e">err</span>)
		}

		<span style="color:#a6e22e">data</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">DataV2</span>{
			<span style="color:#a6e22e">Version</span>: <span style="color:#e6db74">&#34;v2&#34;</span>,
			<span style="color:#a6e22e">X</span>:       <span style="color:#a6e22e">x</span>,
			<span style="color:#a6e22e">Y</span>:       <span style="color:#a6e22e">y</span>,
		}

		<span style="color:#75715e">// do something...
</span><span style="color:#75715e"></span>
	}
}
</code></pre></div><p>こんなかんじにいけます.</p>
<p>ただJSONが複雑な場合いちいち値を取得して自前でstructにマッピングしていくのが本当にだるくなるので, そういう場合は正規表現などでチェックするほうがいいかもしれません. (再度デシリアライズするコスト無しに簡単にリマッピングできる手段がほしい…</p>
<p>マッピング前に処理したいっていうとき以外でもさくっと値を取りたいってケースでも簡単に行えて便利ですね.</p>
<p>あとはネストされた値も簡単に取れますし何かと便利なのではないでしょうか.</p>
]]></content>
		</item>
		
		<item>
			<title>ブログ鯖の更新</title>
			<link>https://github.pyyoshi.com/blog/2016/09/%E3%83%96%E3%83%AD%E3%82%B0%E9%AF%96%E3%81%AE%E6%9B%B4%E6%96%B0/</link>
			<pubDate>Mon, 05 Sep 2016 03:44:36 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/09/%E3%83%96%E3%83%AD%E3%82%B0%E9%AF%96%E3%81%AE%E6%9B%B4%E6%96%B0/</guid>
			<description>新しいVPS鯖へ移行させた.
Ubuntu16.04にしたのでhttp2対応とブログシステムをAccelerated Mobile Pagesへ対応した.
こんな感じになる.
ちな ブログシステムはdockerコンテナで管理するようにしたので更新がだいぶ楽になった.
備忘録:
 letsencryptは現状certbot-autoで証明書を発行したほうがいい. 久しぶりにやったのでletsencrypt-autoで嵌った. nginx公式が配布しているPPAだとsite-availableやsite-enabledが使えないので注意. これも嵌った;_;  </description>
			<content type="html"><![CDATA[<p>新しいVPS鯖へ移行させた.</p>
<p>Ubuntu16.04にしたのでhttp2対応とブログシステムをAccelerated Mobile Pagesへ対応した.</p>
<p><a href="https://blog.pyyoshi.com/2016/08/20/golangnocan-zhao-du-si-pointa-tozhi-du-sinosu-du-nowei-itoka/amp/">こんな感じ</a>になる.</p>
<p>ちな ブログシステムはdockerコンテナで管理するようにしたので更新がだいぶ楽になった.</p>
<p>備忘録:</p>
<ul>
<li>letsencryptは現状certbot-autoで証明書を発行したほうがいい. 久しぶりにやったのでletsencrypt-autoで嵌った.</li>
<li>nginx公式が配布しているPPAだとsite-availableやsite-enabledが使えないので注意. これも嵌った;_;</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>golang: 関数の参照渡し(ポインタ)と値渡しと返り値の速度の違いとか</title>
			<link>https://github.pyyoshi.com/blog/2016/08/golang-%E9%96%A2%E6%95%B0%E3%81%AE%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E3%81%8B/</link>
			<pubDate>Fri, 19 Aug 2016 19:07:19 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/08/golang-%E9%96%A2%E6%95%B0%E3%81%AE%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%81%A8%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E9%81%95%E3%81%84%E3%81%A8%E3%81%8B/</guid>
			<description>引数
 でかい構造体・配列はポインタで受け取るほうが速い.  返り値
 構造体・配列のポインタを返すのは遅い  以下検証コード</description>
			<content type="html"><![CDATA[<p>引数</p>
<ul>
<li>でかい構造体・配列はポインタで受け取るほうが速い.</li>
</ul>
<p>返り値</p>
<ul>
<li>構造体・配列のポインタを返すのは遅い</li>
</ul>
<p>以下検証コード</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>react-routerのpush時に遷移先コンポネントにpropsを渡したい</title>
			<link>https://github.pyyoshi.com/blog/2016/07/react-router%E3%81%AEpush%E6%99%82%E3%81%AB%E9%81%B7%E7%A7%BB%E5%85%88%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABprops%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84/</link>
			<pubDate>Fri, 29 Jul 2016 01:01:17 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/07/react-router%E3%81%AEpush%E6%99%82%E3%81%AB%E9%81%B7%E7%A7%BB%E5%85%88%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%8D%E3%83%B3%E3%83%88%E3%81%ABprops%E3%82%92%E6%B8%A1%E3%81%97%E3%81%9F%E3%81%84/</guid>
			<description>※結論から言うとpropsを渡すことはできないが代替策はある.
 例えば, すでに遷移先で描画するためのデータを現在のページで持っている場合はそれを利用して描画を行い, 足らないデータを遷移後取得して更新したい.
こんなユースケースがあると思う.
そういう時は
push({ pathname: &amp;#39;/users/1&amp;#39;, state: { profile: { id: &amp;#39;1&amp;#39;, name: &amp;#39;PyYoshi&amp;#39;, bio: &amp;#39;Uooo&amp;#39;, iconURL: &amp;#39;http://example.com/icon.jpg&amp;#39; } } }); というように stateにオブジェクトを渡してあげる.
そうすると props.location.stateに渡したオブジェクトが格納されている.
これを利用すれば上記ユースケースへの対応を行うことができる.
参考  react-router API Doc  </description>
			<content type="html"><![CDATA[<p>※結論から言うとpropsを渡すことはできないが代替策はある.</p>
<hr>
<p>例えば, すでに遷移先で描画するためのデータを現在のページで持っている場合はそれを利用して描画を行い, 足らないデータを遷移後取得して更新したい.</p>
<p>こんなユースケースがあると思う.</p>
<p>そういう時は</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">push</span>({
  <span style="color:#a6e22e">pathname</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/users/1&#39;</span>,
  <span style="color:#a6e22e">state</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">profile</span><span style="color:#f92672">:</span> { <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;PyYoshi&#39;</span>, <span style="color:#a6e22e">bio</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Uooo&#39;</span>, <span style="color:#a6e22e">iconURL</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;http://example.com/icon.jpg&#39;</span> } }
});
</code></pre></div><p>というように <code>state</code>にオブジェクトを渡してあげる.</p>
<p>そうすると <code>props.location.state</code>に渡したオブジェクトが格納されている.</p>
<p>これを利用すれば上記ユースケースへの対応を行うことができる.</p>
<h6 id="heading">参考</h6>
<ul>
<li><a href="https://github.com/reactjs/react-router/blob/0625e7656d21863563cf59019cfc16b800b79e85/docs/API.md#pushpathorloc">react-router API Doc</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Unity 5.3.xのUnityFSの構造</title>
			<link>https://github.pyyoshi.com/blog/2016/07/Unity-5.3.x%E3%81%AEUnityFS%E3%81%AE%E6%A7%8B%E9%80%A0/</link>
			<pubDate>Sat, 16 Jul 2016 07:58:03 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/07/Unity-5.3.x%E3%81%AEUnityFS%E3%81%AE%E6%A7%8B%E9%80%A0/</guid>
			<description>Common AssetBundleヘッダー 以下を順番に処理
 signature(cstring): UnityRaw|UnityWeb|UnityFSなど. 基本的にこの3つのどれか. format_version(int32): 6など. ファイルのバージョン. unity_major_version(cstring): 5.x.xなど. unity_version(cstring): 5.3.4p6など. file_size(int64): ファイルサイズ. ciblock_size(uint32): アセット情報のサイズ. uiblock_size(uint32): lz4読み込み用アセット情報のサイズ. flags(uint32): 圧縮フラグ. compression_type: (flags &amp;amp; 0x3f) =&amp;gt; 0: なし, 1: LZMA, 2: LZ4, 3: LZ4HC, 4: LZHAM.  Block  (int32): Unknown. (int32): Unknown. (int16): Unknown.  Node  offset(int64): AssetBundleヘッダーの位置からのオフセット. size(int64): Nodeのサイズ. (int32): Unknown. name(cstring): Node名. CAB-abcdefgxxxxxなど.  5.3.3 (書きかけ)
5.3.4  Blockが格納されている箇所までseekする. file_size - ciblock_size. ciblock_size分read. 変数をblocks_containerとする. compression_typeがNONEの場合はそのままblocks_containerを利用する. 変数をblocks_containerとする.</description>
			<content type="html"><![CDATA[<h5 id="common">Common</h5>
<h6 id="assetbundle">AssetBundleヘッダー</h6>
<p>以下を順番に処理</p>
<ul>
<li><code>signature</code>(cstring): <code>UnityRaw|UnityWeb|UnityFS</code>など. 基本的にこの3つのどれか.</li>
<li><code>format_version</code>(int32): 6など. ファイルのバージョン.</li>
<li><code>unity_major_version</code>(cstring): 5.x.xなど.</li>
<li><code>unity_version</code>(cstring): 5.3.4p6など.</li>
<li><code>file_size</code>(int64): ファイルサイズ.</li>
<li><code>ciblock_size</code>(uint32): アセット情報のサイズ.</li>
<li><code>uiblock_size</code>(uint32): lz4読み込み用アセット情報のサイズ.</li>
<li><code>flags</code>(uint32): 圧縮フラグ.</li>
<li><code>compression_type</code>: (flags &amp; 0x3f) =&gt; <code>0: なし, 1: LZMA, 2: LZ4, 3: LZ4HC, 4: LZHAM</code>.</li>
</ul>
<h5 id="block">Block</h5>
<ul>
<li>(int32): Unknown.</li>
<li>(int32): Unknown.</li>
<li>(int16): Unknown.</li>
</ul>
<h5 id="node">Node</h5>
<ul>
<li><code>offset</code>(int64): AssetBundleヘッダーの位置からのオフセット.</li>
<li><code>size</code>(int64): Nodeのサイズ.</li>
<li>(int32): Unknown.</li>
<li><code>name</code>(cstring): Node名. CAB-abcdefgxxxxxなど.</li>
</ul>
<h5 id="533">5.3.3</h5>
<p>(書きかけ)</p>
<h5 id="534">5.3.4</h5>
<p><img src="/images/2016/07/----------2016-07-17-02-20-39.png" alt=""></p>
<p><img src="/images/2016/07/----------2016-07-17-02-21-08.png" alt=""></p>
<ul>
<li>Blockが格納されている箇所までseekする. <code>file_size - ciblock_size</code>.</li>
<li><code>ciblock_size</code>分read. 変数を<code>blocks_container</code>とする.</li>
<li><code>compression_type</code>が<code>NONE</code>の場合はそのまま<code>blocks_container</code>を利用する. 変数を<code>blocks_container</code>とする.</li>
<li><code>compression_type</code>が<code>NONE</code>以外の場合は更に<code>uiblock_size</code>分readして伸張する. =&gt; 変数を<code>blocks_container</code>とする.</li>
<li><code>blocks_container</code>.<code>guid</code>(16bytes): Unknown. たぶんGUID.</li>
<li><code>blocks_container</code>.<code>num_blocks</code>(int32): Blockの数.</li>
<li><code>blocks_container</code>.<code>num_blocks</code>分繰り返しBlockを処理する.</li>
<li><code>blocks_container</code>.<code>node_blocks</code>(int32): Nodeの数.</li>
<li><code>blocks_container</code>.<code>node_blocks</code>分繰り返しNodeを処理する.</li>
</ul>
<p>これで格納されているファイルの情報をパースできる.</p>
<p>ファイルを抽出する場合はAssetBundleヘッダーの最後尾へseekしたあと<code>Node.offset</code>から<code>Node.size</code>分readすればよい.</p>
<p><code>LZ4|LZ4HC</code>などの圧縮が行われている場合はそれを伸張する必要がある.</p>
<h5 id="tips">tips</h5>
<ul>
<li>big endianで処理する.</li>
<li>cstringは0x00に到達するまでreadし続ける.</li>
</ul>
<h5 id="heading">リポジトリ</h5>
<p><a href="https://github.com/PyYoshi/UnityAssetTools">https://github.com/PyYoshi/UnityAssetTools</a></p>
]]></content>
		</item>
		
		<item>
			<title>WIP: realm-jsのトランザクションが扱いづらい</title>
			<link>https://github.pyyoshi.com/blog/2016/06/WIP-realm-js%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E6%89%B1%E3%81%84%E3%81%A5%E3%82%89%E3%81%84/</link>
			<pubDate>Mon, 06 Jun 2016 00:35:24 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/06/WIP-realm-js%E3%81%AE%E3%83%88%E3%83%A9%E3%83%B3%E3%82%B6%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E6%89%B1%E3%81%84%E3%81%A5%E3%82%89%E3%81%84/</guid>
			<description>React Native上でのおはなし
現状扱いづらい部分が2点ほど.
 トランザクション内で例外が流れてもロールバックされない write内で別のモデルを処理しようとしても動かない  不便！！！ って記事書こうと思いつつ再現コード書いてたら上の問題ぜんぜん起きなかった！
なぜだ！！！！！！！！！
そのときのコード
引き続き調査するー
(2016/06/06 18:55更新)
2に関して どうやらasync/awaitでcreateとの間を挟むとだめなようだ.
たぶんだけど これと同様に1もそれに関わる問題だと思われる.
babelがどうpolyfilなコードに変換しているか調査しないとだめそう…？
該当コード
babelによる変換後のコード</description>
			<content type="html"><![CDATA[<p>React Native上でのおはなし</p>
<p>現状扱いづらい部分が2点ほど.</p>
<ol>
<li>トランザクション内で例外が流れてもロールバックされない</li>
<li>write内で別のモデルを処理しようとしても動かない</li>
</ol>
<p>不便！！！ って記事書こうと思いつつ再現コード書いてたら上の問題ぜんぜん起きなかった！</p>
<p>なぜだ！！！！！！！！！</p>
<p>そのときの<a href="https://github.com/PyYoshi/ReactNativeRealmSandbox">コード</a></p>
<p>引き続き調査するー</p>
<p>(2016/06/06 18:55更新)</p>
<p>2に関して どうやらasync/awaitでcreateとの間を挟むとだめなようだ.</p>
<p>たぶんだけど これと同様に1もそれに関わる問題だと思われる.</p>
<p>babelがどうpolyfilなコードに変換しているか調査しないとだめそう…？</p>
<p><a href="https://github.com/PyYoshi/ReactNativeRealmSandbox/blob/851a302cfedc59095529963cefef610e63001000/realm.js#L137">該当コード</a></p>
<p>babelによる変換後のコード</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>react-nativeのImageコンポーネントのURLキャッシュの挙動</title>
			<link>https://github.pyyoshi.com/blog/2016/05/react-native%E3%81%AEImage%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AEURL%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E6%8C%99%E5%8B%95/</link>
			<pubDate>Mon, 30 May 2016 23:21:18 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/05/react-native%E3%81%AEImage%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AEURL%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E6%8C%99%E5%8B%95/</guid>
			<description>割りと困ったので備忘録
Imageコンポーネントを利用すると自動でリクエストをキャッシュするようになっているのだけど, 初回リクエスト時に500を返しちゃうと以降ずっと500だと認識しちゃって正しく動作しない問題にぶち当たりました.
onError関数でエラーログを吐かせるとこんな感じに
The operation couldn’t be completed. (NSURLErrorDomain error 500.)
経緯としては
0.26以前は画像URLがリダイレクト(301||302)するものを利用していると正しく画像が読み込めないバグが有ってそれを踏んでしまい, その後0.26.2へ更新したら上記のバグが再現するようになりました.
現状Imageコンポーネントのキャッシュを削除するAPIがJavascriptでは生えてないので一度アプリを削除する必要がある.
これ開発している時に起きる分にはリセットで済むから良いのだけど, プロダクション環境で起きちゃうとユーザにアプリを再インストールする手間をかけさせちゃうから最悪だなー.
いちよトリックはあって, クエリにランダムな文字列を与えればいい.
ただ, これだと常にキャッシュされなくなってしまうので注意が必要だ…
&amp;lt;img src={/public/hoge.jpg?${Math.random()}}/&amp;gt; </description>
			<content type="html"><![CDATA[<p>割りと困ったので備忘録</p>
<p>Imageコンポーネントを利用すると自動でリクエストをキャッシュするようになっているのだけど, 初回リクエスト時に500を返しちゃうと以降ずっと500だと認識しちゃって正しく動作しない問題にぶち当たりました.</p>
<p>onError関数でエラーログを吐かせるとこんな感じに</p>
<p><code>The operation couldn’t be completed. (NSURLErrorDomain error 500.)</code></p>
<p>経緯としては</p>
<p>0.26以前は画像URLがリダイレクト(301||302)するものを利用していると正しく画像が読み込めないバグが有ってそれを踏んでしまい, その後0.26.2へ更新したら上記のバグが再現するようになりました.</p>
<p>現状Imageコンポーネントのキャッシュを削除するAPIがJavascriptでは生えてないので一度アプリを削除する必要がある.</p>
<p>これ開発している時に起きる分にはリセットで済むから良いのだけど, プロダクション環境で起きちゃうとユーザにアプリを再インストールする手間をかけさせちゃうから最悪だなー.</p>
<p>いちよトリックはあって, クエリにランダムな文字列を与えればいい.</p>
<p>ただ, これだと常にキャッシュされなくなってしまうので注意が必要だ…</p>
<pre><code>&lt;img src={/public/hoge.jpg?${Math.random()}}/&gt;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>ここ最近のGo環境</title>
			<link>https://github.pyyoshi.com/blog/2016/05/%E3%81%93%E3%81%93%E6%9C%80%E8%BF%91%E3%81%AEGo%E7%92%B0%E5%A2%83/</link>
			<pubDate>Mon, 30 May 2016 13:55:38 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/05/%E3%81%93%E3%81%93%E6%9C%80%E8%BF%91%E3%81%AEGo%E7%92%B0%E5%A2%83/</guid>
			<description>go1.6.2 vscode-go glide  を利用している.
Vimは使い慣れてないけどIntelijまで使わなくていいかなーって時にvscode-go見つけてからずっと愛用してる.
vscode-goはエディタ内でデバッグが容易なのでぜひ使ってもらいたい.
glideはgo1.5からの機能のvendoringを活かした依存関係管理ツール.
こいつのいいところはもちろん標準のvendoringをそのまま使えることにあるのだけど.
その他にプライベートリポジトリにも対応していて, 仕事関係はOSSにできない部分も結構あるのでたいへん助かっている.
glideやvscode-goの使い方などはドキュメント通りに進めれば特に難しいことはない(Go使ってるくらいなら事故解決できるよね？)ので試すだけでも価値あると思います.
あと最近気になってるのはUberが開発してるFlameGraphだろうか.
https://github.com/uber/go-torch</description>
			<content type="html"><![CDATA[<ul>
<li><a href="https://golang.org/dl/">go1.6.2</a></li>
<li><a href="https://github.com/Microsoft/vscode-go">vscode-go</a></li>
<li><a href="https://github.com/Masterminds/glide">glide</a></li>
</ul>
<p>を利用している.</p>
<p>Vimは使い慣れてないけどIntelijまで使わなくていいかなーって時にvscode-go見つけてからずっと愛用してる.</p>
<p>vscode-goはエディタ内でデバッグが容易なのでぜひ使ってもらいたい.</p>
<p>glideはgo1.5からの機能のvendoringを活かした依存関係管理ツール.</p>
<p>こいつのいいところはもちろん標準のvendoringをそのまま使えることにあるのだけど.</p>
<p>その他にプライベートリポジトリにも対応していて, 仕事関係はOSSにできない部分も結構あるのでたいへん助かっている.</p>
<p>glideやvscode-goの使い方などはドキュメント通りに進めれば特に難しいことはない(Go使ってるくらいなら事故解決できるよね？)ので試すだけでも価値あると思います.</p>
<p>あと最近気になってるのはUberが開発してるFlameGraphだろうか.</p>
<p><a href="https://github.com/uber/go-torch">https://github.com/uber/go-torch</a></p>
]]></content>
		</item>
		
		<item>
			<title>当ブログをHTTPS化</title>
			<link>https://github.pyyoshi.com/blog/2016/05/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92HTTPS%E5%8C%96/</link>
			<pubDate>Mon, 30 May 2016 06:17:15 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/05/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92HTTPS%E5%8C%96/</guid>
			<description>今更 letsencryptでここをHTTPS化した.
ついでにHTTP2.0への対応も行ってみたのだが, Firefoxではちゃんと認識するが, Chromeでは認識してくれない.
いろいろ調べたらChromeは51でNPNを廃止してALPNを利用するようになったみたいで,
サーバが使っているOpenSSLが1.0.2以降でないとALPNが利用できないために, HTTP2.0と認識してくれないみたいだ.
現状 Ubuntu 14.04ではそうそう1.0.2+が降ってこないと思うのでUbuntu16.04に更新しないといけませんね 😹</description>
			<content type="html"><![CDATA[<p>今更 letsencryptでここをHTTPS化した.</p>
<p>ついでにHTTP2.0への対応も行ってみたのだが, Firefoxではちゃんと認識するが, Chromeでは認識してくれない.</p>
<p>いろいろ調べたらChromeは51でNPNを廃止してALPNを利用するようになったみたいで,</p>
<p>サーバが使っているOpenSSLが1.0.2以降でないとALPNが利用できないために, HTTP2.0と認識してくれないみたいだ.</p>
<p>現状 Ubuntu 14.04ではそうそう1.0.2+が降ってこないと思うのでUbuntu16.04に更新しないといけませんね 😹</p>
]]></content>
		</item>
		
		<item>
			<title>reactjsとgoa</title>
			<link>https://github.pyyoshi.com/blog/2016/05/reactjs%E3%81%A8goa/</link>
			<pubDate>Sun, 22 May 2016 20:27:22 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2016/05/reactjs%E3%81%A8goa/</guid>
			<description>やっと落ち着けるフロントエンドとバックエンドに巡り会えた気がすると, 最近実感してる.
いま稼働しているのはangularjs+phalconphpなんだけど
これをreactjs+goaでリプレイスする作業を急ピッチで行ってる.
俺はreactjsとgoaを極めるぜ！</description>
			<content type="html"><![CDATA[<p>やっと落ち着けるフロントエンドとバックエンドに巡り会えた気がすると, 最近実感してる.</p>
<p>いま稼働しているのはangularjs+phalconphpなんだけど</p>
<p>これをreactjs+goaでリプレイスする作業を急ピッチで行ってる.</p>
<p>俺はreactjsとgoaを極めるぜ！</p>
]]></content>
		</item>
		
		<item>
			<title>react-native &#43; react-reduxの導入の際の注意点</title>
			<link>https://github.pyyoshi.com/blog/2015/12/react-native-react-redux%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%AE%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Fri, 11 Dec 2015 18:24:13 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/12/react-native-react-redux%E3%81%AE%E5%B0%8E%E5%85%A5%E3%81%AE%E9%9A%9B%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>現時点でのreact-native最新バージョンは0.16
このバージョンはBabel6を利用しています.
よって他の依存パッケージ react-reduxなども必然的にbabel6に対応しなくては行けません.
が, react-reduxの最新版はreact-nativeに対応しておらず, 公式では3.1.0を推奨しています. この3.1.0はBabel6に対応していません.
なので正しくjsをビルドできない可能性が出てきます.
よってreact-nativeを最新ではなくbabel5を利用している0.15.0までダウングレードを行い開発を進めていくと良いかと思います.
package.jsonは以下
&amp;quot;dependencies&amp;quot;: { &amp;quot;react-native&amp;quot;: &amp;quot;^0.15.0&amp;quot;, &amp;quot;react-redux&amp;quot;: &amp;quot;^3.1.0&amp;quot;, &amp;quot;redux&amp;quot;: &amp;quot;^3.0.4&amp;quot; } react-reduxは最新でもBabel6に対応されていないのでしばらく様子見だと思います.</description>
			<content type="html"><![CDATA[<p>現時点でのreact-native最新バージョンは0.16</p>
<p>このバージョンはBabel6を利用しています.</p>
<p>よって他の依存パッケージ react-reduxなども必然的にbabel6に対応しなくては行けません.</p>
<p>が, react-reduxの最新版はreact-nativeに対応しておらず, 公式では3.1.0を推奨しています. この3.1.0はBabel6に対応していません.</p>
<p>なので正しくjsをビルドできない可能性が出てきます.</p>
<p>よってreact-nativeを最新ではなくbabel5を利用している0.15.0までダウングレードを行い開発を進めていくと良いかと思います.</p>
<p>package.jsonは以下</p>
<pre><code>&quot;dependencies&quot;: {
  &quot;react-native&quot;: &quot;^0.15.0&quot;,
  &quot;react-redux&quot;: &quot;^3.1.0&quot;,
  &quot;redux&quot;: &quot;^3.0.4&quot;
}
</code></pre><p>react-reduxは最新でもBabel6に対応されていないのでしばらく様子見だと思います.</p>
]]></content>
		</item>
		
		<item>
			<title>ハイブリッドAppは手を出すにはまだ早い？</title>
			<link>https://github.pyyoshi.com/blog/2015/11/%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89App%E3%81%AF%E6%89%8B%E3%82%92%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E6%97%A9%E3%81%84/</link>
			<pubDate>Fri, 27 Nov 2015 22:36:44 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/11/%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89App%E3%81%AF%E6%89%8B%E3%82%92%E5%87%BA%E3%81%99%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E6%97%A9%E3%81%84/</guid>
			<description>場合によりけりではあるけどJavascript+htmlで作るものに関してはまだまだ微妙かもしれないっと最近再認識した.
Crosswalkプロジェクトが出たことで随分と端末差異をフラットにできたけど, それはAndroidだけの話でiOSでは使えない(WKWebViewで実装してるリポジトリはあるが)
結局ハイブリッドはハイブリッドでWebViewに依存しなくちゃいけないのでまじめに技術調査してからでないと辛いことになる(なった)
Appleはさっさとサードパーティ製Javascriptエンジンを組み込むのを許可してくれ まじで！
話は変わるがiOSのChromeはWebViewを独自に拡張してWebPコーデックをサポートしていたりする. なのでそのChromeで表示してやるとアプリとして立ち上げたものよりパフォーマンスがよく安定していた. Google先生 iOS版ChromeをOSS化するかCrosswalkプロジェクトにコミットしてください 頼みます.
っという愚痴日記でした
お し り</description>
			<content type="html"><![CDATA[<p>場合によりけりではあるけどJavascript+htmlで作るものに関してはまだまだ微妙かもしれないっと最近再認識した.</p>
<p>Crosswalkプロジェクトが出たことで随分と端末差異をフラットにできたけど, それはAndroidだけの話でiOSでは使えない(WKWebViewで実装してるリポジトリはあるが)</p>
<p>結局ハイブリッドはハイブリッドでWebViewに依存しなくちゃいけないのでまじめに技術調査してからでないと辛いことになる(なった)</p>
<p>Appleはさっさとサードパーティ製Javascriptエンジンを組み込むのを許可してくれ まじで！</p>
<p>話は変わるがiOSのChromeはWebViewを独自に拡張してWebPコーデックをサポートしていたりする. なのでそのChromeで表示してやるとアプリとして立ち上げたものよりパフォーマンスがよく安定していた. Google先生 iOS版ChromeをOSS化するかCrosswalkプロジェクトにコミットしてください 頼みます.</p>
<p>っという愚痴日記でした</p>
<p>お し り</p>
]]></content>
		</item>
		
		<item>
			<title>Ionic(Cordova)でiOS9のSlideOverに対応する</title>
			<link>https://github.pyyoshi.com/blog/2015/11/IonicCordova%E3%81%A7iOS9%E3%81%AESlideOver%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</link>
			<pubDate>Tue, 10 Nov 2015 16:27:03 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/11/IonicCordova%E3%81%A7iOS9%E3%81%AESlideOver%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%99%E3%82%8B/</guid>
			<description>Xcodeプロジェクト設定のGeneralでiPadの向き設定をPortrait, Upside Down, Landscape Left, Landscape Rightにチェックを入れる.
新しいLaunch Screen.storyboardを追加してGeneralのApp Icons and Launch Imagesにセット.
これでビルドするとしっかりとSlideOverできる.
SlideOverへの対応だが注意が必要なのがサイドメニューを実装した場合 常にナビゲーションに表示するかタブによる管理をしなくてはいけない.
これはタッチでスライドメニューを出そうとするとSlideOverが閉じようとしてしまうためだ.
この問題と同様に, ナビゲーションには以前のビューに戻るためのボタンも用意してあげなくてはいけない.
UI/UXで注意しなくてはいけないことが多いけど, これをしっかりすればかなり便利になるのではないでしょうか？</description>
			<content type="html"><![CDATA[<p>Xcodeプロジェクト設定のGeneralでiPadの向き設定を<code>Portrait, Upside Down, Landscape Left, Landscape Right</code>にチェックを入れる.</p>
<p>新しい<code>Launch Screen.storyboard</code>を追加してGeneralの<code>App Icons and Launch Images</code>にセット.</p>
<p>これでビルドするとしっかりとSlideOverできる.</p>
<p>SlideOverへの対応だが注意が必要なのがサイドメニューを実装した場合 常にナビゲーションに表示するかタブによる管理をしなくてはいけない.</p>
<p>これはタッチでスライドメニューを出そうとするとSlideOverが閉じようとしてしまうためだ.</p>
<p>この問題と同様に, ナビゲーションには以前のビューに戻るためのボタンも用意してあげなくてはいけない.</p>
<p>UI/UXで注意しなくてはいけないことが多いけど, これをしっかりすればかなり便利になるのではないでしょうか？</p>
]]></content>
		</item>
		
		<item>
			<title>ReactJSで作るモバイルアプリフレームワーク Reapp</title>
			<link>https://github.pyyoshi.com/blog/2015/11/ReactJS%E3%81%A7%E4%BD%9C%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Reapp/</link>
			<pubDate>Mon, 09 Nov 2015 23:09:33 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/11/ReactJS%E3%81%A7%E4%BD%9C%E3%82%8B%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Reapp/</guid>
			<description>Reapp
どんなものなのか試してみたので, アプリのビルド手順を残しておく
ビルド $ git clone https://github.com/reapp/kitchen-sink $ cd kitchen-sink $ npm install -g cordova reapp package.json をここ のdependenciesへ変更する
$ npm install iOS向けのビルド
$ reapp build ios $ mkdir cordova-ios $ cd cordova-ios $ cordova create kitchen $ cd kitchen $ cordova platform add ios $ cordova plugin add cordova-plugin-wkwebview $ cordova plugin add cordova-plugin-console $ cordova plugin add cordova-plugin-device $ cordova plugin add cordova-plugin-inappbrowser $ cordova plugin add cordova-plugin-statusbar $ rm -r www $ ln -s .</description>
			<content type="html"><![CDATA[<p><a href="http://reapp.io/">Reapp</a></p>
<p>どんなものなのか試してみたので, アプリのビルド手順を残しておく</p>
<h3 id="heading">ビルド</h3>
<pre><code>$ git clone https://github.com/reapp/kitchen-sink
$ cd kitchen-sink
$ npm install -g cordova reapp
</code></pre><p><code>package.json</code> を<a href="https://github.com/reapp/kitchen-sink/issues/9#issuecomment-112328278">ここ</a>
のdependenciesへ変更する</p>
<pre><code>$ npm install
</code></pre><p>iOS向けのビルド</p>
<pre><code>$ reapp build ios
$ mkdir cordova-ios
$ cd cordova-ios
$ cordova create kitchen
$ cd kitchen
$ cordova platform add ios
$ cordova plugin add cordova-plugin-wkwebview
$ cordova plugin add cordova-plugin-console
$ cordova plugin add cordova-plugin-device
$ cordova plugin add cordova-plugin-inappbrowser
$ cordova plugin add cordova-plugin-statusbar
$ rm -r www
$ ln -s ../../build/ios www
$ cordova prepare
</code></pre><p><code>platforms/ios/HelloCordova.xcodeproj</code>を開いて実機で実行</p>
<p>Androidは</p>
<pre><code>$ reapp build android
$ mkdir cordova-android
$ cd cordova-android
$ cordova create kitchen
$ cd kitchen
$ cordova platform add android
$ cordova plugin add cordova-plugin-wkwebview
$ cordova plugin add cordova-plugin-console
$ cordova plugin add cordova-plugin-device
$ cordova plugin add cordova-plugin-inappbrowser
$ cordova plugin add cordova-plugin-statusbar
$ rm -r www
$ ln -s ../../build/android www
$ cordova prepare
$ cordova build android
</code></pre><p><code>platforms/android/build/outputs/apk/android-debug.apk</code>をインストール</p>
<p>HelloCordovaを実機で実行</p>
<h3 id="heading-1">使用感</h3>
<p>Reappはionicに比べてパフォーマンスが良いよってドキュメントに書いてあったけど</p>
<p>それは幻想でAndroidでもっさりするのはわかるとしてもiOSでももっさりしているのは正直どうなのって印象.</p>
<p>さらにルーティング周りが相当バグっていて正しく元の位置に戻れなかったり 戻れたとしても以前のビューと混ざって描画が崩れていたりします.</p>
<p>あとは遷移アニメーションがやたら重くて, もうちょい調整したほうが良いような気がしました.</p>
<p>まだ出たばかりなので様子見状態ですが ちょこっと試してみる分には面白いと思いました</p>
]]></content>
		</item>
		
		<item>
			<title>imagemagickでメイン画像とマスク画像を綺麗に合成する</title>
			<link>https://github.pyyoshi.com/blog/2015/10/imagemagick%E3%81%A7%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E5%83%8F%E3%81%A8%E3%83%9E%E3%82%B9%E3%82%AF%E7%94%BB%E5%83%8F%E3%82%92%E7%B6%BA%E9%BA%97%E3%81%AB%E5%90%88%E6%88%90%E3%81%99%E3%82%8B/</link>
			<pubDate>Fri, 30 Oct 2015 16:59:15 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/10/imagemagick%E3%81%A7%E3%83%A1%E3%82%A4%E3%83%B3%E7%94%BB%E5%83%8F%E3%81%A8%E3%83%9E%E3%82%B9%E3%82%AF%E7%94%BB%E5%83%8F%E3%82%92%E7%B6%BA%E9%BA%97%E3%81%AB%E5%90%88%E6%88%90%E3%81%99%E3%82%8B/</guid>
			<description>スマフォゲームではアルファチャンネル付き画像はコスパが悪いため使われることは少なく メインの画像とマスク画像の2つを合成して描画することが多い. PCのシナリオゲームもそうすることが多い.
この2つの画像をうまいこと1つのアルファチャンネル付き画像に合成したい場合がある.
そういう時は以下のコマンドで想定通りの画像ができあがると思う.
参考: Partial Transparency lost on composite - ImageMagick</description>
			<content type="html"><![CDATA[<p>スマフォゲームではアルファチャンネル付き画像はコスパが悪いため使われることは少なく メインの画像とマスク画像の2つを合成して描画することが多い. PCのシナリオゲームもそうすることが多い.</p>
<p>この2つの画像をうまいこと1つのアルファチャンネル付き画像に合成したい場合がある.</p>
<p>そういう時は以下のコマンドで想定通りの画像ができあがると思う.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>参考: <a href="http://www.imagemagick.org/discourse-server/viewtopic.php?t=23956">Partial Transparency lost on composite - ImageMagick</a></p>
]]></content>
		</item>
		
		<item>
			<title>インターリンクのルーティングがごみ</title>
			<link>https://github.pyyoshi.com/blog/2015/09/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%8C%E3%81%94%E3%81%BF/</link>
			<pubDate>Tue, 15 Sep 2015 18:43:51 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/09/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%AF%E3%81%AE%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%8C%E3%81%94%E3%81%BF/</guid>
			<description>特にAWSを利用しているサービスで著しく接続がつながりにくくなったりDL速度が1KB/sになったりする
tracerouteしてみるとtwgateを経由してpingが高くなっていることもわかる
一例だが某サービスだと
台湾を経由してUSに接続しにいく始末
固定IPで利用できてお手頃な値段だからと使い始めたが値段には理由がありましたとさ</description>
			<content type="html"><![CDATA[<p>特にAWSを利用しているサービスで著しく接続がつながりにくくなったりDL速度が1KB/sになったりする</p>
<p>tracerouteしてみるとtwgateを経由してpingが高くなっていることもわかる</p>
<p>一例だが某サービスだと</p>
<p>台湾を経由してUSに接続しにいく始末</p>
<p>固定IPで利用できてお手頃な値段だからと使い始めたが値段には理由がありましたとさ</p>
]]></content>
		</item>
		
		<item>
			<title>xcode7でbitcode_strip周りでエラーが出た時の対処</title>
			<link>https://github.pyyoshi.com/blog/2015/08/xcode7%E3%81%A7bitcode_strip%E5%91%A8%E3%82%8A%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
			<pubDate>Sat, 29 Aug 2015 03:16:43 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/08/xcode7%E3%81%A7bitcode_strip%E5%91%A8%E3%82%8A%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%8C%E5%87%BA%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
			<description>Build SettingsのUser-DefinedにSTRIP_BITCODE_FROM_COPIED_FILES =NOをセットする
参考:
Xcode 7 bitcode_strip error</description>
			<content type="html"><![CDATA[<p>Build SettingsのUser-Definedに<code>STRIP_BITCODE_FROM_COPIED_FILES =NO</code>をセットする</p>
<p>参考:</p>
<p><a href="http://stackoverflow.com/questions/32071209/xcode-7-bitcode-strip-error">Xcode 7 bitcode_strip error</a></p>
]]></content>
		</item>
		
		<item>
			<title>Facebook Graph APIでemailがどうしても欲しい場合</title>
			<link>https://github.pyyoshi.com/blog/2015/08/Facebook-Graph-API%E3%81%A7email%E3%81%8C%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E3%82%82%E6%AC%B2%E3%81%97%E3%81%84%E5%A0%B4%E5%90%88/</link>
			<pubDate>Thu, 13 Aug 2015 21:24:54 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/08/Facebook-Graph-API%E3%81%A7email%E3%81%8C%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E3%82%82%E6%AC%B2%E3%81%97%E3%81%84%E5%A0%B4%E5%90%88/</guid>
			<description>auth_type=rerequest, scope=emailで再度FB認証画面へ飛ばせばよい
https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.0#re-asking-declined-permissions</description>
			<content type="html"><![CDATA[<p>auth_type=rerequest, scope=emailで再度FB認証画面へ飛ばせばよい</p>
<p><a href="https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.0#re-asking-declined-permissions">https://developers.facebook.com/docs/facebook-login/login-flow-for-web/v2.0#re-asking-declined-permissions</a></p>
]]></content>
		</item>
		
		<item>
			<title>go1.5の文字連結処理が速い</title>
			<link>https://github.pyyoshi.com/blog/2015/07/go1.5%E3%81%AE%E6%96%87%E5%AD%97%E9%80%A3%E7%B5%90%E5%87%A6%E7%90%86%E3%81%8C%E9%80%9F%E3%81%84/</link>
			<pubDate>Wed, 29 Jul 2015 23:46:45 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/07/go1.5%E3%81%AE%E6%96%87%E5%AD%97%E9%80%A3%E7%B5%90%E5%87%A6%E7%90%86%E3%81%8C%E9%80%9F%E3%81%84/</guid>
			<description>かなり長めの文字列を生成しなくてはいけなくて いろいろ調べてたのだけど
1.4とくらべて1.5では連結処理が速くなっていました.
普段 strings.Join を使ってしまう自分にはありがたい感じです.
コード
以下結果
go1.4.2
go1.5beta3
参考  Goの文字列結合のパフォーマンス  </description>
			<content type="html"><![CDATA[<p>かなり長めの文字列を生成しなくてはいけなくて いろいろ調べてたのだけど</p>
<p>1.4とくらべて1.5では連結処理が速くなっていました.</p>
<p>普段 <code>strings.Join</code> を使ってしまう自分にはありがたい感じです.</p>
<p><a href="https://gist.github.com/PyYoshi/d5bcd496ade6ec3b4b6c">コード</a></p>
<p>以下結果</p>
<p>go1.4.2</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>go1.5beta3</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h6 id="heading">参考</h6>
<ul>
<li><a href="http://qiita.com/ono_matope/items/d5e70d8a9ff2b54d5c37">Goの文字列結合のパフォーマンス</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>KB3033929のインストールが失敗する</title>
			<link>https://github.pyyoshi.com/blog/2015/04/KB3033929%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</link>
			<pubDate>Sun, 05 Apr 2015 16:25:55 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/04/KB3033929%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%8C%E5%A4%B1%E6%95%97%E3%81%99%E3%82%8B/</guid>
			<description>デュアルブートを一旦止めてからインストールすると治る</description>
			<content type="html"><![CDATA[<p>デュアルブートを一旦止めてからインストールすると治る</p>
]]></content>
		</item>
		
		<item>
			<title>SSL証明書を作成してGeoTrustへ提出</title>
			<link>https://github.pyyoshi.com/blog/2015/03/SSL%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6GeoTrust%E3%81%B8%E6%8F%90%E5%87%BA/</link>
			<pubDate>Wed, 25 Mar 2015 03:07:13 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/03/SSL%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6GeoTrust%E3%81%B8%E6%8F%90%E5%87%BA/</guid>
			<description>以下コマンドで秘密鍵・秘密鍵パスワード無し・CSRの3つを作成
$ openssl genrsa -des3 -out server.key 2048 -sha256 $ openssl req -new -sha256 -key server.key -out server.csr $ cp server.key server.nopasswd.key $ openssl rsa -in server.nopasswd.key -out server.nopasswd.key GeoTrustの管理画面へ移りReissue Certificate へ入り CSRファイルを貼り付けて送信
しばらくすると管理者アカウントのメールアドレスへ確認メールが来るので承認処理を行う
承認処理を行うとログインに利用したメールアドレス宛に鍵が2つ送られてくるので その2つを server.pem として保存
あとは肉なり焼くなり
っと書いたがnopasswordな秘密鍵は作らない方がいい.
漏れたらひとたまりもないので私は作っていない.</description>
			<content type="html"><![CDATA[<p>以下コマンドで秘密鍵・秘密鍵パスワード無し・CSRの3つを作成</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ openssl genrsa -des3 -out server.key <span style="color:#ae81ff">2048</span> -sha256

$ openssl req -new -sha256 -key server.key -out server.csr

$ cp server.key server.nopasswd.key
$ openssl rsa -in server.nopasswd.key -out server.nopasswd.key
</code></pre></div><p>GeoTrustの管理画面へ移り<code>Reissue Certificate</code> へ入り CSRファイルを貼り付けて送信</p>
<p>しばらくすると管理者アカウントのメールアドレスへ確認メールが来るので承認処理を行う</p>
<p>承認処理を行うとログインに利用したメールアドレス宛に鍵が2つ送られてくるので その2つを <code>server.pem</code> として保存</p>
<p>あとは肉なり焼くなり</p>
<p>っと書いたがnopasswordな秘密鍵は作らない方がいい.</p>
<p>漏れたらひとたまりもないので私は作っていない.</p>
]]></content>
		</item>
		
		<item>
			<title>VM環境のChromium41で起きる問題への対処</title>
			<link>https://github.pyyoshi.com/blog/2015/03/VM%E7%92%B0%E5%A2%83%E3%81%AEChromium41%E3%81%A7%E8%B5%B7%E3%81%8D%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
			<pubDate>Sat, 14 Mar 2015 18:33:02 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/03/VM%E7%92%B0%E5%A2%83%E3%81%AEChromium41%E3%81%A7%E8%B5%B7%E3%81%8D%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%B8%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
			<description>VirtualBoxやVMWare上のLinux環境でChromium41(Chrome 41含む)を利用すると マウスクリックやテキスト選択などが正しく行えない問題が起きる
Issue 465660:	Cursor functionality broken in Ubuntu 14.04 since 41
まだ修正が行われていないので現状どうしようもないのだが
回避策としては過去のバージョンを入れることで可能だ
Ubuntu14.04の場合は
google-chrome-stableはリンクからバージョン40のdebパッケージをDLしてdpkg -i する
cd /tmp $ wget http://mirror.pcbeta.com/google/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_40.0.2214.95-1_amd64.deb $ sudo dpkg -i google-chrome-stable_40.0.2214.95-1_amd64.deb 以上</description>
			<content type="html"><![CDATA[<p>VirtualBoxやVMWare上のLinux環境でChromium41(Chrome 41含む)を利用すると マウスクリックやテキスト選択などが正しく行えない問題が起きる</p>
<p><a href="https://code.google.com/p/chromium/issues/detail?id=465660">Issue 465660:	Cursor functionality broken in Ubuntu 14.04 since 41</a></p>
<p>まだ修正が行われていないので現状どうしようもないのだが</p>
<p>回避策としては過去のバージョンを入れることで可能だ</p>
<p>Ubuntu14.04の場合は</p>
<p>google-chrome-stableは<a href="">リンク</a>からバージョン40のdebパッケージをDLして<code>dpkg -i</code> する</p>
<pre><code>cd /tmp 
$ wget http://mirror.pcbeta.com/google/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_40.0.2214.95-1_amd64.deb
$ sudo dpkg -i google-chrome-stable_40.0.2214.95-1_amd64.deb
</code></pre><p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>fcitx環境のQt5.4で日本語入力できるようにする</title>
			<link>https://github.pyyoshi.com/blog/2015/03/fcitx%E7%92%B0%E5%A2%83%E3%81%AEQt5.4%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
			<pubDate>Tue, 03 Mar 2015 07:11:04 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/03/fcitx%E7%92%B0%E5%A2%83%E3%81%AEQt5.4%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
			<description>aptではなくQt Online Installerなどの公式が提供しているバイナリではfcitxを用いて日本語入力できない
これは plugins/platforminputcontexts に libfcitxplatforminputcontextplugin.so が存在しないために起きてしまう
なのでlibfcitxplatforminputcontextplugin.so を別途用意する必要がある
手順: 1 . ソースのチェックアウト $git clone https://github.com/fcitx/fcitx-qt5.git $cd fcitx-qt5 $git checkout 0.1.3 2 . ソースの編集 CMakeLists.txt の __5行目__をコメントアウト
#set(CMAKE_MODULE_PATH &amp;quot;${CMAKE_CURRENT_SOURCE_DIR}/cmake&amp;quot; ${CMAKE_MODULE_PATH})
3 . ビルド CMAKE_PREFIX_PATH にはqtインストール先を指定
$cmake . -DCMAKE_PREFIX_PATH=/home/piyopiyo/QtHome/5.4/gcc_64 $make 4 . モジュールのコピー src/libfcitxplatforminputcontextplugin.so が出来上がるので,
それを /home/piyopiyo/QtHome/5.4/gcc_64/plugins/platforminputcontexts などの plugins/platforminputcontexts へコピーする
4 . 設定 (行っていない場合) .bashrc などに export QT_IM_MODULE=fcitx を追加
P.S: なお, この問題をググって出てきた記事で  apt-get fcitx-libs-qt5 でインストールした libfcitxplatforminputcontextplugin.so をコピーするというやり方が紹介されているが
上記の5.4などのaptで提供されていないものについてはセグフォってしまうので注意が必要だ</description>
			<content type="html"><![CDATA[<p>aptではなくQt Online Installerなどの公式が提供しているバイナリではfcitxを用いて日本語入力できない</p>
<p>これは <code>plugins/platforminputcontexts</code> に <code>libfcitxplatforminputcontextplugin.so</code> が存在しないために起きてしまう</p>
<p>なので<code>libfcitxplatforminputcontextplugin.so</code> を別途用意する必要がある</p>
<h5 id="heading">手順:</h5>
<h6 id="1--">1 . ソースのチェックアウト</h6>
<pre><code>$git clone https://github.com/fcitx/fcitx-qt5.git
$cd fcitx-qt5
$git checkout 0.1.3
</code></pre><h6 id="2--">2 . ソースの編集</h6>
<p><code>CMakeLists.txt</code> の __5行目__をコメントアウト</p>
<p><code>#set(CMAKE_MODULE_PATH &quot;${CMAKE_CURRENT_SOURCE_DIR}/cmake&quot; ${CMAKE_MODULE_PATH})</code></p>
<h6 id="3--">3 . ビルド</h6>
<p><code>CMAKE_PREFIX_PATH</code> にはqtインストール先を指定</p>
<pre><code>$cmake . -DCMAKE_PREFIX_PATH=/home/piyopiyo/QtHome/5.4/gcc_64
$make
</code></pre><h6 id="4--">4 . モジュールのコピー</h6>
<p><code>src/libfcitxplatforminputcontextplugin.so</code> が出来上がるので,</p>
<p>それを <code>/home/piyopiyo/QtHome/5.4/gcc_64/plugins/platforminputcontexts</code> などの <code>plugins/platforminputcontexts</code> へコピーする</p>
<p>4 . 設定 (行っていない場合)
<code>.bashrc</code> などに <code>export QT_IM_MODULE=fcitx</code> を追加</p>
<h5 id="ps">P.S:</h5>
<p>なお, この問題をググって出てきた記事で <code> apt-get fcitx-libs-qt5</code> でインストールした <code>libfcitxplatforminputcontextplugin.so</code> をコピーするというやり方が紹介されているが</p>
<p>上記の5.4などのaptで提供されていないものについてはセグフォってしまうので注意が必要だ</p>
]]></content>
		</item>
		
		<item>
			<title>VMWareでマウス5ボタンを利用できるようにする</title>
			<link>https://github.pyyoshi.com/blog/2015/02/VMWare%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B95%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</link>
			<pubDate>Wed, 18 Feb 2015 18:16:27 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/02/VMWare%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B95%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B/</guid>
			<description>vmをシャットダウン後, vmxファイルに以下を追加
mouse.vusb.enable = &amp;quot;TRUE&amp;quot; mouse.vusb.useBasicMouse = &amp;quot;FALSE&amp;quot; usb.generic.allowHID = &amp;quot;TRUE&amp;quot; 以上</description>
			<content type="html"><![CDATA[<p>vmをシャットダウン後, vmxファイルに以下を追加</p>
<pre><code>mouse.vusb.enable = &quot;TRUE&quot;
mouse.vusb.useBasicMouse = &quot;FALSE&quot;
usb.generic.allowHID = &quot;TRUE&quot;
</code></pre><p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>Pen_Tablet.exeのメモリリーク</title>
			<link>https://github.pyyoshi.com/blog/2015/02/Pen_Tablet.exe%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF/</link>
			<pubDate>Mon, 16 Feb 2015 01:28:23 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/02/Pen_Tablet.exe%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF/</guid>
			<description>VirtualBoxを利用しているとメモリリークを起こす.
気づいたら1.3GBくらいメモリを利用してることがある.
どっちが原因なのかわからんがたぶんWacomの問題.
なのでVBox利用する場合はサービス「WTabletServiceCon」を停止すると良い.</description>
			<content type="html"><![CDATA[<p>VirtualBoxを利用しているとメモリリークを起こす.</p>
<p>気づいたら1.3GBくらいメモリを利用してることがある.</p>
<p>どっちが原因なのかわからんがたぶんWacomの問題.</p>
<p>なのでVBox利用する場合はサービス「WTabletServiceCon」を停止すると良い.</p>
]]></content>
		</item>
		
		<item>
			<title>雑記</title>
			<link>https://github.pyyoshi.com/blog/2015/01/%E9%9B%91%E8%A8%98/</link>
			<pubDate>Sun, 25 Jan 2015 16:51:24 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/%E9%9B%91%E8%A8%98/</guid>
			<description>2週間くらいVBoxでLinux使って思ったこと
Linux on VBoxでうぇっぶ開発
MBAでうぇっぶ開発
どっちもつらい
Winさんでうぇっぶ開発もっとらくにならねーかな</description>
			<content type="html"><![CDATA[<p>2週間くらいVBoxでLinux使って思ったこと</p>
<p>Linux on VBoxでうぇっぶ開発</p>
<p>MBAでうぇっぶ開発</p>
<p>どっちもつらい</p>
<p>Winさんでうぇっぶ開発もっとらくにならねーかな</p>
]]></content>
		</item>
		
		<item>
			<title>fcitxで日本語入力ができない場合</title>
			<link>https://github.pyyoshi.com/blog/2015/01/fcitx%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</link>
			<pubDate>Thu, 22 Jan 2015 06:48:46 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/fcitx%E3%81%A7%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88/</guid>
			<description>.bashrcとかに
export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=&amp;quot;@im=fcitx&amp;quot; っとする.
IntelliJ Ideaでなんか日本語入力できないなと思ったら上記だったわ…</description>
			<content type="html"><![CDATA[<p>.bashrcとかに</p>
<pre><code>export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&quot;@im=fcitx&quot;
</code></pre><p>っとする.</p>
<p>IntelliJ Ideaでなんか日本語入力できないなと思ったら上記だったわ…</p>
]]></content>
		</item>
		
		<item>
			<title>Intelのアカウント作成とINDE</title>
			<link>https://github.pyyoshi.com/blog/2015/01/Intel%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90%E3%81%A8INDE/</link>
			<pubDate>Sat, 10 Jan 2015 19:27:33 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/Intel%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E4%BD%9C%E6%88%90%E3%81%A8INDE/</guid>
			<description>割りとめんどくさかったのでメモ
https://software.intel.com/en-us/
を開いて「Joinなんちゃら」からアカウント作成ページヘ
適当に入力項目を埋めていくのだが, パスワードの項目がまじでめんどくさかった
僕は常にKeepassXでパスワード生成してるんですが, Intelの場合はそうは行かなくて手打ちでやっていかなくてはいけない.
しかもパスワードバリデータのルールが示されているのだが, どうもこれ 書かれている以上のルールがあるっぽくて30分くらいこいつとたたかった.
そんでIntelトップからログイン
で, INDEのダウンロード
https://registrationcenter.intel.com/RegCenter/AutoGen.aspx?ProductID=2329&amp;amp;AccountID=&amp;amp;EmailID=&amp;amp;ProgramID=&amp;amp;RequestDt=&amp;amp;rm=COM&amp;amp;lang=&amp;amp;pass=yes
これは先ほど作成したemailを利用しなくてはいけない
登録していないものを利用するとアカウント作成しろっと出てくる.
ここでアカウント作成しようとしてもエラーがでるので注意</description>
			<content type="html"><![CDATA[<p>割りとめんどくさかったのでメモ</p>
<p><a href="https://software.intel.com/en-us/">https://software.intel.com/en-us/</a></p>
<p>を開いて「Joinなんちゃら」からアカウント作成ページヘ</p>
<p>適当に入力項目を埋めていくのだが, パスワードの項目がまじでめんどくさかった</p>
<p>僕は常にKeepassXでパスワード生成してるんですが, Intelの場合はそうは行かなくて手打ちでやっていかなくてはいけない.</p>
<p>しかもパスワードバリデータのルールが示されているのだが, どうもこれ 書かれている以上のルールがあるっぽくて30分くらいこいつとたたかった.</p>
<p>そんでIntelトップからログイン</p>
<p>で, INDEのダウンロード</p>
<p><a href="https://registrationcenter.intel.com/RegCenter/AutoGen.aspx?ProductID=2329&amp;AccountID=&amp;EmailID=&amp;ProgramID=&amp;RequestDt=&amp;rm=COM&amp;lang=&amp;pass=yes">https://registrationcenter.intel.com/RegCenter/AutoGen.aspx?ProductID=2329&amp;AccountID=&amp;EmailID=&amp;ProgramID=&amp;RequestDt=&amp;rm=COM&amp;lang=&amp;pass=yes</a></p>
<p>これは先ほど作成したemailを利用しなくてはいけない</p>
<p>登録していないものを利用するとアカウント作成しろっと出てくる.</p>
<p>ここでアカウント作成しようとしてもエラーがでるので注意</p>
]]></content>
		</item>
		
		<item>
			<title>AngularJS 僕にはまだはやかった</title>
			<link>https://github.pyyoshi.com/blog/2015/01/AngularJS-%E5%83%95%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E3%81%AF%E3%82%84%E3%81%8B%E3%81%A3%E3%81%9F/</link>
			<pubDate>Fri, 09 Jan 2015 00:15:23 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/AngularJS-%E5%83%95%E3%81%AB%E3%81%AF%E3%81%BE%E3%81%A0%E3%81%AF%E3%82%84%E3%81%8B%E3%81%A3%E3%81%9F/</guid>
			<description>むずかしい
むずかしいよ
結構ガッツリAngularJSで書いちゃったけど, Ember.jsに変えようか検証始めてます.</description>
			<content type="html"><![CDATA[<p>むずかしい</p>
<p>むずかしいよ</p>
<p>結構ガッツリAngularJSで書いちゃったけど, Ember.jsに変えようか検証始めてます.</p>
]]></content>
		</item>
		
		<item>
			<title>Intel QSVと相性の良いAviSynth Script (TSエンコ)</title>
			<link>https://github.pyyoshi.com/blog/2015/01/Intel-QSV%E3%81%A8%E7%9B%B8%E6%80%A7%E3%81%AE%E8%89%AF%E3%81%84AviSynth-Script-TS%E3%82%A8%E3%83%B3%E3%82%B3/</link>
			<pubDate>Mon, 05 Jan 2015 00:43:50 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/Intel-QSV%E3%81%A8%E7%9B%B8%E6%80%A7%E3%81%AE%E8%89%AF%E3%81%84AviSynth-Script-TS%E3%82%A8%E3%83%B3%E3%82%B3/</guid>
			<description>QSVの速さを最大限に使いたいならインタレ保持
# メモリ最大使用量 SetMemoryMax(512) # MultiThreads対応 SetMTMode(2, 0) # MPEG読み込み v=MPEG2Source(&amp;quot;__vid__&amp;quot;) # WAV読み込み a=WAVSource(&amp;quot;__aud__&amp;quot;) # VIDEOとAUDIOの結合 AudioDub(v,a) return last または
速さはほしいけどとりあえずプログレはほしい
# メモリ最大使用量 SetMemoryMax(512) # MultiThreads対応 SetMTMode(2, 0) # MPEG読み込み v=MPEG2Source(&amp;quot;__vid__&amp;quot;) # WAV読み込み a=WAVSource(&amp;quot;__aud__&amp;quot;) # VIDEOとAUDIOの結合 AudioDub(v,a) # 24fps化 AssumeTFF() Auto24FPS(true, 24, 16, &amp;quot;&amp;quot;, false) return last そもそも品質が良い動画がほしいならx264で動画ごとにAVS書くのが普通だろう
って考え
僕の使い方だと
映画は基本インタレ保持
Fateとかのぬるぬる動くアニメもインタレ保持
動きがあまりないアニメは24fps化してます.
つかAviSynthが足引っ張りすぎ.</description>
			<content type="html"><![CDATA[<p>QSVの速さを最大限に使いたいならインタレ保持</p>
<pre><code># メモリ最大使用量
SetMemoryMax(512)
 
# MultiThreads対応
SetMTMode(2, 0)

# MPEG読み込み
v=MPEG2Source(&quot;__vid__&quot;)
# WAV読み込み
a=WAVSource(&quot;__aud__&quot;)
# VIDEOとAUDIOの結合
AudioDub(v,a)

return last
</code></pre><p>または</p>
<p>速さはほしいけどとりあえずプログレはほしい</p>
<pre><code># メモリ最大使用量
SetMemoryMax(512)
 
# MultiThreads対応
SetMTMode(2, 0)

# MPEG読み込み
v=MPEG2Source(&quot;__vid__&quot;)
# WAV読み込み
a=WAVSource(&quot;__aud__&quot;)
# VIDEOとAUDIOの結合
AudioDub(v,a)

# 24fps化
AssumeTFF()
Auto24FPS(true, 24, 16, &quot;&quot;, false)

return last
</code></pre><p>そもそも品質が良い動画がほしいならx264で動画ごとにAVS書くのが普通だろう</p>
<p>って考え</p>
<p>僕の使い方だと</p>
<p>映画は基本インタレ保持</p>
<p>Fateとかのぬるぬる動くアニメもインタレ保持</p>
<p>動きがあまりないアニメは24fps化してます.</p>
<p>つかAviSynthが足引っ張りすぎ.</p>
]]></content>
		</item>
		
		<item>
			<title>Pythonでロギング</title>
			<link>https://github.pyyoshi.com/blog/2015/01/Python%E3%81%A7%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0/</link>
			<pubDate>Sat, 03 Jan 2015 19:48:21 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/Python%E3%81%A7%E3%83%AD%E3%82%AE%E3%83%B3%E3%82%B0/</guid>
			<description>ひっさしぶりにPython触って, ちと忘れてたこと
from logging import getLogger,StreamHandler,Formatter,INFO,DEBUG logger = getLogger(__name__) handler = StreamHandler() handler.formatter = Formatter(fmt=&#39;%(asctime)s\t%(message)s&#39;, datefmt=&#39;%Y/%m/%d %H:%M:%S&#39;) handler.setLevel(DEBUG) logger.setLevel(DEBUG) logger.addHandler(handler) 複数のロガーもつ場合は関数化しましょう
以上</description>
			<content type="html"><![CDATA[<p>ひっさしぶりにPython触って, ちと忘れてたこと</p>
<pre><code>from logging import getLogger,StreamHandler,Formatter,INFO,DEBUG
logger = getLogger(__name__)
handler = StreamHandler()
handler.formatter = Formatter(fmt='%(asctime)s\t%(message)s', datefmt='%Y/%m/%d %H:%M:%S')
handler.setLevel(DEBUG)
logger.setLevel(DEBUG)
logger.addHandler(handler)
</code></pre><p>複数のロガーもつ場合は関数化しましょう</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>nginxのlocationの挙動</title>
			<link>https://github.pyyoshi.com/blog/2015/01/nginx%E3%81%AElocation%E3%81%AE%E6%8C%99%E5%8B%95/</link>
			<pubDate>Fri, 02 Jan 2015 01:35:12 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2015/01/nginx%E3%81%AElocation%E3%81%AE%E6%8C%99%E5%8B%95/</guid>
			<description>ディレクトリ構造
├── endpoint_a │ └── a │ └── index.html ├── endpoint_b │ └── b │ └── index.html └── root ├── a │ └── index.html └── index.html nginxの設定
server { server_name example.com; root /srv/example.com/public; location / { root /srv/example.com/public/root; index index.html index.htm; } location /a { root /srv/example.com/public/endpoint_a; index index.html index.htm; } location /b { root /srv/example.com/public/endpoint_b; index index.html index.htm; } } http://example.com/ にアクセスすると /srv/example.com/public/root を見る
http://example.com/a/ にアクセスすると /srv/example.com/public/endpoint_a/a を見るが /srv/example.com/public/root/a は見に行かない</description>
			<content type="html"><![CDATA[<p>ディレクトリ構造</p>
<pre><code>├── endpoint_a
│   └── a
│       └── index.html
├── endpoint_b
│   └── b
│       └── index.html
└── root
    ├── a
    │   └── index.html
    └── index.html
</code></pre><p>nginxの設定</p>
<pre><code>server {
    server_name example.com;
    root    /srv/example.com/public;

    location / {
        root    /srv/example.com/public/root;
        index   index.html index.htm;
    }

    location /a {
        root   /srv/example.com/public/endpoint_a;
        index  index.html index.htm;
    }

    location /b {
        root   /srv/example.com/public/endpoint_b;
        index  index.html index.htm;
    }
}
</code></pre><p><a href="http://example.com/">http://example.com/</a> にアクセスすると /srv/example.com/public/root を見る</p>
<p><a href="http://example.com/a/">http://example.com/a/</a> にアクセスすると /srv/example.com/public/endpoint_a/a を見るが /srv/example.com/public/root/a は見に行かない</p>
<p><a href="http://example.com/b/">http://example.com/b/</a> にアクセスすると /srv/example.com/public/endpoint_b/b を見る</p>
<p>ちょっとはまったのが/a/や/b/へアクセスするためにはaディレクトリやbディレクトリを作成してそこにドキュメントをおいてあげないとダメみたい.</p>
<p>まぁ 実際考えてみるとそうだよなぁっと</p>
]]></content>
		</item>
		
		<item>
			<title>今年の抱負</title>
			<link>https://github.pyyoshi.com/blog/2014/12/%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%8A%B1%E8%B2%A0/</link>
			<pubDate>Wed, 31 Dec 2014 06:18:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%8A%B1%E8%B2%A0/</guid>
			<description>2015年になりました.
みなさん あけおめです.
さて 今年の抱負ですが幾つか上げていきたいと思います.
今年の12月31日までにどれくらい成し遂げられるかな.
英語 言語の勉強なんてどこまでやっても際限なんてないのですが, イギリス旅行してきて自分の英語力のなさを痛感しました.
特にリスニング.
Youtubeとか映画とかニュースとかがどれだけはっきりとした発音で喋ってくれているのかわかりました.
単語を拾っていけば分かるんですが, 旅行ではいろんな人が普段のしゃべりをしてくるので単語すら拾えない状況が多かったです.
何はともあれ声に出して英語読んだり 英会話教室行ったり すこしずつですが頑張ろうかなとおもいます.
お仕事 今年はいろいろと波乱がありそう.
成長させなくてはいけないし, なにより今の仕事で食っていけるようにならなくてはいけない.
今何をしなくてはいけないのかしっかり確認し考えて行動しなくては.
実家を出る 前職辞めて半年間 家で仕事をしていたのだけど, 家族で暮らしているということもあって自分の時間を割くのが難しい時がしばしば.
だれでも集中したいときってあるよね.
環境づくりっていろいろ大切.</description>
			<content type="html"><![CDATA[<p>2015年になりました.</p>
<p>みなさん あけおめです.</p>
<p>さて 今年の抱負ですが幾つか上げていきたいと思います.</p>
<p>今年の12月31日までにどれくらい成し遂げられるかな.</p>
<h6 id="heading">英語</h6>
<p>言語の勉強なんてどこまでやっても際限なんてないのですが, イギリス旅行してきて自分の英語力のなさを痛感しました.</p>
<p>特にリスニング.</p>
<p>Youtubeとか映画とかニュースとかがどれだけはっきりとした発音で喋ってくれているのかわかりました.</p>
<p>単語を拾っていけば分かるんですが, 旅行ではいろんな人が普段のしゃべりをしてくるので単語すら拾えない状況が多かったです.</p>
<p>何はともあれ声に出して英語読んだり 英会話教室行ったり すこしずつですが頑張ろうかなとおもいます.</p>
<h6 id="heading-1">お仕事</h6>
<p>今年はいろいろと波乱がありそう.</p>
<p>成長させなくてはいけないし, なにより今の仕事で食っていけるようにならなくてはいけない.</p>
<p>今何をしなくてはいけないのかしっかり確認し考えて行動しなくては.</p>
<h6 id="heading-2">実家を出る</h6>
<p>前職辞めて半年間 家で仕事をしていたのだけど, 家族で暮らしているということもあって自分の時間を割くのが難しい時がしばしば.</p>
<p>だれでも集中したいときってあるよね.</p>
<p>環境づくりっていろいろ大切.</p>
]]></content>
		</item>
		
		<item>
			<title>2014年</title>
			<link>https://github.pyyoshi.com/blog/2014/12/2014%E5%B9%B4/</link>
			<pubDate>Tue, 30 Dec 2014 18:20:13 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/2014%E5%B9%B4/</guid>
			<description>いろいろあった気がしますが,
仕事をやめたことで昨年より精神的に疲れない年でした.
イギリス旅行はとてもよかったなー
1ヶ月も滞在するなんて一生に1度しかないかもしれません.
滞在先の方 ありがとう.
で, 今年 最大のニュースがあるのですが それはまだお話できないのが残念.
来年中頃にはお話できるといいな.
では, 良いお年を.</description>
			<content type="html"><![CDATA[<p>いろいろあった気がしますが,</p>
<p>仕事をやめたことで昨年より精神的に疲れない年でした.</p>
<p>イギリス旅行はとてもよかったなー</p>
<p>1ヶ月も滞在するなんて一生に1度しかないかもしれません.</p>
<p>滞在先の方 ありがとう.</p>
<p>で, 今年 最大のニュースがあるのですが それはまだお話できないのが残念.</p>
<p>来年中頃にはお話できるといいな.</p>
<p>では, 良いお年を.</p>
]]></content>
		</item>
		
		<item>
			<title>WindowsでUS配列を使う</title>
			<link>https://github.pyyoshi.com/blog/2014/12/Windows%E3%81%A7US%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%86/</link>
			<pubDate>Thu, 25 Dec 2014 05:23:40 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/Windows%E3%81%A7US%E9%85%8D%E5%88%97%E3%82%92%E4%BD%BF%E3%81%86/</guid>
			<description>US配列キーボードに変えたのだけど， 変更がめっちゃめんどくさかった．
つーかレイアウトごとにIME設定しなくてはいけなくて，GoogleIME使えないとか割りとあれだなっと．
そんなこんなで設定できたので備忘録
レジストリファイルを以下のように作って実行
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\i8042prt\Parameters] &amp;quot;PollingIterations&amp;quot;=dword:00002ee0 &amp;quot;PollingIterationsMaximum&amp;quot;=dword:00002ee0 &amp;quot;ResendIterations&amp;quot;=dword:00000003 &amp;quot;LayerDriver JPN&amp;quot;=&amp;quot;kbd101.dll&amp;quot; &amp;quot;LayerDriver KOR&amp;quot;=&amp;quot;kbd101a.dll&amp;quot; Google IMEのキー設定で以下の画像のように設定して再起動
これでCtrl+Spaceで直接入力かローマ字入力かの変更が可能になる．
あーめんどくせ</description>
			<content type="html"><![CDATA[<p>US配列キーボードに変えたのだけど， 変更がめっちゃめんどくさかった．</p>
<p>つーかレイアウトごとにIME設定しなくてはいけなくて，GoogleIME使えないとか割りとあれだなっと．</p>
<p>そんなこんなで設定できたので備忘録</p>
<p>レジストリファイルを以下のように作って実行</p>
<pre><code>Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\i8042prt\Parameters]
&quot;PollingIterations&quot;=dword:00002ee0
&quot;PollingIterationsMaximum&quot;=dword:00002ee0
&quot;ResendIterations&quot;=dword:00000003
&quot;LayerDriver JPN&quot;=&quot;kbd101.dll&quot;
&quot;LayerDriver KOR&quot;=&quot;kbd101a.dll&quot;
</code></pre><p>Google IMEのキー設定で以下の画像のように設定して再起動</p>
<p><img src="/images/2014/12/fdsf.png" alt=""></p>
<p>これでCtrl+Spaceで直接入力かローマ字入力かの変更が可能になる．</p>
<p>あーめんどくせ</p>
]]></content>
		</item>
		
		<item>
			<title>Radeon HD 7770からNVIDIA GTX 750Tiへ</title>
			<link>https://github.pyyoshi.com/blog/2014/12/Radeon-HD-7770%E3%81%8B%E3%82%89NVIDIA-GTX-750Ti%E3%81%B8/</link>
			<pubDate>Tue, 23 Dec 2014 19:52:59 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/Radeon-HD-7770%E3%81%8B%E3%82%89NVIDIA-GTX-750Ti%E3%81%B8/</guid>
			<description>だいたい1.5倍位性能が上がりました．
しっかし補助電源無しでこの性能出せて1.5kってコスパ良すぎるなぁ．
ベース Win7 HP 64bit Core i7 860 RAM DDR3-1333 8GB PCIe 2.0 ★Radeon HD 7770 VRAM 1GB Catalyst 14.12 AMD Catalyst Omega Software - 3D Mark P4191 - FF14 FHD 最高品質 4325 Ave. FPS 35.292 - PSO2 FHD 最高品質 6172 - Valley Extream HD FPS 13.7 Score 573 Min FPS 4.9 Max FPS 27.3 ★Nvidia 750Ti VRAM 2GB 347.09 - 3D Mark P5690 - FF14 FHD 最高品質 6614 Ave.</description>
			<content type="html"><![CDATA[<p>だいたい1.5倍位性能が上がりました．</p>
<p>しっかし補助電源無しでこの性能出せて1.5kってコスパ良すぎるなぁ．</p>
<pre><code>ベース
Win7 HP 64bit
Core i7 860
RAM DDR3-1333 8GB
PCIe 2.0

★Radeon HD 7770 VRAM 1GB
Catalyst 14.12 AMD Catalyst Omega Software

- 3D Mark
P4191

- FF14 FHD 最高品質
4325
Ave. FPS 35.292

- PSO2 FHD 最高品質
6172

- Valley Extream HD
FPS 13.7
Score 573
Min FPS 4.9
Max FPS 27.3

★Nvidia 750Ti VRAM 2GB
347.09

- 3D Mark
P5690

- FF14 FHD 最高品質
6614
Ave. FPS 55.768

- PSO2 FHD 最高品質
15379

- Valley Extream HD
FPS 21.6
Score 904
Min FPS 12.8
Max FPS 39.3
</code></pre>]]></content>
		</item>
		
		<item>
			<title>PHP</title>
			<link>https://github.pyyoshi.com/blog/2014/12/PHP/</link>
			<pubDate>Sat, 20 Dec 2014 21:04:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/PHP/</guid>
			<description>嫌よ嫌よも好きのうち
なんだかんだで1年以上PHPしてますね.
嫌いなのにね.
なんでだろうね.</description>
			<content type="html"><![CDATA[<p>嫌よ嫌よも好きのうち</p>
<p>なんだかんだで1年以上PHPしてますね.</p>
<p>嫌いなのにね.</p>
<p>なんでだろうね.</p>
]]></content>
		</item>
		
		<item>
			<title>姿勢</title>
			<link>https://github.pyyoshi.com/blog/2014/12/%E5%A7%BF%E5%8B%A2/</link>
			<pubDate>Tue, 16 Dec 2014 16:59:07 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/%E5%A7%BF%E5%8B%A2/</guid>
			<description>最近 よく咳をすると胸に激痛が走ることがあるのだけど,
調べてみると姿勢が前かがみで姿勢が悪い状態だとなるみたい.
っというのも今の環境, ベットを椅子代わりに使って仕事をしていてとても不安定.
しかも床が冷たいので足が床についていない状態なのでなおさら姿勢が悪くなっているみたいだ.
姿勢が悪いと集中力低下するわ体に不調が出るわでひどいので近いうちに改善が必要だな…
っという話</description>
			<content type="html"><![CDATA[<p>最近 よく咳をすると胸に激痛が走ることがあるのだけど,</p>
<p>調べてみると姿勢が前かがみで姿勢が悪い状態だとなるみたい.</p>
<p>っというのも今の環境, ベットを椅子代わりに使って仕事をしていてとても不安定.</p>
<p>しかも床が冷たいので足が床についていない状態なのでなおさら姿勢が悪くなっているみたいだ.</p>
<p>姿勢が悪いと集中力低下するわ体に不調が出るわでひどいので近いうちに改善が必要だな…</p>
<p>っという話</p>
]]></content>
		</item>
		
		<item>
			<title>PeerCastIM-Mod</title>
			<link>https://github.pyyoshi.com/blog/2014/12/PeerCastIM-Mod/</link>
			<pubDate>Tue, 16 Dec 2014 06:50:34 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/PeerCastIM-Mod/</guid>
			<description>Linux環境でui/linux及びui/qt4は正常に動作してる模様
いちよFLV配信の再生までは確認した.
MKV(HEVC)配信はmplayerの都合で音声のみ再生確認できた.
というか, Linux環境ではmplayer2で視聴したほうがよさげ.
VLCは再生までにやたら時間かかる…
あとはui/qt4のリリースビルドだとEnabledボタンを押すと落ちる問題を解決できれば満足だなぁ…
っつーわけでpcyplite的なやつをgolangとqmlで作りはじめようとおもう.
今のところ公開予定はないけども.</description>
			<content type="html"><![CDATA[<p>Linux環境でui/linux及びui/qt4は正常に動作してる模様</p>
<p>いちよFLV配信の再生までは確認した.</p>
<p>MKV(HEVC)配信はmplayerの都合で音声のみ再生確認できた.</p>
<p>というか, Linux環境ではmplayer2で視聴したほうがよさげ.</p>
<p>VLCは再生までにやたら時間かかる…</p>
<p>あとはui/qt4のリリースビルドだとEnabledボタンを押すと落ちる問題を解決できれば満足だなぁ…</p>
<p>っつーわけでpcyplite的なやつをgolangとqmlで作りはじめようとおもう.</p>
<p>今のところ公開予定はないけども.</p>
]]></content>
		</item>
		
		<item>
			<title>a</title>
			<link>https://github.pyyoshi.com/blog/2014/12/a/</link>
			<pubDate>Sun, 07 Dec 2014 22:08:55 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/a/</guid>
			<description>そろそろアレします
以上</description>
			<content type="html"><![CDATA[<p>そろそろアレします</p>
<p>以上</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>PeerCastIM4LinuxをPeerCastIM-Modへリネーム</title>
			<link>https://github.pyyoshi.com/blog/2014/12/PeerCastIM4Linux%E3%82%92PeerCastIM-Mod%E3%81%B8%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0/</link>
			<pubDate>Thu, 04 Dec 2014 20:47:55 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/PeerCastIM4Linux%E3%82%92PeerCastIM-Mod%E3%81%B8%E3%83%AA%E3%83%8D%E3%83%BC%E3%83%A0/</guid>
			<description>タイトル通り変更しました
なのでURLも変更になります.
https://github.com/PyYoshi/PeerCastIM-Mod
よろしくです.</description>
			<content type="html"><![CDATA[<p>タイトル通り変更しました</p>
<p>なのでURLも変更になります.</p>
<p><a href="https://github.com/PyYoshi/PeerCastIM-Mod">https://github.com/PyYoshi/PeerCastIM-Mod</a></p>
<p>よろしくです.</p>
]]></content>
		</item>
		
		<item>
			<title>OSXでCore Dumpを拾う</title>
			<link>https://github.pyyoshi.com/blog/2014/12/OSX%E3%81%A7Core-Dump%E3%82%92%E6%8B%BE%E3%81%86/</link>
			<pubDate>Tue, 02 Dec 2014 07:31:57 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/12/OSX%E3%81%A7Core-Dump%E3%82%92%E6%8B%BE%E3%81%86/</guid>
			<description>以下を実行
ulimit -c unlimited /cores/ にダンプファイルがPID名つきで出来る</description>
			<content type="html"><![CDATA[<p>以下を実行</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ulimit -c unlimited
</code></pre></div><pre><code>/cores/
</code></pre><p>にダンプファイルがPID名つきで出来る</p>
]]></content>
		</item>
		
		<item>
			<title>Marvericksでqmakeコマンドするとでるエラー</title>
			<link>https://github.pyyoshi.com/blog/2014/11/Marvericks%E3%81%A7qmake%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B%E3%81%A8%E3%81%A7%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC/</link>
			<pubDate>Sun, 30 Nov 2014 21:26:40 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/11/Marvericks%E3%81%A7qmake%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B%E3%81%A8%E3%81%A7%E3%82%8B%E3%82%A8%E3%83%A9%E3%83%BC/</guid>
			<description>$ qmake Project ERROR: Could not resolve SDK path for &amp;#39;macosx10.8&amp;#39; となるエラーが起きた場合
Qt SDKの
Qt/5.3/clang_64/mkspecs/qdevice.pri の
!host_build:QMAKE_MAC_SDK = macosx10.8 を
!host_build:QMAKE_MAC_SDK = macosx10.9 するとよい
参考
 Stack Overflow  </description>
			<content type="html"><![CDATA[<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ qmake
Project ERROR: Could not resolve SDK path <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;macosx10.8&#39;</span>
</code></pre></div><p>となるエラーが起きた場合</p>
<p>Qt SDKの</p>
<pre><code>Qt/5.3/clang_64/mkspecs/qdevice.pri
</code></pre><p>の</p>
<pre><code>!host_build:QMAKE_MAC_SDK = macosx10.8
</code></pre><p>を</p>
<pre><code>!host_build:QMAKE_MAC_SDK = macosx10.9
</code></pre><p>するとよい</p>
<p>参考</p>
<ul>
<li><a href="http://stackoverflow.com/questions/25940368/qt5-target-conditionals-not-found">Stack Overflow</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>モチベーションを上げる</title>
			<link>https://github.pyyoshi.com/blog/2014/11/%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%B8%8A%E3%81%92%E3%82%8B/</link>
			<pubDate>Sun, 30 Nov 2014 20:15:42 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/11/%E3%83%A2%E3%83%81%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%B8%8A%E3%81%92%E3%82%8B/</guid>
			<description>モチベーションを上げるために多少の犠牲は必要だなとおもってJSで書いてたものをTypeScriptで書きなおしたらめっちょ上がったんだけど,
そのあと操作ミスで一週間分のコードが吹っ飛んだので思い切ったことをするときはいろいろ覚悟が必要なのだなー
みつを</description>
			<content type="html"><![CDATA[<p>モチベーションを上げるために多少の犠牲は必要だなとおもってJSで書いてたものをTypeScriptで書きなおしたらめっちょ上がったんだけど,</p>
<p>そのあと操作ミスで一週間分のコードが吹っ飛んだので思い切ったことをするときはいろいろ覚悟が必要なのだなー</p>
<p>みつを</p>
]]></content>
		</item>
		
		<item>
			<title>金欠</title>
			<link>https://github.pyyoshi.com/blog/2014/11/%E9%87%91%E6%AC%A0/</link>
			<pubDate>Sat, 29 Nov 2014 17:51:57 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/11/%E9%87%91%E6%AC%A0/</guid>
			<description>そろそろ貯金が底につきそうだ
定期的に収入を確保しないと厳しい
厳しいのだ</description>
			<content type="html"><![CDATA[<p>そろそろ貯金が底につきそうだ</p>
<p>定期的に収入を確保しないと厳しい</p>
<p>厳しいのだ</p>
]]></content>
		</item>
		
		<item>
			<title>P55-SD60なM/BのBIOSを更新</title>
			<link>https://github.pyyoshi.com/blog/2014/11/P55-SD60%E3%81%AAM/B%E3%81%AEBIOS%E3%82%92%E6%9B%B4%E6%96%B0/</link>
			<pubDate>Thu, 27 Nov 2014 06:27:04 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/11/P55-SD60%E3%81%AAM/B%E3%81%AEBIOS%E3%82%92%E6%9B%B4%E6%96%B0/</guid>
			<description>P55-GD65のBIOSを利用することができるのだけど, ただダウンロードしただけではM-FLASH経由でアップデートできない.
っというのも「A7583IM0」っというPREFIX以外受け付けないようになっているからだ.
なので1.Bなら「A7583IMS.1B0」から「A7583IM0.1B0」っとファイル名を変更してM-FLASHに食わせればおk
あと, BIOSの設定を初期化して改めて設定し直せば終わり</description>
			<content type="html"><![CDATA[<p>P55-GD65のBIOSを利用することができるのだけど, ただダウンロードしただけではM-FLASH経由でアップデートできない.</p>
<p>っというのも「A7583IM0」っというPREFIX以外受け付けないようになっているからだ.</p>
<p>なので1.Bなら「A7583IMS.1B0」から「A7583IM0.1B0」っとファイル名を変更してM-FLASHに食わせればおk</p>
<p>あと, BIOSの設定を初期化して改めて設定し直せば終わり</p>
]]></content>
		</item>
		
		<item>
			<title>ブラック会社に勤めてるんだが、もう俺は限界かもしれない</title>
			<link>https://github.pyyoshi.com/blog/2014/10/%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E4%BC%9A%E7%A4%BE%E3%81%AB%E5%8B%A4%E3%82%81%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A0%E3%81%8C%E3%82%82%E3%81%86%E4%BF%BA%E3%81%AF%E9%99%90%E7%95%8C%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</link>
			<pubDate>Sat, 18 Oct 2014 02:00:12 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/10/%E3%83%96%E3%83%A9%E3%83%83%E3%82%AF%E4%BC%9A%E7%A4%BE%E3%81%AB%E5%8B%A4%E3%82%81%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A0%E3%81%8C%E3%82%82%E3%81%86%E4%BF%BA%E3%81%AF%E9%99%90%E7%95%8C%E3%81%8B%E3%82%82%E3%81%97%E3%82%8C%E3%81%AA%E3%81%84/</guid>
			<description>面白おかしく作ってるらしいのだが
どうも面白くなくて心が痛くなるかんじばかり
というのも前職 入社してすぐに2週間ほど炎上案件に突っ込まれた挙句 家にそんなに帰れなくてやみまくった経験をしたから</description>
			<content type="html"><![CDATA[<p>面白おかしく作ってるらしいのだが</p>
<p>どうも面白くなくて心が痛くなるかんじばかり</p>
<p>というのも前職 入社してすぐに2週間ほど炎上案件に突っ込まれた挙句 家にそんなに帰れなくてやみまくった経験をしたから</p>
]]></content>
		</item>
		
		<item>
			<title>.hack//で思い出した</title>
			<link>https://github.pyyoshi.com/blog/2014/10/.hack/%E3%81%A7%E6%80%9D%E3%81%84%E5%87%BA%E3%81%97%E3%81%9F/</link>
			<pubDate>Tue, 14 Oct 2014 03:41:50 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/10/.hack/%E3%81%A7%E6%80%9D%E3%81%84%E5%87%BA%E3%81%97%E3%81%9F/</guid>
			<description>The Worldっていうゲームが海外で開発されてます.
実際にプレイしたことはないのですがRift対応してたり
音楽が.hackぽかったり, Unityで作られているのかクオリティがそれなりだったりします.
40ドル寄付すればクローズドでプレイ出来たと思います.
気になる方はこちらを</description>
			<content type="html"><![CDATA[<p>The Worldっていうゲームが海外で開発されてます.</p>
<p>実際にプレイしたことはないのですがRift対応してたり</p>
<p>音楽が.hackぽかったり, Unityで作られているのかクオリティがそれなりだったりします.</p>
<p>40ドル寄付すればクローズドでプレイ出来たと思います.</p>
<p>気になる方は<a href="http://www.iridiumbased.com/">こちら</a>を</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>.hack//</title>
			<link>https://github.pyyoshi.com/blog/2014/10/.hack/</link>
			<pubDate>Mon, 13 Oct 2014 19:01:12 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/10/.hack/</guid>
			<description>Rift2あるし触覚も何とかなりそうな所まで来てるし, そろそろThe Worldも実現できるんじゃないかなって思ってる.</description>
			<content type="html"><![CDATA[<p>Rift2あるし触覚も何とかなりそうな所まで来てるし, そろそろThe Worldも実現できるんじゃないかなって思ってる.</p>
]]></content>
		</item>
		
		<item>
			<title>CyanogenModのリポジトリをミラーする</title>
			<link>https://github.pyyoshi.com/blog/2014/10/CyanogenMod%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%83%9F%E3%83%A9%E3%83%BC%E3%81%99%E3%82%8B/</link>
			<pubDate>Sat, 04 Oct 2014 07:16:47 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/10/CyanogenMod%E3%81%AE%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%83%9F%E3%83%A9%E3%83%BC%E3%81%99%E3%82%8B/</guid>
			<description>めも
1.AOSPリポジトリのミラー $ mkdir -p ~/Android/mirrors/aosp $ cd ~/Android/mirrors/aosp $ repo init -u https://android.googlesource.com/mirror/manifest --mirror $ repo sync 2. CyanogenModリポジトリのミラー $ mkdir -p ~/Android/mirrors/cyanogenmod $ cd ~/Android/mirrors/cyanogenmod $ repo init -u https://github.com/CyanogenMod/android.git -b cm-11.0 --mirror --reference=~/Android/mirrors/aosp $ repo sync 3. ミラーレポジトリから利用する $ mkdir -p ~/Android/dev_cm $ cd ~/Android/dev_cm $ repo init -u ~/Android/mirrors/cyanogenmod -b cm-11.0 –reference=~/Android/mirrors/cyanogenmod 各ディレクトリパスは適宜読み替えてください
4. 自宅LAN環境内で利用できるようにする そのうち書く</description>
			<content type="html"><![CDATA[<p>めも</p>
<h4 id="1aosp">1.AOSPリポジトリのミラー</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir -p ~/Android/mirrors/aosp
$ cd ~/Android/mirrors/aosp
$ repo init -u https://android.googlesource.com/mirror/manifest --mirror
$ repo sync
</code></pre></div><h4 id="2-cyanogenmod">2. CyanogenModリポジトリのミラー</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir -p ~/Android/mirrors/cyanogenmod
$ cd ~/Android/mirrors/cyanogenmod
$ repo init -u  https://github.com/CyanogenMod/android.git -b cm-11.0 --mirror --reference<span style="color:#f92672">=</span>~/Android/mirrors/aosp
$ repo sync
</code></pre></div><h4 id="3-">3. ミラーレポジトリから利用する</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mkdir -p ~/Android/dev_cm
$ cd ~/Android/dev_cm
$ repo init -u ~/Android/mirrors/cyanogenmod -b cm-11.0 –reference<span style="color:#f92672">=</span>~/Android/mirrors/cyanogenmod
</code></pre></div><p>各ディレクトリパスは適宜読み替えてください</p>
<h4 id="4-lan">4. 自宅LAN環境内で利用できるようにする</h4>
<p>そのうち書く</p>
]]></content>
		</item>
		
		<item>
			<title>OSXでマウス4,5ボタンを利用する</title>
			<link>https://github.pyyoshi.com/blog/2014/10/OSX%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B945%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</link>
			<pubDate>Wed, 01 Oct 2014 22:39:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/10/OSX%E3%81%A7%E3%83%9E%E3%82%A6%E3%82%B945%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B/</guid>
			<description>Windowsのように4,5ボタンで戻る進むがしたかった.
ということで調べてみるとKeyRemap4MacBookというのでできるらしい.
で, 調べてみると後継Ver.のKarabinerというのがあるらしいのでそれを利用した.
設定は以下の画像の通り
ぐぐって出てきた記事だと自分でxml書かなくちゃいけないようだったけど,
こっちのソフトだとそんなことしなくても良さげ
便利になった</description>
			<content type="html"><![CDATA[<p>Windowsのように4,5ボタンで戻る進むがしたかった.</p>
<p>ということで調べてみるとKeyRemap4MacBookというのでできるらしい.</p>
<p>で, 調べてみると後継Ver.の<a href="https://pqrs.org/osx/karabiner/index.html.ja">Karabiner</a>というのがあるらしいのでそれを利用した.</p>
<p>設定は以下の画像の通り</p>
<p><img src="/images/2014/Oct/c--c--c-3c-7c--c--c---2014-10-02-16-33-57.png" alt=""></p>
<p>ぐぐって出てきた記事だと自分でxml書かなくちゃいけないようだったけど,</p>
<p>こっちのソフトだとそんなことしなくても良さげ</p>
<p>便利になった</p>
]]></content>
		</item>
		
		<item>
			<title>HUNTERXHUNTERおもしろい</title>
			<link>https://github.pyyoshi.com/blog/2014/09/HUNTERXHUNTER%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84/</link>
			<pubDate>Mon, 29 Sep 2014 18:55:45 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/HUNTERXHUNTER%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%84/</guid>
			<description>おもしろい</description>
			<content type="html"><![CDATA[<p>おもしろい</p>
]]></content>
		</item>
		
		<item>
			<title>Redis Sentinelでのフェイルオーバー</title>
			<link>https://github.pyyoshi.com/blog/2014/09/Redis-Sentinel%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A7%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC/</link>
			<pubDate>Tue, 16 Sep 2014 10:44:27 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/Redis-Sentinel%E3%81%A7%E3%81%AE%E3%83%95%E3%82%A7%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC/</guid>
			<description>ぐぐりながら色々やってみた感想.
理想通りのものではなかったけど, かなり便利.
Sentinelが勝手にスレーブをマスターに昇格してくれるし, イベントフックすることもできる.
SentinelはAppサーバに1台づつ常駐させるのが良さそう？
Redisサーバと同じホストにSentinelを置くのはNGな気がする.
&amp;hellip;
&amp;hellip;
&amp;hellip;
でだ,
ここまでは順調だったんだけど, フェイルオーバー時にAppの設定を変更せずにRedisのマスター接続先を変える方法.
そこがちょっと分かっていない.
やり方はいろいろあって
  hostsファイルを書き換える
  LBを利用する
  DNSを利用する
  iptablesを利用する
  Alias IPを利用する
  っといろいろあるっぽいけど, 何やってるかさっぱりわからない.
接続先を変更せずにフェイルオーバーに対応させる方法は無理があるのだろうか…
プロクシを〜っとも考えたけど, これだと単一障害点になってしまうかも
うーむ.
とりあえずやりたいこと整理して再挑戦だな
参考  Redis Sentinelを運用してみたお話 redisをsentinelとAliasIPを利用して冗長化  </description>
			<content type="html"><![CDATA[<p>ぐぐりながら色々やってみた感想.</p>
<p>理想通りのものではなかったけど, かなり便利.</p>
<p>Sentinelが勝手にスレーブをマスターに昇格してくれるし, イベントフックすることもできる.</p>
<p>SentinelはAppサーバに1台づつ常駐させるのが良さそう？</p>
<p>Redisサーバと同じホストにSentinelを置くのはNGな気がする.</p>
<p>&hellip;</p>
<p>&hellip;</p>
<p>&hellip;</p>
<p>でだ,</p>
<p>ここまでは順調だったんだけど, フェイルオーバー時にAppの設定を変更せずにRedisのマスター接続先を変える方法.</p>
<p>そこがちょっと分かっていない.</p>
<p>やり方はいろいろあって</p>
<ul>
<li>
<p>hostsファイルを書き換える</p>
</li>
<li>
<p>LBを利用する</p>
</li>
<li>
<p>DNSを利用する</p>
</li>
<li>
<p>iptablesを利用する</p>
</li>
<li>
<p>Alias IPを利用する</p>
</li>
</ul>
<p>っといろいろあるっぽいけど, 何やってるかさっぱりわからない.</p>
<p>接続先を変更せずにフェイルオーバーに対応させる方法は無理があるのだろうか…</p>
<p>プロクシを〜っとも考えたけど, これだと単一障害点になってしまうかも</p>
<p>うーむ.</p>
<p>とりあえずやりたいこと整理して再挑戦だな</p>
<h4 id="heading">参考</h4>
<ul>
<li><a href="http://tech.gmo-media.jp/post/48748908427/introduce-redis-sentinel">Redis Sentinelを運用してみたお話</a></li>
<li><a href="http://ameblo.jp/principia-ca/entry-11573342807.html">redisをsentinelとAliasIPを利用して冗長化</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>WindowsでOpenVPNクライアントがうまく動かない時</title>
			<link>https://github.pyyoshi.com/blog/2014/09/Windows%E3%81%A7OpenVPN%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E6%99%82/</link>
			<pubDate>Mon, 15 Sep 2014 16:39:36 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/Windows%E3%81%A7OpenVPN%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C%E3%81%86%E3%81%BE%E3%81%8F%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%84%E6%99%82/</guid>
			<description>これ参考になった
C:\Program Files\TAP-Windows\bin\devcon.exe を管理者権限で実行＋Win7互換モードに設定
deltapall.bat で、一旦デバイスを削除して
addtap.bat で、再度デバイスを登録してやる。
これでうまくいくっぽい。
なんで失敗してしまうのかは、推測だが
インストール時にうまいくことデバイスが作成されていないのが問題っぽい</description>
			<content type="html"><![CDATA[<p><a href="https://forums.openvpn.net/topic13279.html">これ</a>参考になった</p>
<pre><code>C:\Program Files\TAP-Windows\bin\devcon.exe
</code></pre><p>を管理者権限で実行＋Win7互換モードに設定</p>
<pre><code>deltapall.bat
</code></pre><p>で、一旦デバイスを削除して</p>
<pre><code>addtap.bat
</code></pre><p>で、再度デバイスを登録してやる。</p>
<p>これでうまくいくっぽい。</p>
<p>なんで失敗してしまうのかは、推測だが</p>
<p>インストール時にうまいくことデバイスが作成されていないのが問題っぽい</p>
]]></content>
		</item>
		
		<item>
			<title>boot2dockerとVOLUME</title>
			<link>https://github.pyyoshi.com/blog/2014/09/boot2docker%E3%81%A8VOLUME/</link>
			<pubDate>Sat, 13 Sep 2014 17:17:09 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/boot2docker%E3%81%A8VOLUME/</guid>
			<description>boot2docker使ってる場合
boot2dockerのVM上のパスと接続されるっぽい
...VOLUME/opt/hoge_client...としたとき
-v /opt/hoge_host:/opt/hoge_client と指定する例だと
$ boot2docker ssh でVMにssh接続し
$ ls /opt/hoge_host で確認すると良い
完全にドキュメント読んでないことがばれた
ところでVOLUMEで指定したディレクトリ
なんでroot権限で作られるんだろうな
chownで所有者変更試みても無理っぽい
クソみたいなやり方はあって
CMD chown user /opt/hoge_client &amp;amp;&amp;amp; ls -l /opt/hoge_clientとするとやれないことはない.
実に糞だ.</description>
			<content type="html"><![CDATA[<p>boot2docker使ってる場合</p>
<p>boot2dockerのVM上のパスと接続されるっぽい</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile">...<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">VOLUME</span><span style="color:#e6db74"> /opt/hoge_client</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>...<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>としたとき</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">-v /opt/hoge_host:/opt/hoge_client
</code></pre></div><p>と指定する例だと</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ boot2docker ssh
</code></pre></div><p>でVMにssh接続し</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ls /opt/hoge_host
</code></pre></div><p>で確認すると良い</p>
<p>完全にドキュメント読んでないことがばれた</p>
<p>ところでVOLUMEで指定したディレクトリ</p>
<p>なんでroot権限で作られるんだろうな</p>
<p>chownで所有者変更試みても無理っぽい</p>
<p>クソみたいなやり方はあって</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">CMD</span> chown user /opt/hoge_client <span style="color:#f92672">&amp;&amp;</span> ls -l /opt/hoge_client<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>とするとやれないことはない.</p>
<p>実に糞だ.</p>
]]></content>
		</item>
		
		<item>
			<title>Docker Hubの有料プラン</title>
			<link>https://github.pyyoshi.com/blog/2014/09/Docker-Hub%E3%81%AE%E6%9C%89%E6%96%99%E3%83%97%E3%83%A9%E3%83%B3/</link>
			<pubDate>Fri, 12 Sep 2014 16:16:28 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/Docker-Hub%E3%81%AE%E6%9C%89%E6%96%99%E3%83%97%E3%83%A9%E3%83%B3/</guid>
			<description>Docker Hubの有料プランを契約した.
それだけ
それだけなんだけどさ
Docker HubのWebおもくね・・・？
あとプッシュしてWeb側が即時更新されるわけじゃないっぽくてアレな感じもある.
まぁAPI経由がメインだろうしそっちが早ければ特に問題はないのだが.</description>
			<content type="html"><![CDATA[<p>Docker Hubの有料プランを契約した.</p>
<p>それだけ</p>
<p>それだけなんだけどさ</p>
<p>Docker HubのWebおもくね・・・？</p>
<p>あとプッシュしてWeb側が即時更新されるわけじゃないっぽくてアレな感じもある.</p>
<p>まぁAPI経由がメインだろうしそっちが早ければ特に問題はないのだが.</p>
]]></content>
		</item>
		
		<item>
			<title>メール配信サービスとDNSサービスの相性</title>
			<link>https://github.pyyoshi.com/blog/2014/09/%E3%83%A1%E3%83%BC%E3%83%AB%E9%85%8D%E4%BF%A1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8DNS%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E7%9B%B8%E6%80%A7/</link>
			<pubDate>Fri, 12 Sep 2014 16:02:05 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/09/%E3%83%A1%E3%83%BC%E3%83%AB%E9%85%8D%E4%BF%A1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8DNS%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AE%E7%9B%B8%E6%80%A7/</guid>
			<description>諸事情でムームーDNSを利用しています
で, 諸事情でメール配信サービスを利用する事になったのだが
 NG: ムームーDNS + mailgun OK: ムームーDNS + mandrill  という結果になりました.
mailgunで通らなかった認証はDKIMとMXとCNAME(Sending, Trackingともに)でした.
ほぼほぼ通りませんでした(-_-;)
ということで, もろもろDNSサービス周り変更するまでmandrillを利用しようかと.
追記:
なにやらGoogle Cloud DNSとやらがあるらしい.
Web UIがまだないみたい.
そりゃ気づかないわけだ…
料金自体はRoute53と変わらないみたい.
機能はどの程度あるのかしらないが, GCPで囲うので悩む必要はないかもね.</description>
			<content type="html"><![CDATA[<p>諸事情でムームーDNSを利用しています</p>
<p>で, 諸事情でメール配信サービスを利用する事になったのだが</p>
<ul>
<li>NG: ムームーDNS + mailgun</li>
<li>OK: ムームーDNS + mandrill</li>
</ul>
<p>という結果になりました.</p>
<p>mailgunで通らなかった認証はDKIMとMXとCNAME(Sending, Trackingともに)でした.</p>
<p>ほぼほぼ通りませんでした(-_-;)</p>
<p>ということで, もろもろDNSサービス周り変更するまでmandrillを利用しようかと.</p>
<p>追記:</p>
<p>なにやら<a href="https://developers.google.com/cloud-dns/?hl=ja">Google Cloud DNS</a>とやらがあるらしい.</p>
<p>Web UIがまだないみたい.</p>
<p>そりゃ気づかないわけだ…</p>
<p>料金自体はRoute53と変わらないみたい.</p>
<p>機能はどの程度あるのかしらないが, GCPで囲うので悩む必要はないかもね.</p>
]]></content>
		</item>
		
		<item>
			<title>イギリスでのはっけん</title>
			<link>https://github.pyyoshi.com/blog/2014/08/%E3%82%A4%E3%82%AE%E3%83%AA%E3%82%B9%E3%81%A7%E3%81%AE%E3%81%AF%E3%81%A3%E3%81%91%E3%82%93/</link>
			<pubDate>Wed, 27 Aug 2014 13:27:25 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/08/%E3%82%A4%E3%82%AE%E3%83%AA%E3%82%B9%E3%81%A7%E3%81%AE%E3%81%AF%E3%81%A3%E3%81%91%E3%82%93/</guid>
			<description>イギリスに来て, 毎日紅茶を飲む習慣ができたのだが
少し気になる点があった.
紅茶を入れると必ず油膜ができるのだ.
最初は気にならなかったんだけど, 淹れて2時間位すると明らかに油膜が出来上がってる.
日本でも結構な頻度で飲むのだけど, そんなことはならないし こっちの紅茶ではなるものなのかなーっと思ってた. (イギリスのお土産で貰った紅茶はたしか油膜はできなかったけど)
さすがに気になりだしたので調べてみると
硬水と茶葉のポリフェノールが高温化で反応して油膜ができるんだとか
なるほどな, イギリスの水は硬水だし条件は合う.
些細な疑問は解決しましたとさ.
あと, 紅茶は軟水のほうがうまいらしいよ.</description>
			<content type="html"><![CDATA[<p>イギリスに来て, 毎日紅茶を飲む習慣ができたのだが</p>
<p>少し気になる点があった.</p>
<p>紅茶を入れると必ず油膜ができるのだ.</p>
<p>最初は気にならなかったんだけど, 淹れて2時間位すると明らかに油膜が出来上がってる.</p>
<p>日本でも結構な頻度で飲むのだけど, そんなことはならないし こっちの紅茶ではなるものなのかなーっと思ってた. (イギリスのお土産で貰った紅茶はたしか油膜はできなかったけど)</p>
<p>さすがに気になりだしたので調べてみると</p>
<p>硬水と茶葉のポリフェノールが高温化で反応して油膜ができるんだとか</p>
<p>なるほどな, イギリスの水は硬水だし条件は合う.</p>
<p>些細な疑問は解決しましたとさ.</p>
<p>あと, 紅茶は軟水のほうがうまいらしいよ.</p>
]]></content>
		</item>
		
		<item>
			<title>かぜ2</title>
			<link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C2/</link>
			<pubDate>Wed, 20 Aug 2014 13:22:00 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C2/</guid>
			<description>イギリス乾燥しすぎ ー&amp;gt; 風邪の症状
すげー喉が渇く ー&amp;gt; 風邪の症状
なんかやたら寒い ー&amp;gt; 風邪の症状
ここ1週間割りと調子が良いので多分風邪治った.
一緒に来た友人にうつされた可能性が高いけど, せめてもしょうがねぇし, イギリスではうつされるのが悪いみたいだしそういうことだ.
ちなみに現地の友人に風邪をうつしました. XD</description>
			<content type="html"><![CDATA[<p>イギリス乾燥しすぎ ー&gt; 風邪の症状</p>
<p>すげー喉が渇く ー&gt; 風邪の症状</p>
<p>なんかやたら寒い ー&gt; 風邪の症状</p>
<p>ここ1週間割りと調子が良いので多分風邪治った.</p>
<p>一緒に来た友人にうつされた可能性が高いけど, せめてもしょうがねぇし, イギリスではうつされるのが悪いみたいだしそういうことだ.</p>
<p>ちなみに現地の友人に風邪をうつしました. XD</p>
]]></content>
		</item>
		
		<item>
			<title>かぜ</title>
			<link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C/</link>
			<pubDate>Wed, 13 Aug 2014 08:23:20 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8B%E3%81%9C/</guid>
			<description>えげれす入国早々風邪引いてだいぶ辛い感じあったのだけど, 結構落ち着いてきた.
調子こいてしゃべるとまだ咳でそうになるけど
そんなことより仕事のほうがまぁ順調かなというレベル
そういうことです.
  </description>
			<content type="html"><![CDATA[<p>えげれす入国早々風邪引いてだいぶ辛い感じあったのだけど, 結構落ち着いてきた.</p>
<p>調子こいてしゃべるとまだ咳でそうになるけど</p>
<p>そんなことより仕事のほうがまぁ順調かなというレベル</p>
<p>そういうことです.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>いぎりすつら</title>
			<link>https://github.pyyoshi.com/blog/2014/08/%E3%81%84%E3%81%8E%E3%82%8A%E3%81%99%E3%81%A4%E3%82%89/</link>
			<pubDate>Mon, 11 Aug 2014 10:42:02 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%84%E3%81%8E%E3%82%8A%E3%81%99%E3%81%A4%E3%82%89/</guid>
			<description>観光は楽しいが
飯とか物価とか結構つらい感じある
飯の量やたらおおい。
観光博楽しい
あと寒い</description>
			<content type="html"><![CDATA[<p>観光は楽しいが</p>
<p>飯とか物価とか結構つらい感じある</p>
<p>飯の量やたらおおい。</p>
<p>観光博楽しい</p>
<p>あと寒い</p>
]]></content>
		</item>
		
		<item>
			<title>おらえげれすへいくだぁ</title>
			<link>https://github.pyyoshi.com/blog/2014/08/%E3%81%8A%E3%82%89%E3%81%88%E3%81%92%E3%82%8C%E3%81%99%E3%81%B8%E3%81%84%E3%81%8F%E3%81%A0%E3%81%81/</link>
			<pubDate>Fri, 01 Aug 2014 00:03:02 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/08/%E3%81%8A%E3%82%89%E3%81%88%E3%81%92%E3%82%8C%E3%81%99%E3%81%B8%E3%81%84%E3%81%8F%E3%81%A0%E3%81%81/</guid>
			<description>今月から来月までイギリスいきます.
物騒な世の中ですが割りと楽しみです.
乗り継ぎのハノイとかホーチミンとかのほうがもっと楽しみだったりします.
疲れるからと2時間くらいの乗り継ぎ時間のものを選びましたが6時間位のでも良かったかなと思ってます.
以上</description>
			<content type="html"><![CDATA[<p>今月から来月までイギリスいきます.</p>
<p>物騒な世の中ですが割りと楽しみです.</p>
<p>乗り継ぎのハノイとかホーチミンとかのほうがもっと楽しみだったりします.</p>
<p>疲れるからと2時間くらいの乗り継ぎ時間のものを選びましたが6時間位のでも良かったかなと思ってます.</p>
<p>以上</p>
<p><img src="/images/2014/Aug/DSCN0121-001.JPG" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>なぜOSXなのか</title>
			<link>https://github.pyyoshi.com/blog/2014/06/%E3%81%AA%E3%81%9COSX%E3%81%AA%E3%81%AE%E3%81%8B/</link>
			<pubDate>Mon, 30 Jun 2014 19:26:19 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/06/%E3%81%AA%E3%81%9COSX%E3%81%AA%E3%81%AE%E3%81%8B/</guid>
			<description>Windowsではうぇっぶあぷりの開発につらみがある 最新スペックのWinノートにUbuntuを入れた場合 なにかしら不具合がある(電源管理が糞とか電源管理が糞とか) しょうがねーからMBA/MBPで我慢してやると  そういうことです.
何が言いたいかというと, Chromebook Pixelっぽいノートほしい
そういうことです.</description>
			<content type="html"><![CDATA[<ul>
<li>Windowsではうぇっぶあぷりの開発につらみがある</li>
<li>最新スペックのWinノートにUbuntuを入れた場合 なにかしら不具合がある(電源管理が糞とか電源管理が糞とか)</li>
<li>しょうがねーからMBA/MBPで我慢してやると</li>
</ul>
<p>そういうことです.</p>
<p>何が言いたいかというと, Chromebook Pixelっぽいノートほしい</p>
<p>そういうことです.</p>
]]></content>
		</item>
		
		<item>
			<title>最近のこと 2</title>
			<link>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8-2/</link>
			<pubDate>Tue, 17 Jun 2014 20:53:19 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8-2/</guid>
			<description>ロンドンに1月ほど旅行へ行こうかと考えている.
パスポートの期限はすっかり切れていて,
めんどくさいけど申請するにあたっていろいろ準備しなくてはいけない.
実にめんどくさい.</description>
			<content type="html"><![CDATA[<p>ロンドンに1月ほど旅行へ行こうかと考えている.</p>
<p>パスポートの期限はすっかり切れていて,</p>
<p>めんどくさいけど申請するにあたっていろいろ準備しなくてはいけない.</p>
<p>実にめんどくさい.</p>
]]></content>
		</item>
		
		<item>
			<title>最近のこと</title>
			<link>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8/</link>
			<pubDate>Tue, 17 Jun 2014 20:50:10 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/06/%E6%9C%80%E8%BF%91%E3%81%AE%E3%81%93%E3%81%A8/</guid>
			<description>大学生の頃なんて全然本なんて読まなかったのに
高校生ぶりに小説をよく読むようになった.
ニートになっていろいろ考えることがあって
それを避けるために調度良いと思ったからであろう.
それだけのことである.
先ほど読み終わった小説.
自分にしっくり来てとてもよかった.
三日間の幸福
おすすめです.</description>
			<content type="html"><![CDATA[<p>大学生の頃なんて全然本なんて読まなかったのに</p>
<p>高校生ぶりに小説をよく読むようになった.</p>
<p>ニートになっていろいろ考えることがあって</p>
<p>それを避けるために調度良いと思ったからであろう.</p>
<p>それだけのことである.</p>
<p>先ほど読み終わった小説.</p>
<p>自分にしっくり来てとてもよかった.</p>
<p>三日間の幸福</p>
<p>おすすめです.</p>
]]></content>
		</item>
		
		<item>
			<title>退職しました</title>
			<link>https://github.pyyoshi.com/blog/2014/06/%E9%80%80%E8%81%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
			<pubDate>Sun, 08 Jun 2014 20:26:12 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/06/%E9%80%80%E8%81%B7%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
			<description>6月某日付けで退職しましたまる
これからはせいいっぱい自宅警備します
以上
  </description>
			<content type="html"><![CDATA[<p>6月某日付けで退職しましたまる</p>
<p>これからはせいいっぱい自宅警備します</p>
<p>以上</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>新しいブログへ移行します。</title>
			<link>https://github.pyyoshi.com/blog/2014/04/%E6%96%B0%E3%81%97%E3%81%84%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</link>
			<pubDate>Tue, 01 Apr 2014 18:08:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/04/%E6%96%B0%E3%81%97%E3%81%84%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</guid>
			<description>こちらです。</description>
			<content type="html"><![CDATA[<p><a href="http://blog.pyyoshi.com/">こちら</a>です。</p>
]]></content>
		</item>
		
		<item>
			<title>年度が変わりまして。</title>
			<link>https://github.pyyoshi.com/blog/2014/03/%E5%B9%B4%E5%BA%A6%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8A%E3%81%BE%E3%81%97%E3%81%A6/</link>
			<pubDate>Mon, 31 Mar 2014 23:21:28 +0000</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2014/03/%E5%B9%B4%E5%BA%A6%E3%81%8C%E5%A4%89%E3%82%8F%E3%82%8A%E3%81%BE%E3%81%97%E3%81%A6/</guid>
			<description>ブログ引っ越して最初に大事なお話です。
4月末で今の会社を退職し、あらたに会社を起こす事となりました。
以上です。</description>
			<content type="html"><![CDATA[<p>ブログ引っ越して最初に大事なお話です。</p>
<p>4月末で今の会社を退職し、あらたに会社を起こす事となりました。</p>
<p>以上です。</p>
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>新ブログへ移行します。</title>
			<link>https://github.pyyoshi.com/blog/2013/10/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</link>
			<pubDate>Tue, 15 Oct 2013 13:28:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/10/%E6%96%B0%E3%83%96%E3%83%AD%E3%82%B0%E3%81%B8%E7%A7%BB%E8%A1%8C%E3%81%97%E3%81%BE%E3%81%99/</guid>
			<description>仕事が忙しくて新しいブログの作成ができていませんでしたが、とりあえずまたBloggerにお世話になる予定です。
以下URLが予定地となります。
よろしくお願い致します。
pyyoshi.blogspot.com</description>
			<content type="html"><![CDATA[<p>仕事が忙しくて新しいブログの作成ができていませんでしたが、とりあえずまたBloggerにお世話になる予定です。</p>
<p>以下URLが予定地となります。<br>
よろしくお願い致します。</p>
<p><a href="http://pyyoshi.blogspot.com/">pyyoshi.blogspot.com</a></p>
]]></content>
		</item>
		
		<item>
			<title>1年間ニートをしてみて感じたこと</title>
			<link>https://github.pyyoshi.com/blog/2013/05/1%E5%B9%B4%E9%96%93%E3%83%8B%E3%83%BC%E3%83%88%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8/</link>
			<pubDate>Tue, 28 May 2013 23:23:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/1%E5%B9%B4%E9%96%93%E3%83%8B%E3%83%BC%E3%83%88%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8/</guid>
			<description>私は大学を2012年3月に卒業し、晴れて4月から職業:夢追い人になりました。
元々は都内で就職することが決まっていましたが、宮城からITでなにかできることはないかと卒業が近くなるにつれ気持ちが強くなっていき、とうとう夢追い人として生活することになりました。
なりたくてなったわけじゃない！？ 私自身はそうは思わなくて、逆に1度くらいニートを経験してから社会に出ても遅くないはず。っと思い気楽にニートし始めました。
そもそもアホみたいに在学中に就職活動をおこなって卒業研究がぺらぺらとかいう状況のほうが、私からしたらよっぽどクソだと思いましたね。
私の大学ではそういう研究結果なひとが多かった印象です。
逆に院へ進む人は内容が濃いものが多かった印象です。
っとは言うものの、ニートというものはあまりいい存在ではありません。親からは生暖かい目で見られます。
親含めその知人らからはそーいう目で見られているような気にもなります。
なのである程度、就職活動は行いました。ある程度、資格取得の勉強してるよアピールをしました。ある程度ハローワークに通って面白そうな企業を探しました（白目
なんのためにニートし始めたの？ 冒頭で述べたような甘い考えでニートを始めたのは事実で、これから何やろうということは全くない状況でした。
ただ、ニートやる上でのほほんと田舎の田園風景を眺めているのでは駄目だという事はわかっていて、いろいろ考えた結果、自分の力量をこの1年使って測ってみようという考えが生まれました。
そこからははやいものでいろいろやり始めたのです。
ニート中に何やってたの？ お世話になっていたライブラリのメンテナンス(プログラム)などから始めました。
あとはWebサービスの開発にいくつか関わったり、自分で作ってみたりしました。
いくつか内定もいただきましたがいろいろあってお断りすることもありました。
あんまり詳しく何をやったかは書きませんが、ニートをやっていく上で大切なことは
自分がなぜニートをやっているのか、何をやるためにニートをやっているのかを考えて行動することだと思います。
最初は自分がやっていることはただのお遊びで何にも役に立っていないとか思うかもしれませんが、
自分は何かをやっていて、何かに詳しくなったり誰かに評価されたいとかそーいう欲を出すことが大切なんじゃないかと思います。
ニートの癖して暇がなかった！？ 私は社会人の一般的な生活スタイルに基づいてニート生活を始めました。
7時くらいには目を覚まし、9時くらいからやりたいこと・やらなければいけないことをし、12〜13時にお昼を食べ18時くらいまで午前中の続きなどをしました。
たまに11時とかに起きてたこれが割と暇じゃなくてコード書いてるとあっという間に時間が過ぎます。
あっという間に家事をしなくてはいけない時間になります。
1日24時間自由なはずなのにとっても短いと感じました。
ニート中に失敗したこと 太りました。だいぶ太りました。もりもり太りました。
親の飯が美味い！ただで食べられる飯がうまい！なんでこんなにうまいんだ！っとなりました。
みるみる太り続けとってもやばい状況のまま1年が過ぎました。
ニートの皆さん。
食事の量は適切に…
っというわけでもなく、頭は使うものの体は動かさないことがほとんどな自宅警備員なので
食事量が減っているにも関わらず、かなり太りました。
定期的に日光を浴び、運動することが大切で有ります。気をつけましょう。
何かを見失いかけたり、ヤル気を出したい時 私は「ソーシャルネットワーク」と「幸せのちから」を見ました。
前者はロックになれるいい映画です。これみるととてもやる気出ます。
後者は見るのがとてもつらい映画です。心えぐられるものですが、とてもいい薬になりました。
ニートで生き抜くために 死にたいと思っても実行しない精神
ある程度諦めるこころ
お金はあるに越したことはない
奨学金という名の借金を持っている奴はニートしてないで働け。私はとても苦しんだ早寝早起きをしよう
疲れてベットで即寝るくらい疲れてからじゃないと、いろいろ考え始まって寝られなくなるよ
ある程度 行動できれば親だって暖かく応援してくれると信じる
結果として君はどうなったの？ とてもよい人生経験をしたと思います。学生生活を終え、就職せずニートを経験するなんて滅多に経験できるものじゃないと思います。
特に何かをやり遂げようと考えてる人はそうだと思います。
で、1年間ニートしてて思ったことを1つ
評価っていうのはリアルでされるのとインターネットのなかでされるのでは、私個人としてはだいぶ違うものだと思いました。
ネットでライブラリとか私がアウトプットしたものに良し悪し含め評価されるものと、リアルでの評価ではだいぶ重みが違うなと思いました。
評価されることで自信がつくのですが、インターネット上だとちょっと軽めの印象だったり、悪い評価だととても深刻に受け止めたりします。
悪い評価は具体的にどこが駄目なのか指摘してもらえればいいのですが、匿名からボロクソに言われると、たとえ1人からであっても複数人から言われているような気がするのです。
逆にリアルだと、
どんな評価であれ相手の顔が見えます。
気持ちが伺えます。
どういう意図で言っているのかわかります。
結果的にネットの評価より形が見えそうな自信がつきます。
この違いが大きくありリアルでの評価も欲しいと日に日に思うようになりました。
じゃーいつ実行するの？っと思い始めて2013年5月から本格的に就職活動を行い、6月前にして内定いただきました。
雑記 1年なんてあっという間です。
やりたいことを見つける期間として1年間は長いようで短かったです。
幸い、とてもやりがいが有りそうな企業に就職することができ6月からお仕事します。
幸い、知人とあるものについて進行も始まりました。
幸い、私の体は肥えたままです。</description>
			<content type="html"><![CDATA[<p>私は大学を2012年3月に卒業し、晴れて4月から職業:夢追い人になりました。</p>
<p>元々は都内で就職することが決まっていましたが、宮城からITでなにかできることはないかと卒業が近くなるにつれ気持ちが強くなっていき、とうとう夢追い人として生活することになりました。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h3 id="heading">なりたくてなったわけじゃない！？</h3>
<p>私自身はそうは思わなくて、逆に1度くらいニートを経験してから社会に出ても遅くないはず。っと思い気楽にニートし始めました。</p>
<p>そもそもアホみたいに在学中に就職活動をおこなって卒業研究がぺらぺらとかいう状況のほうが、私からしたらよっぽどクソだと思いましたね。</p>
<p>私の大学ではそういう研究結果なひとが多かった印象です。</p>
<p>逆に院へ進む人は内容が濃いものが多かった印象です。</p>
<p>っとは言うものの、ニートというものはあまりいい存在ではありません。親からは生暖かい目で見られます。</p>
<p>親含めその知人らからはそーいう目で見られているような気にもなります。</p>
<p>なのである程度、就職活動は行いました。ある程度、資格取得の勉強してるよアピールをしました。ある程度ハローワークに通って面白そうな企業を探しました（白目</p>
<h3 id="heading-1">なんのためにニートし始めたの？</h3>
<p>冒頭で述べたような甘い考えでニートを始めたのは事実で、これから何やろうということは全くない状況でした。</p>
<p>ただ、ニートやる上でのほほんと田舎の田園風景を眺めているのでは駄目だという事はわかっていて、いろいろ考えた結果、自分の力量をこの1年使って測ってみようという考えが生まれました。</p>
<p>そこからははやいものでいろいろやり始めたのです。</p>
<h3 id="heading-2">ニート中に何やってたの？</h3>
<p>お世話になっていたライブラリのメンテナンス(プログラム)などから始めました。</p>
<p>あとはWebサービスの開発にいくつか関わったり、自分で作ってみたりしました。</p>
<p>いくつか内定もいただきましたがいろいろあってお断りすることもありました。</p>
<p>あんまり詳しく何をやったかは書きませんが、ニートをやっていく上で大切なことは</p>
<p>自分がなぜニートをやっているのか、何をやるためにニートをやっているのかを考えて行動することだと思います。</p>
<p>最初は自分がやっていることはただのお遊びで何にも役に立っていないとか思うかもしれませんが、</p>
<p>自分は何かをやっていて、何かに詳しくなったり誰かに評価されたいとかそーいう欲を出すことが大切なんじゃないかと思います。</p>
<h3 id="heading-3">ニートの癖して暇がなかった！？</h3>
<p>私は社会人の一般的な生活スタイルに基づいてニート生活を始めました。</p>
<p>7時くらいには目を覚まし、9時くらいからやりたいこと・やらなければいけないことをし、12〜13時にお昼を食べ18時くらいまで午前中の続きなどをしました。</p>
<p><!-- raw HTML omitted -->たまに11時とかに起きてた<!-- raw HTML omitted --></p>
<p>これが割と暇じゃなくてコード書いてるとあっという間に時間が過ぎます。</p>
<p>あっという間に家事をしなくてはいけない時間になります。</p>
<p>1日24時間自由なはずなのにとっても短いと感じました。</p>
<h3 id="heading-4">ニート中に失敗したこと</h3>
<p>太りました。だいぶ太りました。もりもり太りました。</p>
<p>親の飯が美味い！ただで食べられる飯がうまい！なんでこんなにうまいんだ！っとなりました。</p>
<p>みるみる太り続けとってもやばい状況のまま1年が過ぎました。</p>
<p>ニートの皆さん。</p>
<p>食事の量は適切に…</p>
<p>っというわけでもなく、頭は使うものの体は動かさないことがほとんどな自宅警備員なので</p>
<p>食事量が減っているにも関わらず、かなり太りました。</p>
<p>定期的に日光を浴び、運動することが大切で有ります。気をつけましょう。</p>
<h3 id="heading-5">何かを見失いかけたり、ヤル気を出したい時</h3>
<p>私は「ソーシャルネットワーク」と「幸せのちから」を見ました。</p>
<p>前者はロックになれるいい映画です。これみるととてもやる気出ます。</p>
<p>後者は見るのがとてもつらい映画です。心えぐられるものですが、とてもいい薬になりました。</p>
<h3 id="heading-6">ニートで生き抜くために</h3>
<p>死にたいと思っても実行しない精神</p>
<p>ある程度諦めるこころ</p>
<p>お金はあるに越したことはない</p>
<p>奨学金という名の借金を持っている奴はニートしてないで働け。<!-- raw HTML omitted -->私はとても苦しんだ<!-- raw HTML omitted --></p>
<p>早寝早起きをしよう</p>
<p>疲れてベットで即寝るくらい疲れてからじゃないと、いろいろ考え始まって寝られなくなるよ</p>
<p>ある程度 行動できれば親だって暖かく応援してくれると信じる</p>
<h3 id="heading-7">結果として君はどうなったの？</h3>
<p>とてもよい人生経験をしたと思います。学生生活を終え、就職せずニートを経験するなんて滅多に経験できるものじゃないと思います。</p>
<p>特に何かをやり遂げようと考えてる人はそうだと思います。</p>
<p>で、1年間ニートしてて思ったことを1つ</p>
<p>評価っていうのはリアルでされるのとインターネットのなかでされるのでは、私個人としてはだいぶ違うものだと思いました。</p>
<p>ネットでライブラリとか私がアウトプットしたものに良し悪し含め評価されるものと、リアルでの評価ではだいぶ重みが違うなと思いました。</p>
<p>評価されることで自信がつくのですが、インターネット上だとちょっと軽めの印象だったり、悪い評価だととても深刻に受け止めたりします。</p>
<p>悪い評価は具体的にどこが駄目なのか指摘してもらえればいいのですが、匿名からボロクソに言われると、たとえ1人からであっても複数人から言われているような気がするのです。</p>
<p>逆にリアルだと、</p>
<p>どんな評価であれ相手の顔が見えます。</p>
<p>気持ちが伺えます。</p>
<p>どういう意図で言っているのかわかります。</p>
<p>結果的にネットの評価より形が見えそうな自信がつきます。</p>
<p>この違いが大きくありリアルでの評価も欲しいと日に日に思うようになりました。</p>
<p>じゃーいつ実行するの？っと思い始めて2013年5月から本格的に就職活動を行い、6月前にして内定いただきました。</p>
<h3 id="heading-8">雑記</h3>
<p>1年なんてあっという間です。</p>
<p>やりたいことを見つける期間として1年間は長いようで短かったです。</p>
<p>幸い、とてもやりがいが有りそうな企業に就職することができ6月からお仕事します。</p>
<p>幸い、知人とあるものについて進行も始まりました。</p>
<p>幸い、私の体は肥えたままです。</p>
<p>そんなこんなで、このブログは終了です。</p>
<p>次のブログサイトが決まり次第、改めて報告しようと思います。</p>
<p>それまで、さいなら〜</p>
]]></content>
		</item>
		
		<item>
			<title>社会人になるという事で</title>
			<link>https://github.pyyoshi.com/blog/2013/05/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E4%BA%8B%E3%81%A7/</link>
			<pubDate>Tue, 28 May 2013 22:19:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/%E7%A4%BE%E4%BC%9A%E4%BA%BA%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E4%BA%8B%E3%81%A7/</guid>
			<description>まぁいろいろお金絡みのこと調べたり、生活する上でどのくらいの余力があればいいのか記録したりしてるのですが
社会人の皆さんすごいですね…
真面目にお金のこと考えさせられます。
家計簿とかそーいうお金を使った時に記録するのとても重要だと思いました。
僕はそーいうの得意じゃないのでレシートを写真として残したり、電子マネー使ったりして過ごすと思います…
お金がどこから逃げていくのか、それを知るために記録することは大事だなと思った1日でした。</description>
			<content type="html"><![CDATA[<p>まぁいろいろお金絡みのこと調べたり、生活する上でどのくらいの余力があればいいのか記録したりしてるのですが</p>
<p>社会人の皆さんすごいですね…</p>
<p>真面目にお金のこと考えさせられます。</p>
<p>家計簿とかそーいうお金を使った時に記録するのとても重要だと思いました。</p>
<p>僕はそーいうの得意じゃないのでレシートを写真として残したり、電子マネー使ったりして過ごすと思います…</p>
<p>お金がどこから逃げていくのか、それを知るために記録することは大事だなと思った1日でした。</p>
]]></content>
		</item>
		
		<item>
			<title>Google Driveにある画像ビュワー上で画像にコメントする機能について</title>
			<link>https://github.pyyoshi.com/blog/2013/05/Google-Drive%E3%81%AB%E3%81%82%E3%82%8B%E7%94%BB%E5%83%8F%E3%83%93%E3%83%A5%E3%83%AF%E3%83%BC%E4%B8%8A%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E6%A9%9F%E8%83%BD%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Wed, 22 May 2013 06:15:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/Google-Drive%E3%81%AB%E3%81%82%E3%82%8B%E7%94%BB%E5%83%8F%E3%83%93%E3%83%A5%E3%83%AF%E3%83%BC%E4%B8%8A%E3%81%A7%E7%94%BB%E5%83%8F%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E6%A9%9F%E8%83%BD%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>あれの実装方法を知りたいのだけれど、調査していないので勝手な想像で書く
画像をキャンバスに落とす。
その上にレイヤを重ねてそこにコメントを置けるようにする。
コメントの範囲はキャンバスのサイズとコメント位置とで相対的な関係になっている。
脳みそ空っぽなので、こーいう想像になった。
時間があるとき調査して実際に実装するまでやっていきたい。
以上</description>
			<content type="html"><![CDATA[<p>あれの実装方法を知りたいのだけれど、調査していないので勝手な想像で書く</p>
<p>画像をキャンバスに落とす。</p>
<p>その上にレイヤを重ねてそこにコメントを置けるようにする。</p>
<p>コメントの範囲はキャンバスのサイズとコメント位置とで相対的な関係になっている。</p>
<p>脳みそ空っぽなので、こーいう想像になった。</p>
<p>時間があるとき調査して実際に実装するまでやっていきたい。</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>Go言語Webフレームワークrevelについて (動作確認編)</title>
			<link>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</link>
			<pubDate>Wed, 22 May 2013 05:58:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/Go%E8%A8%80%E8%AA%9EWeb%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFrevel%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E7%B7%A8/</guid>
			<description>web.goは簡単なアプリを作るには最適なのですが複雑なものを作るにはちと機能が足らない感じです。
というわけでWebフレームワーク探してたらPlayフレームワークっぽく実装できるrevelっていうのがあることを知りました。
で、
私 Playフレームワークがどういうものなのか知りません。もちろんきいたことはあります。
いつも使うのはSinatra系かDjangoばかり使っています。
なのでいい機会なのでプロジェクトの構造とかメモがわりに残せればなと思います。
※goenv環境を前提にしています。とてもCoolな開発環境を提供してくれるので導入必須！
まずはrevelを使える状態にします。
 $ cd $HOME/src
$ goenv NyanWeb
$ cd NyanWeb
$ source activate
$ go get github.com/robfig/revel
$ go build -o bin/revel github.com/robfig/revel/cmd
 revelプロジェクトを作成します。
 $ revel new Nyan
 これによってsrc/以下にNyanというプロジェクトが作成されます。
実際に動かしてみましょう。
 $ revel run Nyan
 実行したら127.0.0.1:9000にアクセスして正しく動作していることを確認してください。
一旦Ctrl+Cにて終了させます。
続いてビルドが通るようにプロジェクトのパスを変更します。
 $ cd $HOME/src/NyanWeb
$ cd src/
$ mkdir webapps
$ mv Nyan/ webapps/
$ cd -
 これで$HOME/src/NyanWeb/webapps/Nyanという構造になったかと思います。</description>
			<content type="html"><![CDATA[<p>web.goは簡単なアプリを作るには最適なのですが複雑なものを作るにはちと機能が足らない感じです。</p>
<p>というわけでWebフレームワーク探してたらPlayフレームワークっぽく実装できるrevelっていうのがあることを知りました。</p>
<p>で、</p>
<p>私
Playフレームワークがどういうものなのか知りません。もちろんきいたことはあります。</p>
<p>いつも使うのはSinatra系かDjangoばかり使っています。</p>
<p>なのでいい機会なのでプロジェクトの構造とかメモがわりに残せればなと思います。</p>
<p>※<a href="https://bitbucket.org/ymotongpoo/goenv">goenv</a>環境を前提にしています。とてもCoolな開発環境を提供してくれるので導入必須！</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
まずはrevelを使える状態にします。</p>
<blockquote>
<p>$ cd $HOME/src<br>
$ goenv NyanWeb<br>
$ cd NyanWeb<br>
$ source activate<br>
$ go get github.com/robfig/revel<br>
$ go build -o bin/revel github.com/robfig/revel/cmd</p>
</blockquote>
<p>revelプロジェクトを作成します。</p>
<blockquote>
<p>$ revel new Nyan</p>
</blockquote>
<p>これによってsrc/以下にNyanというプロジェクトが作成されます。</p>
<p>実際に動かしてみましょう。</p>
<blockquote>
<p>$ revel run Nyan</p>
</blockquote>
<p>実行したら127.0.0.1:9000にアクセスして正しく動作していることを確認してください。</p>
<p>一旦Ctrl+Cにて終了させます。</p>
<p>続いてビルドが通るようにプロジェクトのパスを変更します。</p>
<blockquote>
<p>$ cd $HOME/src/NyanWeb<br>
$ cd src/<br>
$ mkdir webapps<br>
$ mv Nyan/ webapps/<br>
$ cd -</p>
</blockquote>
<p>これで$HOME/src/NyanWeb/webapps/Nyanという構造になったかと思います。</p>
<p>ビルドを行います。</p>
<p>revel build webapps/Nyan out/</p>
<p>を実行すると$HOME/src/NyanWeb/outにビルドされたものが一式入っています。</p>
<blockquote>
<p>$ cd $HOME/src/NyanWeb/out<br>
$ chmod +x ./run.sh<br>
$ ./run.sh </p>
</blockquote>
<p>これで同じように動かせたかと思います。</p>
<p>run.shの中身を見てみるとNyanに引数をくっつけて実行してるのがわかります。</p>
<p>この引数の他に-port引数があり、デフォルトでは9000ですが他のものにも変えられます。</p>
<p>動作確認まではこれにて終了</p>
<p>次回はプロジェクトの構造について書いていきたいと思います。</p>
<p>使用したrevelのversionは<a href="https://github.com/robfig/revel/commit/2d8c93c738ed83c5520d379eb63c78d08832f4bd">2d8c93c738ed83c5520d379eb63c78d08832f4bd</a>のものです。</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL(MariaDB)で久々にError 2006をやらかした</title>
			<link>https://github.pyyoshi.com/blog/2013/05/MySQLMariaDB%E3%81%A7%E4%B9%85%E3%80%85%E3%81%ABError-2006%E3%82%92%E3%82%84%E3%82%89%E3%81%8B%E3%81%97%E3%81%9F/</link>
			<pubDate>Wed, 15 May 2013 07:36:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/MySQLMariaDB%E3%81%A7%E4%B9%85%E3%80%85%E3%81%ABError-2006%E3%82%92%E3%82%84%E3%82%89%E3%81%8B%E3%81%97%E3%81%9F/</guid>
			<description>SELECT 1とかで定期的にPING打ちましょう
以上</description>
			<content type="html"><![CDATA[<p>SELECT 1とかで定期的にPING打ちましょう</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>KDEについてくるKonsoleがとんでもない奴だった…</title>
			<link>https://github.pyyoshi.com/blog/2013/05/KDE%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8F%E3%82%8BKonsole%E3%81%8C%E3%81%A8%E3%82%93%E3%81%A7%E3%82%82%E3%81%AA%E3%81%84%E5%A5%B4%E3%81%A0%E3%81%A3%E3%81%9F/</link>
			<pubDate>Fri, 10 May 2013 18:37:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/KDE%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8F%E3%82%8BKonsole%E3%81%8C%E3%81%A8%E3%82%93%E3%81%A7%E3%82%82%E3%81%AA%E3%81%84%E5%A5%B4%E3%81%A0%E3%81%A3%E3%81%9F/</guid>
			<description>Konsoleをリサイズすると高確率でXもろとも落とすクソみたいな機能がついてる。
これはバグじゃなくて”しよう”なんだと思う。いつになっても修正されない。
解決策の一つとして&amp;ndash;notransparencyをつければいいみたいだが
もうなんだか許せないので別のターミナルを使うことにする。
以上
(追記 13/5/10 18:53)
yakuakeが割と便利だ
起動したら、F12でターミナルがニョキッと出てくる
Shift+Ctrl+TでHorizontal Split
Shift+Ctrl+LでVertical Split
Shift+Ctrl+↑/↓で切り替え
(追記 13/5/10 19:10)
どうやらこれはKDEとRADEONドライバの相性から起きてるようだ。あくまで推測であるが
そのため、デスクトップ効果の半透明を無効化して様子を見てみる。</description>
			<content type="html"><![CDATA[<p>Konsoleをリサイズすると高確率でXもろとも落とすクソみたいな機能がついてる。</p>
<p>これはバグじゃなくて”しよう”なんだと思う。いつになっても修正されない。</p>
<p>解決策の一つとして&ndash;notransparencyをつければいいみたいだが</p>
<p>もうなんだか許せないので別のターミナルを使うことにする。</p>
<p>以上</p>
<p>(追記 13/5/10 18:53)</p>
<p>yakuakeが割と便利だ</p>
<p>起動したら、F12でターミナルがニョキッと出てくる</p>
<p>Shift+Ctrl+TでHorizontal Split</p>
<p>Shift+Ctrl+LでVertical Split</p>
<p>Shift+Ctrl+↑/↓で切り替え</p>
<p>(追記 13/5/10 19:10)</p>
<p>どうやらこれはKDEとRADEONドライバの相性から起きてるようだ。あくまで推測であるが</p>
<p>そのため、デスクトップ効果の半透明を無効化して様子を見てみる。</p>
]]></content>
		</item>
		
		<item>
			<title>bmobile、DTIやIIJなどの速度のでないSIMで快適(高速)にWebブラウジングする方法</title>
			<link>https://github.pyyoshi.com/blog/2013/05/bmobileDTI%E3%82%84IIJ%E3%81%AA%E3%81%A9%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E3%81%A7%E3%81%AA%E3%81%84SIM%E3%81%A7%E5%BF%AB%E9%81%A9%E9%AB%98%E9%80%9F%E3%81%ABWeb%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Fri, 10 May 2013 16:43:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/bmobileDTI%E3%82%84IIJ%E3%81%AA%E3%81%A9%E3%81%AE%E9%80%9F%E5%BA%A6%E3%81%AE%E3%81%A7%E3%81%AA%E3%81%84SIM%E3%81%A7%E5%BF%AB%E9%81%A9%E9%AB%98%E9%80%9F%E3%81%ABWeb%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B8%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>DTIワンコインSIMを使って9ヶ月くらいになります。
昨年まではそんなに遅さを感じなかったのですが、外出先でどうしてもWebを開かなくてはいけないことがちょっとずつですが多くなって来ました。
そこでWebコンテンツなどを最適化(圧縮)するようなプロキシをたてようかと思いました。
DTIの他にbmobileやIIJのSIMにも有効だと思います。
プロキシサーバは以下の3つを使用します。
 Privoxy: 広告削除などの不必要なコンテンツをフィルタリングできるプロキシ。 Squid: リバースプロキシ。キャッシュ。負荷分散に使われることが多いです。(nginxで代用する場合もありますね。) Ziproxy: 画像などのコンテンツを圧縮するプロキシ。  通信の流れは以下の順番で行われます。
インターネット-&amp;gt;Privoxy(フィルタリング)-&amp;gt;Ziproxy(コンテンツ圧縮)-&amp;gt;Squid(キャッシュ)-&amp;gt;スマフォ
それでは構築はじめます。
環境はUbuntu 12.04 64bit
 Privoxyの構築 Ziproxyの構築 Squidの構築  1. Privoxyの構築  $ sudo apt-get install privoxy
 ※フィルタリングの設定等はここでは書きません。私の鯖ではアダルト広告をブロックするようなフィルタリングをしています。 他の広告は基本的にブロックしていません。
2. Ziproxyの構築 ziproxyは新しいstableを使用したいのでソースからビルド
 $ wget &amp;ldquo;http://downloads.sourceforge.net/project/ziproxy/ziproxy/ziproxy-3.3.0/ziproxy-3.3.0.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fziproxy%2Ffiles%2Fziproxy%2Fziproxy-3.3.0%2F&amp;amp;ts=1366246950&amp;amp;use_mirror=jaist&amp;rdquo; -O ziproxy-3.3.0.tar.bz2
$ tar lxvf ziproxy-3.3.0.tar.bz2
$ sudo apt-get install libgif-dev libjasper-dev libsasl2-dev
$ make -j8
$ sudo make install
$ sudo cp -ra etc/ziproxy /usr/local/etc/
$ ziproxy -h</description>
			<content type="html"><![CDATA[<p>DTIワンコインSIMを使って9ヶ月くらいになります。</p>
<p>昨年まではそんなに遅さを感じなかったのですが、外出先でどうしてもWebを開かなくてはいけないことがちょっとずつですが多くなって来ました。</p>
<p>そこでWebコンテンツなどを最適化(圧縮)するようなプロキシをたてようかと思いました。</p>
<p>DTIの他にbmobileやIIJのSIMにも有効だと思います。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>プロキシサーバは以下の3つを使用します。</p>
<ul>
<li><a href="http://www.privoxy.org/">Privoxy</a>:
広告削除などの不必要なコンテンツをフィルタリングできるプロキシ。</li>
<li><a href="http://www.squid-cache.org/">Squid</a>: <a href="http://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7">リバースプロキシ</a>。キャッシュ。負荷分散に使われることが多いです。(nginxで代用する場合もありますね。)</li>
<li><a href="http://ziproxy.sourceforge.net/">Ziproxy</a>:
画像などのコンテンツを圧縮するプロキシ。</li>
</ul>
<p>通信の流れは以下の順番で行われます。</p>
<p><!-- raw HTML omitted --><strong>インターネット</strong><!-- raw HTML omitted -->-&gt;<!-- raw HTML omitted --><strong>Privoxy(フィルタリング)<strong><!-- raw HTML omitted -->-&gt;<!-- raw HTML omitted --></strong>Ziproxy(コンテンツ圧縮)<strong><!-- raw HTML omitted -->-&gt;<!-- raw HTML omitted -->Squid(キャッシュ)<!-- raw HTML omitted --><!-- raw HTML omitted -->-&gt;<!-- raw HTML omitted --></strong>スマフォ</strong></p>
<p>それでは構築はじめます。</p>
<p>環境はUbuntu 12.04 64bit</p>
<ol>
<li><a href="#1-privoxy">Privoxyの構築</a></li>
<li><a href="#2-ziproxy">Ziproxyの構築</a></li>
<li><a href="#3-squid">Squidの構築</a></li>
</ol>
<h3 id="1-privoxy">1. Privoxyの構築</h3>
<blockquote>
<p>$ sudo apt-get install privoxy</p>
</blockquote>
<p>※フィルタリングの設定等はここでは書きません。私の鯖ではアダルト広告をブロックするようなフィルタリングをしています。
他の広告は基本的にブロックしていません。</p>
<h3 id="2-ziproxy">2. Ziproxyの構築</h3>
<p>ziproxyは新しいstableを使用したいのでソースからビルド</p>
<blockquote>
<p>$ wget
&ldquo;<a href="http://downloads.sourceforge.net/project/ziproxy/ziproxy/ziproxy-3.3.0/ziproxy-3.3.0.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fziproxy%2Ffiles%2Fziproxy%2Fziproxy-3.3.0%2F&amp;ts=1366246950&amp;use">http://downloads.sourceforge.net/project/ziproxy/ziproxy/ziproxy-3.3.0/ziproxy-3.3.0.tar.bz2?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fziproxy%2Ffiles%2Fziproxy%2Fziproxy-3.3.0%2F&amp;ts=1366246950&amp;use</a>_mirror=jaist&rdquo;
-O ziproxy-3.3.0.tar.bz2<br>
$ tar lxvf ziproxy-3.3.0.tar.bz2<br>
$ sudo apt-get install libgif-dev libjasper-dev libsasl2-dev<br>
$ make -j8<br>
$ sudo make install<br>
$ sudo cp -ra etc/ziproxy /usr/local/etc/<br>
$ ziproxy -h<br>
$ sudo mkdir -p /var/log/ziproxy<br>
$ sudo chown ziproxy:ziproxy /var/log/ziproxy<br>
$ sudo adduser &ndash;no-create-home &ndash;disabled-password ziproxy<br>
$ sudo vim /etc/init.d/ziproxy<br>
$ sudo chmod +x /etc/init.d/ziproxy<br>
$ sudo update-rc.d ziproxy defaults<br>
$ sudo service ziproxy start<br>
$ sudo service ziproxy status</p>
</blockquote>
<p>続いて設定</p>
<blockquote>
<p>$ sudo vim /usr/local/etc/ziproxy/ziproxy.conf</p>
</blockquote>
<h3 id="3-squid">3. Squidの構築</h3>
<p>squidは新しいstableを使用したいのでソースからビルド</p>
<blockquote>
<p>$ wget <a href="http://www.squid-cache.org/Versions/v3/3.3/squid-3.3.3.tar.gz">http://www.squid-cache.org/Versions/v3/3.3/squid-3.3.3.tar.gz</a><br>
$ tar zxvf squid-3.3.３.tar.gz<br>
$ cd squid-3.3.3<br>
$ ./configure &ndash;prefix=/usr/local/squid<br>
$ make -j8<br>
$ sudo make install<br>
$ sudo ln -s /usr/local/squid/sbin/squid /usr/local/sbin/<br>
$ sudo ln -s /usr/local/squid/bin/squidclient /usr/local/bin/<br>
$ squid -v<br>
$ sudo chown nobody:nogroup -R /usr/local/squid/var/<br>
$ sudo vim /etc/init.d/squid<br>
$ sudo update-rc.d squid defaults</p>
</blockquote>
<p>start-stop-daemonだと複数pid管理ができないっぽい？のかプロセスを殺しきれなかったので<a href="http://tbaba-prog.blogspot.jp/2011/04/chkconfigsquid-init-script_29.html">こちら</a>を参考にしました。</p>
<p>続いて設定<br>
$ sudo vim /usr/local/squid/etc/squid.conf<br>
以上で構築終了です。</p>
<p>各プロキシサーバを再起動します</p>
<blockquote>
<p>$ sudo service privoxy restart<br>
$ sudo service ziproxy restart<br>
$ sudo squid -f /usr/local/squid/etc/squid.conf -z<br>
$ sudo service squid restart</p>
</blockquote>
<p>squid -zでスワップファイルを最初に必ず作ってください。</p>
<p>squidサービスを起動してもすぐに終了してしまう場合の一つにこれがあります。</p>
<p>以上で終了です。</p>
<p>ちなみに</p>
<blockquote>
<p>$ squidclient mgr:info</p>
</blockquote>
<p>でsquidのキャッシュ情報等が見れます。</p>
<p>Cache information for
squidのヒット率を見ながらrefresh_patternを調整していけばいいと思います。</p>
<p>私はこの他にユーザ認証とクライアント-リモート鯖間で通信を暗号化したかったので</p>
<p>SSH
Tunnelを使ってリモート鯖にあるプロキシへアクセスするようにしています。</p>
<p>そのためプロキシサーバを内側からのみアクセスできるようにsquidのaclはそのままにしています。</p>
<p>これをするとパフォーマンスが結構落ちちゃう場合がありますが、公衆無線LANなどでも安心して使えるようになります。</p>
<p>最後に、ポート等はデフォルトを避けるようにしましょう！</p>
<p>今後の予定:<br>
よくアクセスするサイトのフィードから事前にクローラを走らせキャッシュさせる仕組みをつくろうかなと考えています。</p>
]]></content>
		</item>
		
		<item>
			<title>Pythonで行儀の良いデーモンを作るpython-daemonを現行のPythonでも動作するようにした</title>
			<link>https://github.pyyoshi.com/blog/2013/05/Python%E3%81%A7%E8%A1%8C%E5%84%80%E3%81%AE%E8%89%AF%E3%81%84%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8Bpython-daemon%E3%82%92%E7%8F%BE%E8%A1%8C%E3%81%AEPython%E3%81%A7%E3%82%82%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</link>
			<pubDate>Thu, 09 May 2013 00:02:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/Python%E3%81%A7%E8%A1%8C%E5%84%80%E3%81%AE%E8%89%AF%E3%81%84%E3%83%87%E3%83%BC%E3%83%A2%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8Bpython-daemon%E3%82%92%E7%8F%BE%E8%A1%8C%E3%81%AEPython%E3%81%A7%E3%82%82%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%97%E3%81%9F/</guid>
			<description>行儀が良いデーモンを作るのはとても複雑で難しい。
それをpython-daemonを使えば簡単に行儀の良いデーモンがつくれちゃう。
とっても便利で良いのですが。
これ、lockfileの内部が変更されて修正しないとpidファイル生成部分に問題が起きちゃうんですね。
LinkFileLockがLinkLockFileに変更されLinkFileLockがLinkLockFileクラスを呼び出す関数になってしまったっということ。
詳しくはコード見てください。
ということでさくっと修正したものをgithubにあげておきました。
テストも完走しています(^0_0^)
残念なことにオリジナルのレポジトリはなくなっているのでpullreqすることができません。
よってPyPiに上がってるものを更新してもらうこともできません。
ちょっともやもやするので、何かしらできたらなと考え中
PyYoshi/python-daemon</description>
			<content type="html"><![CDATA[<p>行儀が良いデーモンを作るのはとても複雑で難しい。</p>
<p>それを<a href="https://pypi.python.org/pypi/python-daemon/">python-daemon</a>を使えば簡単に行儀の良いデーモンがつくれちゃう。</p>
<p>とっても便利で良いのですが。</p>
<p>これ、<a href="https://pypi.python.org/pypi/lockfile">lockfile</a>の内部が変更されて修正しないとpidファイル生成部分に問題が起きちゃうんですね。</p>
<p>LinkFileLockがLinkLockFileに変更されLinkFileLockがLinkLockFileクラスを呼び出す関数になってしまったっということ。</p>
<p>詳しくはコード見てください。</p>
<p>ということでさくっと修正したものを<a href="https://github.com/PyYoshi/python-daemon/tree/own">github</a>にあげておきました。</p>
<p>テストも完走しています(^0_0^)</p>
<p>残念なことにオリジナルのレポジトリはなくなっているのでpullreqすることができません。</p>
<p>よってPyPiに上がってるものを更新してもらうこともできません。</p>
<p>ちょっともやもやするので、何かしらできたらなと考え中</p>
<p><a href="https://github.com/PyYoshi/python-daemon/tree/own">PyYoshi/python-daemon</a></p>
]]></content>
		</item>
		
		<item>
			<title>そろそろ</title>
			<link>https://github.pyyoshi.com/blog/2013/05/%E3%81%9D%E3%82%8D%E3%81%9D%E3%82%8D/</link>
			<pubDate>Thu, 02 May 2013 19:13:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/%E3%81%9D%E3%82%8D%E3%81%9D%E3%82%8D/</guid>
			<description>そろそろ新しいブログつくって新しい気持ちで飛び出すのもありなんじゃないかなと
自鯖にブログ建てるのメンテの関係でめんどくさいのでやらないとして
はてなも嫌いなので使いたくないとして
やはりBloggerにmarkdownの機能くっつけるのがいいのだろうか。
巷ではgistやtumblrをブログがわりに使ってる人もいるみたい。
前者は機能として微妙だけど、tumblrは結構良さそうではある。</description>
			<content type="html"><![CDATA[<p>そろそろ新しいブログつくって新しい気持ちで飛び出すのもありなんじゃないかなと</p>
<p>自鯖にブログ建てるのメンテの関係でめんどくさいのでやらないとして</p>
<p>はてなも嫌いなので使いたくないとして</p>
<p>やはりBloggerにmarkdownの機能くっつけるのがいいのだろうか。</p>
<p>巷ではgistやtumblrをブログがわりに使ってる人もいるみたい。</p>
<p>前者は機能として微妙だけど、tumblrは結構良さそうではある。</p>
]]></content>
		</item>
		
		<item>
			<title>androidで使えるjson parserの速度比較をしてみる</title>
			<link>https://github.pyyoshi.com/blog/2013/05/android%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bjson-parser%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</link>
			<pubDate>Wed, 01 May 2013 18:06:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/05/android%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bjson-parser%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83%E3%82%92%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/</guid>
			<description>json-android-compareをベースにJsonPullParserとJackson JsonのObject Mappingのベンチを追加してAndroid上で走らせてみました。
比較してるParserは以下の通り
 Android標準(API依存) gson 2.2.3 json simple 1.1.1 json smart 1.1.1 Jackson Json 1.9.12 Jackson Json 1.9.12 - Object Mapping JsonPullParser 1.6.1  テストした端末は2つ
 CM10ベースのAinol Elf(ROM) 私が開発してるCM9ベースのP-01D(ROM)  ベンチ結果:
まずは1のAinol Elf

続いてP-01D



Streaming処理ならJackson Json一択ですね。 個人的にJacksonは使いやすいので、この場合はこれを選択すると思います。
一方Object MappingではJacksonはJPPと比べると遅いですねぇ。
まぁでも許容範囲なのかな。
TwitterみてるとJPP熱いみたいだし、開発者も日本の方なのでコミュニティに質問すればすぐ返ってきそうではあります。
コードはこちらです。正しいベンチの走らせ方してると思えないので、指摘アレばissueに投げてください。
ではでは</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/martinadamek/json-android-compare">json-android-compare</a>をベースにJsonPullParserとJackson
JsonのObject Mappingのベンチを追加してAndroid上で走らせてみました。</p>
<p>比較してるParserは以下の通り</p>
<ol>
<li>Android標準(API依存)</li>
<li><a href="https://code.google.com/p/google-gson/">gson</a> 2.2.3</li>
<li><a href="https://code.google.com/p/json-simple/">json simple</a> 1.1.1</li>
<li><a href="https://code.google.com/p/json-smart/">json smart</a> 1.1.1</li>
<li><a href="http://jackson.codehaus.org/">Jackson Json</a> 1.9.12</li>
<li>Jackson Json 1.9.12 - Object Mapping</li>
<li><a href="https://github.com/vvakame/JsonPullParser">JsonPullParser</a> 1.6.1</li>
</ol>
<p>テストした端末は2つ</p>
<ol>
<li>CM10ベースのAinol
Elf(<a href="http://www.slatedroid.com/topic/38700-rom-cyanogenmod-10-tweaks/">ROM</a>)</li>
<li>私が開発してるCM9ベースのP-01D(<a href="https://github.com/CM4IS01/android_device_panasonic_ponyo">ROM</a>)</li>
</ol>
<p>ベンチ結果:</p>
<p>まずは1のAinol Elf</p>
<p><a href="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-172857.png"><img src="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-172857.png" alt=""></a></p>
<p>続いてP-01D</p>
<p><a href="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918.png"><img src="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918.png" alt=""></a></p>
<p><a href="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918_2.png"><img src="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918_2.png" alt=""></a></p>
<p><a href="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918_3.png"><img src="/images/2013-05-01-androiddeshi-erujson-parsernosu-du-bi-jiao-woshitemiru-device-2013-05-01-175918_3.png" alt=""></a></p>
<p>Streaming処理ならJackson Json一択ですね。 </p>
<p>個人的にJacksonは使いやすいので、この場合はこれを選択すると思います。</p>
<p>一方Object MappingではJacksonはJPPと比べると遅いですねぇ。</p>
<p>まぁでも許容範囲なのかな。</p>
<p>TwitterみてるとJPP熱いみたいだし、開発者も日本の方なのでコミュニティに質問すればすぐ返ってきそうではあります。</p>
<p>コードは<a href="https://github.com/PyYoshi/json-android-compare">こちら</a>です。正しいベンチの走らせ方してると思えないので、指摘アレばissueに投げてください。</p>
<p>ではでは</p>
]]></content>
		</item>
		
		<item>
			<title>boost.regex re2 pcre onigurumaの4つregexの速度比較</title>
			<link>https://github.pyyoshi.com/blog/2013/04/boost.regex-re2-pcre-oniguruma%E3%81%AE4%E3%81%A4regex%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83/</link>
			<pubDate>Sun, 28 Apr 2013 11:49:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/boost.regex-re2-pcre-oniguruma%E3%81%AE4%E3%81%A4regex%E3%81%AE%E9%80%9F%E5%BA%A6%E6%AF%94%E8%BC%83/</guid>
			<description>こちらのコードを使って計測しました.
以下結果

boostとre2が圧倒的に早いですね。それと比べてonigurumatとpcreは遅く、更に要素数が増えるとpcreは途中で落ちてしまいました。
スプレッドシートはこちら</description>
			<content type="html"><![CDATA[<p><a href="https://github.com/tkuro11/RegProf">こちら</a>のコードを使って計測しました.</p>
<p>以下結果<br>
<a href="/images/2013-04-28-boost-regex-re2-pcre-onigurumano4tsuregexnosu-du-bi-jiao-dsfafe.png"><img src="/images/2013-04-28-boost-regex-re2-pcre-onigurumano4tsuregexnosu-du-bi-jiao-dsfafe.png" alt=""></a></p>
<p>boostとre2が圧倒的に早いですね。それと比べてonigurumatとpcreは遅く、更に要素数が増えるとpcreは途中で落ちてしまいました。</p>
<p>スプレッドシートは<a href="https://docs.google.com/spreadsheet/pub?key=0AmjBbq6walJvdHNfWWhkLUJ4eVJkT1dlcjl0S3dfclE&amp;single=true&amp;gid=0&amp;output=html">こちら</a></p>
]]></content>
		</item>
		
		<item>
			<title>GingerをLinuxデスクトップ環境でも使えるようにアプリ作ってみた</title>
			<link>https://github.pyyoshi.com/blog/2013/04/Ginger%E3%82%92Linux%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
			<pubDate>Sat, 27 Apr 2013 22:32:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/Ginger%E3%82%92Linux%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E7%92%B0%E5%A2%83%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%82%A2%E3%83%97%E3%83%AA%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
			<description>最近良くついったーでみかけるGinger。
これなんだろうと持って調べてみたら、英文を校正してくれるとても便利なサービスのよう。
これは使わないわけにはいかないだろうと思いクライアントがないか探したけれど、残念ながらLinux環境で動くものはブラウザ拡張のものだけみたい。
とても残念だ。
ということでQt Quickでアプリ作って見ました。
初めてQMLというものを触って見ましたが、ロジックコードはJavaScriptでかけるのでサクサクかけました。
UI部分はデザイナである程度かけますが元々あるコンポーネントはとても少なく、自分でボタンのようなものなどを作らないと行けないのが結構めんどくさかったです。
いちよQt Quickでアプリを作っているので、やろうと思えばAndroid上でも動かせるかと思います。UIの修正が必要だと思いますが。
コードはGitHubに置いて有ります。
ではでは</description>
			<content type="html"><![CDATA[<p>最近良くついったーでみかける<a href="http://www.getginger.jp/">Ginger</a>。</p>
<p>これなんだろうと持って調べてみたら、英文を校正してくれるとても便利なサービスのよう。</p>
<p>これは使わないわけにはいかないだろうと思いクライアントがないか探したけれど、残念ながらLinux環境で動くものはブラウザ拡張のものだけみたい。</p>
<p>とても残念だ。</p>
<p>ということでQt Quickでアプリ作って見ました。</p>
<p>初めてQMLというものを触って見ましたが、ロジックコードはJavaScriptでかけるのでサクサクかけました。</p>
<p>UI部分はデザイナである程度かけますが元々あるコンポーネントはとても少なく、自分でボタンのようなものなどを作らないと行けないのが結構めんどくさかったです。</p>
<p>いちよQt
Quickでアプリを作っているので、やろうと思えばAndroid上でも動かせるかと思います。UIの修正が必要だと思いますが。</p>
<p>コードは<a href="https://github.com/PyYoshi/GingerQute">GitHub</a>に置いて有ります。</p>
<p>ではでは</p>
]]></content>
		</item>
		
		<item>
			<title>投稿だけできるTwitterクライアント作った</title>
			<link>https://github.pyyoshi.com/blog/2013/04/%E6%8A%95%E7%A8%BF%E3%81%A0%E3%81%91%E3%81%A7%E3%81%8D%E3%82%8BTwitter%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F/</link>
			<pubDate>Thu, 25 Apr 2013 19:09:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/%E6%8A%95%E7%A8%BF%E3%81%A0%E3%81%91%E3%81%A7%E3%81%8D%E3%82%8BTwitter%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F/</guid>
			<description>デスクトップにツイッタクライアント置くとどうしてもスペースの無駄になってしまうので、タイムラインはAndroidタブレットにtwicle plusを入れて監視していました。
投稿する都度TwitterWeb開いてやっていたのですが、それこそ効率を落とす原因だと思ったのでさくっと投稿だけできるツイッタクライアント作りました。
Twiq for Desktop - Github
Twitter APIライブラリはtweepyに任せて、UIはPySideを使って書きました。

自分しか使わないのでデザインもクソも無いです
上のコンボボックスはアカウント用、下はこれからつけようとしてる機能のもの、＋と✕はアカウント追加と削除用です。
機能は
 投稿機能 マルチアカウント機能 UnDo機能  の３つです。
投稿はCtrl+Enter、UnDoはCtrl+Uで行われます。</description>
			<content type="html"><![CDATA[<p>デスクトップにツイッタクライアント置くとどうしてもスペースの無駄になってしまうので、タイムラインはAndroidタブレットにtwicle
plusを入れて監視していました。</p>
<p>投稿する都度TwitterWeb開いてやっていたのですが、それこそ効率を落とす原因だと思ったのでさくっと投稿だけできるツイッタクライアント作りました。</p>
<p><a href="https://github.com/PyYoshi/Twiq4Desktop">Twiq for Desktop - Github</a></p>
<p>Twitter APIライブラリはtweepyに任せて、UIはPySideを使って書きました。</p>
<p><a href="/images/2013-04-25-tou-gao-dakedekirutwitterkuraiantozuo-tsuta-dfdsf1.png"><img src="/images/2013-04-25-tou-gao-dakedekirutwitterkuraiantozuo-tsuta-dfdsf1.png" alt=""></a></p>
<p>自分しか使わないのでデザインもクソも無いです</p>
<p>上のコンボボックスはアカウント用、下はこれからつけようとしてる機能のもの、＋と✕はアカウント追加と削除用です。</p>
<p>機能は</p>
<ol>
<li>投稿機能</li>
<li>マルチアカウント機能</li>
<li>UnDo機能</li>
</ol>
<p>の３つです。</p>
<p>投稿はCtrl+Enter、UnDoはCtrl+Uで行われます。</p>
<p>久しぶりにQt触ったせいか最初はかなり苦戦しましたが慣れてくればこっちのものですね。どっかのフレームワークよりちゃんと動いてくれるしQt<!-- raw HTML omitted -->✌(&lsquo;ω&rsquo;)✌ｻｲｺｰ<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>mamemoseを利用したリアルタイムmarkdown編集</title>
			<link>https://github.pyyoshi.com/blog/2013/04/mamemose%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0markdown%E7%B7%A8%E9%9B%86/</link>
			<pubDate>Fri, 19 Apr 2013 12:59:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/mamemose%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0markdown%E7%B7%A8%E9%9B%86/</guid>
			<description>mamemoseというmarkdownプレビューツールが結構便利そうだったので環境を作って見ました。
Mac使いはKobitoが便利でいいと思います！
主な機能はREADMEを見るといいと思います。
上げるとすれば
 markdownのプレビュー シンタックスハイライト LaTex記法を使える  だと思います。
では環境構築しましょう。
私はRubyistでは無いのでRuby開発環境などなかったので色々調べながらやりました。
Pythonで言うところのVirtualenvみたいなものはrbenvというもので行えるみたいです。
それのセットアップから行いました。
rbenvとプラグインのruby-buildのインストール $ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
$ echo &amp;lsquo;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;rdquo;&amp;rsquo; &amp;gt;&amp;gt; ~/.bashrc
$ echo &amp;lsquo;eval &amp;ldquo;$(rbenv init -)&amp;quot;&amp;rsquo; &amp;gt;&amp;gt; ~/.bashrc
$ cd ~/src
$ git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
rubyのビルドとインストール $ rbenv install 2.0.0-p0
$ rbenv global 2.0.0-p0
mamemoseをgemからインストール $ gem install mamemose
$ rbenv rehash
PATHが通ってる所で
$ vim run_mamemose
$ chmod +x run_mamemose
設定ファイルの作成 設定は~/.mamemose.rbを読みに行くみたいなので
$ vim ~/.</description>
			<content type="html"><![CDATA[<p>mamemoseというmarkdownプレビューツールが結構便利そうだったので環境を作って見ました。</p>
<p>Mac使いはKobitoが便利でいいと思います！</p>
<p>主な機能は<a href="https://github.com/daimatz/mamemose/blob/master/README.md#">README</a>を見るといいと思います。</p>
<p>上げるとすれば</p>
<ul>
<li>markdownのプレビュー</li>
<li>シンタックスハイライト</li>
<li>LaTex記法を使える</li>
</ul>
<p>だと思います。</p>
<p>では環境構築しましょう。</p>
<p>私はRubyistでは無いのでRuby開発環境などなかったので色々調べながらやりました。</p>
<p>Pythonで言うところのVirtualenvみたいなものはrbenvというもので行えるみたいです。</p>
<p>それのセットアップから行いました。</p>
<h3 id="rbenvruby-build">rbenvとプラグインのruby-buildのインストール</h3>
<p>$ git clone git://github.com/sstephenson/rbenv.git ~/.rbenv<br>
$ echo &lsquo;export PATH=&quot;$HOME/.rbenv/bin:$PATH&rdquo;&rsquo; &gt;&gt; ~/.bashrc<br>
$ echo &lsquo;eval &ldquo;$(rbenv init -)&quot;&rsquo; &gt;&gt; ~/.bashrc<br>
$ cd ~/src<br>
$ git clone git://github.com/sstephenson/ruby-build.git
~/.rbenv/plugins/ruby-build</p>
<h3 id="ruby">rubyのビルドとインストール</h3>
<p>$ rbenv install 2.0.0-p0</p>
<p>$ rbenv global 2.0.0-p0</p>
<h3 id="mamemosegem">mamemoseをgemからインストール</h3>
<p>$ gem install mamemose</p>
<p>$ rbenv rehash</p>
<p>PATHが通ってる所で</p>
<p>$ vim run_mamemose<br>
$ chmod +x run_mamemose</p>
<h3 id="heading">設定ファイルの作成</h3>
<p>設定は~/.mamemose.rbを読みに行くみたいなので</p>
<p>$ vim ~/.mamemose.rb</p>
<p>READMEに書いてあるサンプルからポートとDOCルートの場所を変えただけです。</p>
<p>追記：<br>
cdnから取ってきていたjsなどのファイルをローカルに置くように変更しました。<br>
DOCUMENT_ROOT以下に<a href="https://gist.github.com/PyYoshi/5417878#file-mamemose_statics-7z">これ</a>を展開した2つのディレクトリを置いてください。</p>
<h4 id="heading-1">以上</h4>
<p>これで実行できるようになりました。</p>
<p>~/Documents/markdown以下に適当なファイルを置いて　<a href="http://127.0.0.1:28888/">http://127.0.0.1:28888/</a>　を開いたあと編集中のものを開きます。</p>
<p>エディタに戻り編集し保存するとブラウザ側で変更が更新されていることがわかるかと思います。(websocketでイベント処理しているみたい)</p>
<p>これでgist開かずともローカルでmarkdown編集が捗りそうですね！</p>
<p>ただ、ちょっと不満もあってコンフィグファイルがHOMEディレクトリからしか読みに行かないのでプロジェクトごとに編集しなくてはいけなかったり、実用的じゃない部分もあります。</p>
<p>いま開発者とコンタクトをとってる最中なのでもしかしたら、configを動的に読み込めるように修正してもらえるかも</p>
<p>※Rubyistじゃないので下手こくのが怖い＞＜</p>
<p>参考:</p>
<p><a href="http://krakenbeal.blogspot.jp/2012/03/ubunturbenvruby-buildruby.html">ubuntuにrbenv+ruby-buildをインストールし、rubyを切り替えられるようにする。</a></p>
]]></content>
		</item>
		
		<item>
			<title>メインPCをLinuxにしてから変わったこと</title>
			<link>https://github.pyyoshi.com/blog/2013/04/%E3%83%A1%E3%82%A4%E3%83%B3PC%E3%82%92Linux%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</link>
			<pubDate>Tue, 09 Apr 2013 12:43:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/%E3%83%A1%E3%82%A4%E3%83%B3PC%E3%82%92Linux%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8B%E3%82%89%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8/</guid>
			<description>メインPCをWindowsからLinuxに変更して4〜5ヶ月は過ぎたかなと思ったので実際に良かった点とか悪かった点を書いていこうかと思う。
良かった点
プログラミングをする上で開発環境を楽に構築できるようになった
悪かった点
マルチメディア関係、ゲーム関係はどうしようもなくダメ
動かないデバイスかどうか見極めるのが難しい
楽しくなった点
悪かった点を克服しようとツールを作るようになってきた。(Linuxのためにという意味)
Windows上で動いてるプログラムがOSSの場合、移植してどうにかしてみようと思うようになった。
上記の点を詳しく書いていこうと思う。
良い点
悪い点
ゲーム関係はどうしようもないけれど、音楽再生環境や動画再生環境はどうにかなった。
動画再生環境はVLCとかSMPlayerとか使えばなんとでもなります。
ごにょごにょすればVLCでBDを再生することだってできます。
音楽再生環境は最初deadbeefを使っていたのだけれど、昔リッピングしてタグ付けされたファイル等が文字化けし、耐えられなくなって探していたらNightingaleというかみプレイヤーを発見しました。Geckoベースなのでアドオンも比較的簡単に作れて便利。</description>
			<content type="html"><![CDATA[<p>メインPCをWindowsからLinuxに変更して4〜5ヶ月は過ぎたかなと思ったので実際に良かった点とか悪かった点を書いていこうかと思う。</p>
<p>良かった点<br>
プログラミングをする上で開発環境を楽に構築できるようになった</p>
<p>悪かった点<br>
マルチメディア関係、ゲーム関係はどうしようもなくダメ<br>
動かないデバイスかどうか見極めるのが難しい</p>
<p>楽しくなった点<br>
悪かった点を克服しようとツールを作るようになってきた。(Linuxのためにという意味)<br>
Windows上で動いてるプログラムがOSSの場合、移植してどうにかしてみようと思うようになった。</p>
<p>上記の点を詳しく書いていこうと思う。</p>
<p>良い点</p>
<p>悪い点</p>
<p>ゲーム関係はどうしようもないけれど、音楽再生環境や動画再生環境はどうにかなった。<br>
動画再生環境はVLCとかSMPlayerとか使えばなんとでもなります。<br>
ごにょごにょすればVLCでBDを再生することだってできます。<br>
音楽再生環境は最初deadbeefを使っていたのだけれど、昔リッピングしてタグ付けされたファイル等が文字化けし、耐えられなくなって探していたらNightingaleというかみプレイヤーを発見しました。Geckoベースなのでアドオンも比較的簡単に作れて便利。</p>
]]></content>
		</item>
		
		<item>
			<title>Nightingale Addonでxhr.responseTextを使用したDOMを作成する場合の注意点</title>
			<link>https://github.pyyoshi.com/blog/2013/04/Nightingale-Addon%E3%81%A7xhr.responseText%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FDOM%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Wed, 03 Apr 2013 10:25:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/Nightingale-Addon%E3%81%A7xhr.responseText%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FDOM%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>昨日の投稿でDOM操作できないことを嘆いていたのですが、その解決方法がわかりました。
なお、この症状はaddon上でのみ起きます。それへの対処です。
一般的にXHRのresponseTextをDOMへ変換するときは
 var dom = document.createElement(&amp;ldquo;div&amp;rdquo;);
dom.innerHTML = xhr.responseText;
 のようにやるかと思います。
しかしNightingaleやFirefoxのaddon上でこれをやるとXULなオブジェクトになってしまい、ただしくDOMを扱えなくなります(自分なりの仮説)
そのため正しくHTMLDocumentを作ってやれば良いのです。
以下の関数がそれを行うためのものです。
これによってaddon上でもただしく快適にDOMを扱えるようになります！
※このコードはNightingaleとFirefox3.6.x以前のブラウザでのみ動作保証します。それ以降のFirefoxは素直に document.implementation.createHTMLDocumentを使いましょう参考:
 Analyzing and manipulating a responseText property containing an HTML document Safely parsing simple HTML to DOM   </description>
			<content type="html"><![CDATA[<p><a href="/2013/04/Nightingale%E3%81%AEaddon%E3%81%A7dom%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/">昨日の投稿</a>でDOM操作できないことを嘆いていたのですが、その解決方法がわかりました。</p>
<p>なお、この症状はaddon上でのみ起きます。それへの対処です。</p>
<p>一般的にXHRのresponseTextをDOMへ変換するときは</p>
<blockquote>
<p><strong>var dom = document.createElement(&ldquo;div&rdquo;);<br>
dom.innerHTML = xhr.responseText;</strong></p>
</blockquote>
<p>のようにやるかと思います。</p>
<p>しかしNightingaleやFirefoxのaddon上でこれをやるとXULなオブジェクトになってしまい、ただしくDOMを扱えなくなります(自分なりの仮説)</p>
<p>そのため正しくHTMLDocumentを作ってやれば良いのです。</p>
<p>以下の関数がそれを行うためのものです。</p>
<p>これによってaddon上でもただしく快適にDOMを扱えるようになります！</p>
<p><!-- raw HTML omitted -->※このコードはNightingaleとFirefox3.6.x以前のブラウザでのみ動作保証します。それ以降のFirefoxは素直に <!-- raw HTML omitted --><strong>document.implementation.createHTMLDocument<!-- raw HTML omitted --> <!-- raw HTML omitted --></strong><!-- raw HTML omitted -->を使いましょう<!-- raw HTML omitted --></p>
<p>参考:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Analyzing_and_manipulating_a_responseText_property_containing_an_HTML_document">Analyzing and manipulating a responseText property containing an
HTML
document</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Code_snippets/HTML_to_DOM#Safely_parsing_simple_HTML.c2.a0to_DOM">Safely parsing simple HTML to
DOM </a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Nightingaleのaddonでdomが使えない。</title>
			<link>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%AEaddon%E3%81%A7dom%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/</link>
			<pubDate>Tue, 02 Apr 2013 23:01:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%AEaddon%E3%81%A7dom%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/</guid>
			<description>jsfidleでdomを動かすなどの処理はうまくいくのですが、addon内でdomを使うことができないようになっている。
ほんとに謎仕様である。
普通のFirefoxでもaddonではdom扱えないのかな？
正直、これ使えないのクソだと思います。スクレイピングやりたかったら文字列操作ですべてやれとか僕には無理です…
解決策ないのかしら解決策はこちら</description>
			<content type="html"><![CDATA[<p>jsfidleでdomを動かすなどの処理はうまくいくのですが、addon内でdomを使うことができないようになっている。</p>
<p>ほんとに謎仕様である。</p>
<p>普通のFirefoxでもaddonではdom扱えないのかな？</p>
<p>正直、これ使えないのクソだと思います。スクレイピングやりたかったら文字列操作ですべてやれとか僕には無理です…</p>
<p><!-- raw HTML omitted -->解決策ないのかしら<!-- raw HTML omitted --></p>
<p>解決策は<a href="/2013/04/Nightingale-Addon%E3%81%A7xhr.responseText%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9FDOM%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/">こちら</a></p>
]]></content>
		</item>
		
		<item>
			<title>Nightingaleでaddonのデバッグに必要なもの</title>
			<link>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%A7addon%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</link>
			<pubDate>Tue, 02 Apr 2013 01:28:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/04/Nightingale%E3%81%A7addon%E3%81%AE%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE/</guid>
			<description>Linuxで音楽を聴くときはdeadbeefを使っていたのですが、タグがsjisとかだと文字化けするしプラグインもあんまりよくないので乗り換え先を探していました。
そんな時にSongbirdからforkされたNightingaleというプレイヤーを発見。
どうやらこいつはFirefoxなどで使われているGeckoエンジンをベースに作られているらしく、addonの作成ノウハウをそのまま活かせるみたいなんです。
それで自分でほしいプラグインもjsでちょくちょく書けるようにしたくてデバッグ環境の構築をしようかと思ったのですが、本家SongbirdのWiKi(Google Cache)にアクセスできなくなっているため探すのに一苦労しました…
デバッグ環境の構築は至って簡単で
Firefox addonのJavascript DebuggerとNightingale Developer Toolsをインスコ&amp;amp;再起動すればJSのデバッグを手軽に行えるようになります。
以上</description>
			<content type="html"><![CDATA[<p>Linuxで音楽を聴くときは<a href="http://deadbeef.sourceforge.net/">deadbeef</a>を使っていたのですが、タグがsjisとかだと文字化けするしプラグインもあんまりよくないので乗り換え先を探していました。</p>
<p>そんな時にSongbirdからforkされた<a href="http://getnightingale.com/">Nightingale</a>というプレイヤーを発見。</p>
<p>どうやらこいつはFirefoxなどで使われているGeckoエンジンをベースに作られているらしく、addonの作成ノウハウをそのまま活かせるみたいなんです。</p>
<p>それで自分でほしいプラグインもjsでちょくちょく書けるようにしたくてデバッグ環境の構築をしようかと思ったのですが、本家SongbirdのWiKi(<a href="http://webcache.googleusercontent.com/search?q=cache:PY_HWorZsbcJ:wiki.songbirdnest.com/Developer/Articles/Debugging&amp;hl=ja&amp;client=ubuntu&amp;gl=jp&amp;strip=1">Google
Cache</a>)にアクセスできなくなっているため探すのに一苦労しました…</p>
<p>デバッグ環境の構築は至って簡単で</p>
<p>Firefox addonの<a href="http://ja.wikipedia.org/wiki/Songbird">Javascript
Debugger</a>と<a href="http://wiki.getnightingale.com/doku.php?id=add-on:devtools">Nightingale Developer
Tools</a>をインスコ&amp;再起動すればJSのデバッグを手軽に行えるようになります。</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>PL-US35APをLinuxで使う</title>
			<link>https://github.pyyoshi.com/blog/2013/03/PL-US35AP%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%86/</link>
			<pubDate>Fri, 29 Mar 2013 15:30:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/PL-US35AP%E3%82%92Linux%E3%81%A7%E4%BD%BF%E3%81%86/</guid>
			<description>もともとCreative SB X-Fi Titaniumを持っていたのだけれど、どうもこいつはLinuxではうまく動かない。
音楽を聞いている分にはいいのだけれどTeamSpeak等のVCを使うと、なぜかノイズが走るようになり終いにはなにも聞こえない状況にまでなります。
Windowsでゲームをする分には必要十分すぎるくらいの性能はあるのですが、Linux環境をメインに使うように移行して以来使い勝手が悪くてイライラしていました。
そこで安いサウンドカードでLinuxでも使えそうなものをAmazonであさりました。
それが今回動作確認できたPL-US35APです。
私の環境はKubuntu 12.04 64bitです。
この環境だと差し込んだだけでは動きませんでした。 ネットでいちよ確認して動くみたいな報告があったので一瞬びっくりしましたが、lsusbでProductID調べてUSB Audioという規格に準拠したデバイスであることがわかり、それ用に設定を行いました。
 $ sudo apt-get install alsa-tools alsa-oss alsa-utils alsa-base
 で、ひと通り必要なものをインストールして
 $ sudo vim /etc/modprobe.d/alsa-base.conf
 以下の
 options snd-usb-audio index=-2
 を
 options snd-usb-audio index=-1
 へ変更して再起動したら無事認識しました。
あとはalsamixerで入出力音声の調整を行い、システム側でデフォルトデバイスを変更すれば良いと思います。
ざっとレビューすると出力音質は蟹チップに比べたらそこそこいいように思います。
ドンシャリ音は特になく、左右の定位も曖昧ではなく自分好みでした。
なにより1000円ちょいでこれだけ使えるのだからとても満足しています。
入力音質はMM-MC15BKというマイクを一緒に買い、それで試しました。
蟹チップで試すと、ドンシャリがひどい音質になるのですがそのようなことはなく価格相応またはそれ以上の性能は出ていると思います。
マイクブーストせずともしっかり拾ってくれるのもGood！</description>
			<content type="html"><![CDATA[<p>もともとCreative SB X-Fi
Titaniumを持っていたのだけれど、どうもこいつはLinuxではうまく動かない。</p>
<p>音楽を聞いている分にはいいのだけれどTeamSpeak等のVCを使うと、なぜかノイズが走るようになり終いにはなにも聞こえない状況にまでなります。</p>
<p>Windowsでゲームをする分には必要十分すぎるくらいの性能はあるのですが、Linux環境をメインに使うように移行して以来使い勝手が悪くてイライラしていました。</p>
<p>そこで安いサウンドカードでLinuxでも使えそうなものをAmazonであさりました。</p>
<p>それが今回動作確認できた<a href="http://www.amazon.co.jp/gp/product/B001A1PR4M/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B001A1PR4M&amp;linkCode=as2&amp;tag=kimin-22">PL-US35AP</a>です。</p>
<p>私の環境はKubuntu 12.04 64bitです。</p>
<p>この環境だと差し込んだだけでは動きませんでした。
ネットでいちよ確認して動くみたいな報告があったので一瞬びっくりしましたが、lsusbでProductID調べて<a href="http://www.itf.co.jp/tech/usb-audio/whats-usbaudio">USB
Audio</a>という規格に準拠したデバイスであることがわかり、それ用に設定を行いました。</p>
<blockquote>
<p>$ sudo apt-get install alsa-tools alsa-oss alsa-utils alsa-base</p>
</blockquote>
<p>で、ひと通り必要なものをインストールして</p>
<blockquote>
<p>$ sudo vim /etc/modprobe.d/alsa-base.conf</p>
</blockquote>
<p>以下の</p>
<blockquote>
<p>options snd-usb-audio index=-2</p>
</blockquote>
<p>を</p>
<blockquote>
<p>options snd-usb-audio index=-1</p>
</blockquote>
<p>へ変更して再起動したら無事認識しました。</p>
<p>あとはalsamixerで入出力音声の調整を行い、システム側でデフォルトデバイスを変更すれば良いと思います。</p>
<p>ざっとレビューすると出力音質は蟹チップに比べたらそこそこいいように思います。</p>
<p>ドンシャリ音は特になく、左右の定位も曖昧ではなく自分好みでした。</p>
<p>なにより1000円ちょいでこれだけ使えるのだからとても満足しています。</p>
<p>入力音質は<a href="http://www.amazon.co.jp/gp/product/B0029U1VNY/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B0029U1VNY&amp;linkCode=as2&amp;tag=kimin-22">MM-MC15BK</a>というマイクを一緒に買い、それで試しました。</p>
<p>蟹チップで試すと、ドンシャリがひどい音質になるのですがそのようなことはなく価格相応またはそれ以上の性能は出ていると思います。</p>
<p>マイクブーストせずともしっかり拾ってくれるのもGood！</p>
]]></content>
		</item>
		
		<item>
			<title>大きめのファイルをバックアップするとき</title>
			<link>https://github.pyyoshi.com/blog/2013/03/%E5%A4%A7%E3%81%8D%E3%82%81%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D/</link>
			<pubDate>Wed, 27 Mar 2013 01:35:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/%E5%A4%A7%E3%81%8D%E3%82%81%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D/</guid>
			<description>いつもはtar.gz等で固めていたのだけれど、ちょくちょく展開に失敗してひどい目に合うことがある。
バックアップ用途に使うときはafioというツールを使えばいいみたいです。
途中で壊れたファイルがあっても、そのファイルをスキップして展開してくれるみたいです。はい。
使い方は各自しらべてください。
tar.gzの修復はgzrecover使えばある程度ましになります。
以上</description>
			<content type="html"><![CDATA[<p>いつもはtar.gz等で固めていたのだけれど、ちょくちょく展開に失敗してひどい目に合うことがある。</p>
<p>バックアップ用途に使うときはafioというツールを使えばいいみたいです。</p>
<p>途中で壊れたファイルがあっても、そのファイルをスキップして展開してくれるみたいです。はい。</p>
<p>使い方は各自しらべてください。</p>
<p>tar.gzの修復はgzrecover使えばある程度ましになります。</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>PeerCast IM版をLinuxで動作するように移植しました</title>
			<link>https://github.pyyoshi.com/blog/2013/03/PeerCast-IM%E7%89%88%E3%82%92Linux%E3%81%A7%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%A7%BB%E6%A4%8D%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
			<pubDate>Mon, 25 Mar 2013 12:12:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/PeerCast-IM%E7%89%88%E3%82%92Linux%E3%81%A7%E5%8B%95%E4%BD%9C%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%A7%BB%E6%A4%8D%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
			<description>PeerCast IM版をLinuxで動くように移植しました。
PeerCast　QtのUIコードも持ってきてはいますが現状では正しく動作しないです。
なのでui/linuxをmakeしてCUIとして利用してください。
あとはpcypLiteみたいな視聴ツールを作ればLinux環境で快適に視聴出来ますね。
ソース: PeerCastIM-Mod</description>
			<content type="html"><![CDATA[<p><a href="http://sourceforge.jp/projects/peercast-im/">PeerCast
IM</a>版をLinuxで動くように移植しました。</p>
<p><a href="http://mosax.sakura.ne.jp/yp4g/fswiki.cgi?page=PeerCast+Qt">PeerCast　Qt</a>のUIコードも持ってきてはいますが現状では正しく動作しないです。</p>
<p>なのでui/linuxをmakeしてCUIとして利用してください。</p>
<p>あとはpcypLiteみたいな視聴ツールを作ればLinux環境で快適に視聴出来ますね。</p>
<p>ソース: <a href="https://github.com/PyYoshi/PeerCastIM-Mod">PeerCastIM-Mod</a></p>
]]></content>
		</item>
		
		<item>
			<title>golangでfib(39)の実行時間</title>
			<link>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</link>
			<pubDate>Mon, 18 Mar 2013 00:43:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/golang%E3%81%A7fib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93/</guid>
			<description>以前の記事をgolangではどうなるのかやってみた。
結果:
$ go build fib.go$ go versiongo version go1$ time ./fib 63245986**./fib 0.54s user 0.00s system 99% cpu 0.548 total**</description>
			<content type="html"><![CDATA[<p>以前の<a href="/2013/03/Python%E3%81%A7%E3%81%AEfib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E6%AF%94%E8%BC%83/">記事</a>をgolangではどうなるのかやってみた。<br>
結果:<br>
<!-- raw HTML omitted -->$ go build fib.go<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->$ go version<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>go version go1</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->$ time ./fib                  
                                                             <!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->63245986<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->**./fib  0.54s user 0.00s
system 99% cpu 0.548 total**<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Pythonでのfib(39)の実行時間比較</title>
			<link>https://github.pyyoshi.com/blog/2013/03/Python%E3%81%A7%E3%81%AEfib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E6%AF%94%E8%BC%83/</link>
			<pubDate>Wed, 13 Mar 2013 10:08:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/Python%E3%81%A7%E3%81%AEfib39%E3%81%AE%E5%AE%9F%E8%A1%8C%E6%99%82%E9%96%93%E6%AF%94%E8%BC%83/</guid>
			<description>この記事に釣られてPythonではどんなものなのか知りたくなったのでやってみた。
実行環境:
CPU: Intel(R) Core(TM) i7 CPU 860 @ 2.80GHz
RAM: 16GB
OS: Linux 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
以下使用したコード
結果は
$ python &amp;ndash;version Python 2.7.3
$ time python ./fib.py63245986python ./fib.py 28.92s user 0.01s system 99% cpu 29.008 total
$ python3.2 &amp;ndash;version Python 3.2.3
$ time python3.2 ./fib.py63245986python3.2 ./fib.py 31.65s user 0.01s system 99% cpu 31.752 total
$ python3.3 &amp;ndash;versionPython 3.3.0$ time python3.</description>
			<content type="html"><![CDATA[<p><a href="http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/">この</a>記事に釣られてPythonではどんなものなのか知りたくなったのでやってみた。</p>
<p>実行環境:<br>
CPU: Intel(R) Core(TM) i7 CPU  860  @ 2.80GHz<br>
RAM: 16GB<br>
OS: Linux 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013
x86_64 x86_64 x86_64 GNU/Linux</p>
<p>以下使用したコード<br>
結果は</p>
<p><!-- raw HTML omitted -->$ python &ndash;version  <!-- raw HTML omitted --><br>
<strong>Python 2.7.3</strong><br>
<!-- raw HTML omitted -->$ time python ./fib.py<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->63245986<!-- raw HTML omitted --><br>
<strong>python ./fib.py  28.92s user 0.01s system 99% cpu 29.008 total</strong><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->$ python3.2 &ndash;version
  <!-- raw HTML omitted --><br>
<strong>Python 3.2.3</strong><br>
<!-- raw HTML omitted -->$ time python3.2
./fib.py<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->63245986<!-- raw HTML omitted --><br>
<strong>python3.2 ./fib.py  31.65s user 0.01s system 99% cpu 31.752 total</strong><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->$ python3.3 &ndash;version<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>Python 3.3.0</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->$ time python3.3 ./fib.py      
     <!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->63245986<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>python3.3 ./fib.py  32.66s
user 0.00s system 99% cpu 32.744 total</strong><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->$ pypy &ndash;version  <!-- raw HTML omitted --><br>
<strong>Python 2.7.2 (1.9+dfsg-1, Jun 19 2012, 23:45:31)</strong><br>
<strong>[PyPy 1.9.0 with GCC 4.7.0]</strong><br>
<!-- raw HTML omitted -->$ time pypy ./fib.py<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->63245986<!-- raw HTML omitted --><br>
<strong>pypy ./fib.py  8.59s user 0.03s system 99% cpu 8.676 total</strong></p>
]]></content>
		</item>
		
		<item>
			<title>node.jsでBuffer経由でArrayBufferを使う</title>
			<link>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</link>
			<pubDate>Tue, 12 Mar 2013 18:52:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/node.js%E3%81%A7Buffer%E7%B5%8C%E7%94%B1%E3%81%A7ArrayBuffer%E3%82%92%E4%BD%BF%E3%81%86/</guid>
			<description>Qiitaに書いた記事と同じです。
ブラウザ向けに書いていたコードをどうしてもサーバサイドでも使いたいと思い調べた結果以下のコードで使えることがわかった。
これでDataStream.jsをちょこっと変更するだけでnode.jsでも手軽にバイナリをいじれるようになった。
node向けに変更したDataStream.js</description>
			<content type="html"><![CDATA[<p>Qiitaに書いた記事と同じです。</p>
<p>ブラウザ向けに書いていたコードをどうしてもサーバサイドでも使いたいと思い調べた結果以下のコードで使えることがわかった。</p>
<p>これで<a href="https://github.com/kig/DataStream.js">DataStream.js</a>をちょこっと変更するだけでnode.jsでも手軽にバイナリをいじれるようになった。</p>
<p>node向けに変更した<a href="https://gist.github.com/PyYoshi/5141607">DataStream.js</a></p>
]]></content>
		</item>
		
		<item>
			<title>黒歴史クリーナーよりも確実にツイートを消すスクリプト</title>
			<link>https://github.pyyoshi.com/blog/2013/03/%E9%BB%92%E6%AD%B4%E5%8F%B2%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%88%E3%82%8A%E3%82%82%E7%A2%BA%E5%AE%9F%E3%81%AB%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%82%92%E6%B6%88%E3%81%99%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</link>
			<pubDate>Tue, 12 Mar 2013 01:17:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/03/%E9%BB%92%E6%AD%B4%E5%8F%B2%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%8A%E3%83%BC%E3%82%88%E3%82%8A%E3%82%82%E7%A2%BA%E5%AE%9F%E3%81%AB%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%82%92%E6%B6%88%E3%81%99%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88/</guid>
			<description>※黒歴史クリーナーがTwitterArchiveに対応したので以下の内容は、それらのサービスに頼りたくない人のみお読みになられればと思いますまる
黒歴史クリーナーなどのAPIを利用した削除方法だと削除しきれないツイートがどうしても出てしまいます。
なのでTwitterの設定から&amp;quot;Your Twitter archive&amp;quot;機能を利用してCSVなどのデータをダウンロードします。 ※表示言語を英語にしないと見えないかも

&amp;ldquo;Request email&amp;quot;をクリックしてある程度時間が経つとemail経由でダウンロードリンクが送られてきます。そこからDLしてください。
Windows環境の方はここからrm_tweets.exeをDLしてコマンドラインから実行します。
tweets.csvとrm_tweets.exeが同じ場所にあると仮定した場合
 &amp;gt; .\rm_tweets.exe &amp;ndash;filepath &amp;ldquo;.\tweets.csv&amp;rdquo;
 で削除が開始されるかと思います。
使い方は
 &amp;gt; .\rm_tweets.exe -h
 で確認して下さい。
他の環境の方は
 $ git clone git://github.com/PyYoshi/TweetsCleaner.git
$ cd TweetsCleaner
$ pip install -r ./requirements.txt
$ python ./rm_tweets.py &amp;ndash;filepath &amp;ldquo;./tweets.csv&amp;rdquo;
 のようにしてください。
※ただしgit cloneした後、rm_tweets.pyを開いてCONSUMER_KEYとCONSUMER_SECRETを各自セットしないと動きません。 </description>
			<content type="html"><![CDATA[<p>※黒歴史クリーナーがTwitterArchiveに対応したので以下の内容は、それらのサービスに頼りたくない人のみお読みになられればと思いますまる</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>黒歴史クリーナーなどのAPIを利用した削除方法だと削除しきれないツイートがどうしても出てしまいます。</p>
<p>なのでTwitterの設定から&quot;Your Twitter
archive&quot;機能を利用してCSVなどのデータをダウンロードします。
※表示言語を英語にしないと見えないかも</p>
<p><a href="/images/2013-03-12-hei-li-shi-kurinayorimoque-shi-nitsuitowoxiao-susukuriputo-twitter_account_archive01.jpg"><img src="/images/2013-03-12-hei-li-shi-kurinayorimoque-shi-nitsuitowoxiao-susukuriputo-twitter_account_archive01.jpg" alt=""></a></p>
<p>&ldquo;Request
email&quot;をクリックしてある程度時間が経つとemail経由でダウンロードリンクが送られてきます。そこからDLしてください。</p>
<p>Windows環境の方は<a href="https://github.com/PyYoshi/TweetsCleaner/raw/master/dist/rm_tweets.exe">ここ</a>からrm_tweets.exeをDLしてコマンドラインから実行します。</p>
<p>tweets.csvとrm_tweets.exeが同じ場所にあると仮定した場合</p>
<blockquote>
<p>&gt; .\rm_tweets.exe &ndash;filepath &ldquo;.\tweets.csv&rdquo;</p>
</blockquote>
<p>で削除が開始されるかと思います。<br>
使い方は</p>
<blockquote>
<p>&gt; .\rm_tweets.exe -h</p>
</blockquote>
<p>で確認して下さい。</p>
<p>他の環境の方は</p>
<blockquote>
<p>$ git clone git://github.com/PyYoshi/TweetsCleaner.git<br>
$ cd TweetsCleaner<br>
$ pip install -r ./requirements.txt<br>
$ python ./rm_tweets.py &ndash;filepath &ldquo;./tweets.csv&rdquo;</p>
</blockquote>
<p>のようにしてください。</p>
<h4 id="span-stylecolor-redgit-clonerm-tweetspyconsumer-keyconsumer-secretspan"><strong><!-- raw HTML omitted -->※ただしgit cloneした後、rm_tweets.pyを開いてCONSUMER_KEYとCONSUMER_SECRETを各自セットしないと動きません。<!-- raw HTML omitted --></strong></h4>
]]></content>
		</item>
		
		<item>
			<title>AngularJSがやばい</title>
			<link>https://github.pyyoshi.com/blog/2013/01/AngularJS%E3%81%8C%E3%82%84%E3%81%B0%E3%81%84/</link>
			<pubDate>Tue, 29 Jan 2013 19:47:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/01/AngularJS%E3%81%8C%E3%82%84%E3%81%B0%E3%81%84/</guid>
			<description>なにがやばいってチュートリアルの動画とかドットインストールのチュートリアルを見てもらえばわかる。
あたまおかしい
なにこれ
実際組み込むとなると、やっぱりめんどくさくなるだろうけど。
コーディングなにそれ美味しいの？ってくらい便利な機能がつきまくってる。
いろいろ調べて、現在やってるプロジェクトをこちらに鞍替えも辞さない構え
あと見てて思ったのは、JSの勉強がてらWebAppとか作る程度なら一瞬でできそうだし、モック作ってテストするときとかの簡易ページとかそのへんに有効活用できそうってことかな。
なにがやばいのかそのうちまとめたい</description>
			<content type="html"><![CDATA[<p>なにがやばいって<a href="http://docs.angularjs.org/tutorial/">チュートリアル</a>の動画とか<a href="http://dotinstall.com/lessons/basic_angularjs">ドットインストールのチュートリアル</a>を見てもらえばわかる。</p>
<p>あたまおかしい</p>
<p>なにこれ</p>
<p>実際組み込むとなると、やっぱりめんどくさくなるだろうけど。</p>
<p>コーディングなにそれ美味しいの？ってくらい便利な機能がつきまくってる。</p>
<p>いろいろ調べて、現在やってるプロジェクトをこちらに鞍替えも辞さない構え</p>
<p>あと見てて思ったのは、JSの勉強がてらWebAppとか作る程度なら一瞬でできそうだし、モック作ってテストするときとかの簡易ページとかそのへんに有効活用できそうってことかな。</p>
<p>なにがやばいのかそのうちまとめたい</p>
]]></content>
		</item>
		
		<item>
			<title>ソートアルゴリズムの可視化をしたFlashアプリがすごい！</title>
			<link>https://github.pyyoshi.com/blog/2013/01/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96%E3%82%92%E3%81%97%E3%81%9FFlash%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/</link>
			<pubDate>Sat, 26 Jan 2013 00:34:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/01/%E3%82%BD%E3%83%BC%E3%83%88%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%AE%E5%8F%AF%E8%A6%96%E5%8C%96%E3%82%92%E3%81%97%E3%81%9FFlash%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E3%81%99%E3%81%94%E3%81%84/</guid>
			<description>とてもわかり易く可視化できていると思いました。
これ見ながら、どう動いているのかコード書くといろいろ捗りそうですね！
Sorting Algorithms Visualizer - wonderfl build flash online</description>
			<content type="html"><![CDATA[<p>とてもわかり易く可視化できていると思いました。</p>
<p>これ見ながら、どう動いているのかコード書くといろいろ捗りそうですね！</p>
<p><a href="http://wonderfl.net/c/4xiQ" title="Sorting Algorithms Visualizer">Sorting Algorithms Visualizer - wonderfl build flash
online</a></p>
]]></content>
		</item>
		
		<item>
			<title>chromiumembeddedのautomateを使用する場合の注意点</title>
			<link>https://github.pyyoshi.com/blog/2013/01/chromiumembedded%E3%81%AEautomate%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Tue, 08 Jan 2013 14:12:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2013/01/chromiumembedded%E3%81%AEautomate%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>ちょっと躓いたので備忘録
cefのtoolの中にautomateっていうのがあって、これを使うと簡単にビルドすることができるようになるのだけれど、日本語環境下だとうまく動いてくれない。
automate.pyの中身を見てもらえばわかるのだが、popenで&amp;quot;svn info&amp;quot;を呼び出して、その値をパースしているから、環境によってはうまくパースできなくなる。
エラーは
 &amp;ldquo;Exception: No SVN info for: &amp;hellip;&amp;rdquo;
 となるかと思う。
コードを修正するのもいいけれど、いろいろめんどうなので
 $ LANG=C
$ automate/automate.py &amp;ndash;download-dir=/path/to/hoge &amp;ndash;url=http://chromiumembedded.googlecode.com/svn/branches/1271/cef1
 しました。</description>
			<content type="html"><![CDATA[<p>ちょっと躓いたので備忘録</p>
<p>cefのtoolの中にautomateっていうのがあって、これを使うと簡単にビルドすることができるようになるのだけれど、日本語環境下だとうまく動いてくれない。</p>
<p>automate.pyの中身を見てもらえばわかるのだが、popenで&quot;svn
info&quot;を呼び出して、その値をパースしているから、環境によってはうまくパースできなくなる。</p>
<p>エラーは</p>
<blockquote>
<p>&ldquo;Exception: No SVN info for: &hellip;&rdquo;</p>
</blockquote>
<p>となるかと思う。</p>
<p>コードを修正するのもいいけれど、いろいろめんどうなので</p>
<blockquote>
<p>$ LANG=C<br>
$ automate/automate.py &ndash;download-dir=/path/to/hoge
&ndash;url=http://chromiumembedded.googlecode.com/svn/branches/1271/cef1</p>
</blockquote>
<p>しました。</p>
]]></content>
		</item>
		
		<item>
			<title>JDKをwgetする</title>
			<link>https://github.pyyoshi.com/blog/2012/12/JDK%E3%82%92wget%E3%81%99%E3%82%8B/</link>
			<pubDate>Thu, 27 Dec 2012 17:46:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/12/JDK%E3%82%92wget%E3%81%99%E3%82%8B/</guid>
			<description>JDKはブラウザで同意のもとでDLしなくてはいけなくて、それがサーバのセットアップとなると結構めんどくさくて頭にきていたのですが、なにやら調べてみるとwgetでいけるみたいです。
 $ wget &amp;ndash;no-cookies &amp;ndash;header &amp;ldquo;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com&amp;rdquo; &amp;ldquo;http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-x64.bin&amp;quot;
 こんなかんじでおｋみたいです。
仕組みとかはChromeとかのdevtoolでみてみるといいかもです。</description>
			<content type="html"><![CDATA[<p>JDKはブラウザで同意のもとでDLしなくてはいけなくて、それがサーバのセットアップとなると結構めんどくさくて頭にきていたのですが、なにやら調べてみるとwgetでいけるみたいです。</p>
<blockquote>
<p>$ wget &ndash;no-cookies &ndash;header &ldquo;Cookie:
gpw_e24=http%3A%2F%2Fwww.oracle.com&rdquo;
&ldquo;<a href="http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-x64.bin%22">http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-x64.bin&quot;</a></p>
</blockquote>
<p>こんなかんじでおｋみたいです。</p>
<p>仕組みとかはChromeとかのdevtoolでみてみるといいかもです。</p>
]]></content>
		</item>
		
		<item>
			<title>自分のMIT Licenseページを作る簡単な方法</title>
			<link>https://github.pyyoshi.com/blog/2012/12/%E8%87%AA%E5%88%86%E3%81%AEMIT-License%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B%E7%B0%A1%E5%8D%98%E3%81%AA%E6%96%B9%E6%B3%95/</link>
			<pubDate>Sun, 02 Dec 2012 12:35:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/12/%E8%87%AA%E5%88%86%E3%81%AEMIT-License%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B%E7%B0%A1%E5%8D%98%E3%81%AA%E6%96%B9%E6%B3%95/</guid>
			<description>MITライセンスのページってOSIのページくらいしか見当たらないし、権利者絡みでもいろいろあると思って調べてたら、手軽にできるサービスを見つけました。
mit-license.orgというサイトで行えます。任意のユーザ名がサブドメインとして選べ、個人のライセンスページになるという仕組みみたいです。
Remy Sharpさんありがとう。
ということでサービスへの登録ですが、json形式でcurl使って投げてあげれば作られるという簡単な方法です。
私の場合だと
 $ curl -d&amp;rsquo;{ &amp;ldquo;copyright&amp;rdquo;: &amp;ldquo;本名&amp;rdquo; }&amp;rsquo; http://pyyoshi.mit-license.org
 として投げました。 定義できるものはそれなりあって、フォーマット形式をtxtにしたり、メールを登録できたりします。
詳しくはこちらのreadmeでも読むといいと思います。
これ削除するときはどうするんだろ…</description>
			<content type="html"><![CDATA[<p>MITライセンスのページってOSIのページくらいしか見当たらないし、権利者絡みでもいろいろあると思って調べてたら、手軽にできるサービスを見つけました。</p>
<p>mit-license.orgというサイトで行えます。任意のユーザ名がサブドメインとして選べ、個人のライセンスページになるという仕組みみたいです。</p>
<p>Remy Sharpさんありがとう。</p>
<p>ということでサービスへの登録ですが、json形式でcurl使って投げてあげれば作られるという簡単な方法です。</p>
<p>私の場合だと</p>
<blockquote>
<p>$ curl -d&rsquo;{ &ldquo;copyright&rdquo;: &ldquo;本名&rdquo; }&rsquo; <a href="http://pyyoshi.mit-license.org">http://pyyoshi.mit-license.org</a></p>
</blockquote>
<p>として投げました。
定義できるものはそれなりあって、フォーマット形式をtxtにしたり、メールを登録できたりします。</p>
<p>詳しくはこちらの<a href="https://github.com/remy/mit-license">readme</a>でも読むといいと思います。</p>
<p>これ削除するときはどうするんだろ…</p>
]]></content>
		</item>
		
		<item>
			<title>[Chrome Extension API] Manifestをapp内からアクセスする方法</title>
			<link>https://github.pyyoshi.com/blog/2012/09/Chrome-Extension-API-Manifest%E3%82%92app%E5%86%85%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Sun, 23 Sep 2012 09:20:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/09/Chrome-Extension-API-Manifest%E3%82%92app%E5%86%85%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>chrome.app.getDetails()
 で取得することが可能。</description>
			<content type="html"><![CDATA[<blockquote>
<p>chrome.app.getDetails()</p>
</blockquote>
<p>で取得することが可能。</p>
]]></content>
		</item>
		
		<item>
			<title>[メモ]C&#43;&#43;のメモリリークを検出する方法</title>
			<link>https://github.pyyoshi.com/blog/2012/09/%E3%83%A1%E3%83%A2C-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Wed, 19 Sep 2012 19:26:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/09/%E3%83%A1%E3%83%A2C-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%AF%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>cchardetでバインドしているライブラリにメモリリークするバグがあったのだけれど、C++と親しい付き合いをしていないし、自分で書いたコードではないのでどのように見つけてあげればいいのかわからないので、Google先生に聞きました。
そしたらVC++には検出してくれるしゅんごいライブラリがあるみたいで、それを使用したらあっさり見つけることができました。
詳しいお話は書きませんが、debugビルドで#include &amp;ldquo;memory_leak.h&amp;quot;を先頭においてビルドすると出力に表示されました。
ただ、メインコードにincludeするだけでは、どの位置にメモリリークがあるかわからないのですべてのコードにincludeしないといけないようです。
以下がそのmemory_leak.h</description>
			<content type="html"><![CDATA[<p>cchardetでバインドしているライブラリにメモリリークするバグがあったのだけれど、C++と親しい付き合いをしていないし、自分で書いたコードではないのでどのように見つけてあげればいいのかわからないので、Google先生に聞きました。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>そしたらVC++には検出してくれるしゅんごいライブラリがあるみたいで、それを使用したらあっさり見つけることができました。</p>
<p>詳しいお話は書きませんが、debugビルドで#include
&ldquo;memory_leak.h&quot;を先頭においてビルドすると出力に表示されました。</p>
<p>ただ、メインコードにincludeするだけでは、どの位置にメモリリークがあるかわからないのですべてのコードにincludeしないといけないようです。</p>
<p>以下がそのmemory_leak.h</p>
]]></content>
		</item>
		
		<item>
			<title>自動でCoffeeScriptをコンパイルするPythonスクリプトを書いた</title>
			<link>https://github.pyyoshi.com/blog/2012/09/%E8%87%AA%E5%8B%95%E3%81%A7CoffeeScript%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8BPython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</link>
			<pubDate>Tue, 18 Sep 2012 22:05:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/09/%E8%87%AA%E5%8B%95%E3%81%A7CoffeeScript%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8BPython%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F/</guid>
			<description>いちいちコマンド書いてられないので、ファイルに変更があった場合にビルドするスクリプトを書いた。
Python 2.7環境でテストしました。
必要なモジュールは
 $ pip install watchdog
 設定項目を埋めたらあとは実行するのみです。
以下がそのスクリプトです。
追記)
coffee自体に監視する機能ありました…
 $ coffee -w -c 監視するコードのパス
 しっかりドキュメント読むべきでした。
ただ、このスクリプトは指定されたディレクトリ全体のCoffeeScriptを監視してコンパイルします。</description>
			<content type="html"><![CDATA[<p>いちいちコマンド書いてられないので、ファイルに変更があった場合にビルドするスクリプトを書いた。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
Python 2.7環境でテストしました。<br>
必要なモジュールは</p>
<blockquote>
<p>$ pip install watchdog</p>
</blockquote>
<p>設定項目を埋めたらあとは実行するのみです。<br>
以下がそのスクリプトです。</p>
<p>追記)<br>
coffee自体に監視する機能ありました…</p>
<blockquote>
<p>$ coffee -w -c 監視するコードのパス</p>
</blockquote>
<p>しっかりドキュメント読むべきでした。<br>
ただ、このスクリプトは指定されたディレクトリ全体のCoffeeScriptを監視してコンパイルします。</p>
]]></content>
		</item>
		
		<item>
			<title>mono&#43;TwitterIrcGateway&#43;znc環境の構築</title>
			<link>https://github.pyyoshi.com/blog/2012/09/mono-TwitterIrcGateway-znc%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89/</link>
			<pubDate>Tue, 18 Sep 2012 01:16:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/09/mono-TwitterIrcGateway-znc%E7%92%B0%E5%A2%83%E3%81%AE%E6%A7%8B%E7%AF%89/</guid>
			<description>TwitterIrcGatewayをCentOS6環境で使うための備忘録
1. まずWindowsでTIGのバイナリを作成する。  $ svn co http://svn.misuzilla.org/etcetera/TwitterIrcGateway/trunk/ tig
 TwitterIrcGateway.slnを開いて、&amp;ldquo;ISO-&amp;ldquo;という文字を検索して、一致する文字列をすべて&amp;quot;UTF-8&amp;quot;に書き換え。 #これをしないとmono環境ではうまく起動できなかった。
それをリリースなりでビルドしておく。
2. TIGを動かす環境を作る  $ sudo yum install mono-devel &amp;ndash;enablerepo=epel
$ sudo useradd tig
$ sudo su tig
$ cd ~
$ mkdir tig
$ cd tig
 先ほどビルドしたものをtig内に入れる。
&amp;ldquo;mono TwitterIrcGatewayCLI.exe&amp;quot;とやると起動スクリプト書くときいろいろ大変になるので、スタンドアロン実行ファイルを作る
 $ mkbundle -o TwitterIrcGatewayCLI_START TwitterIrcGatewayCLI.exe
 起動スクリプトは以下になりました。
 $ sudo vim /etc/rc.d/init.d/TwitterIrcGateway
  $ sudo chmod +x /etc/rc.d/init.d/TwitterIrcGateway  で上記スクリプトを記述
起動スクリプトを登録
 $ sudo chkconfig &amp;ndash;add TwitterIrcGateway</description>
			<content type="html"><![CDATA[<p>TwitterIrcGatewayをCentOS6環境で使うための備忘録</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h3 id="1-windowstig">1. まずWindowsでTIGのバイナリを作成する。</h3>
<blockquote>
<p>$ svn
co http://svn.misuzilla.org/etcetera/TwitterIrcGateway/trunk/ tig</p>
</blockquote>
<p>TwitterIrcGateway.slnを開いて、&ldquo;ISO-&ldquo;という文字を検索して、一致する文字列をすべて&quot;UTF-8&quot;に書き換え。
#これをしないとmono環境ではうまく起動できなかった。</p>
<p>それをリリースなりでビルドしておく。</p>
<h3 id="2-tig">2. TIGを動かす環境を作る</h3>
<blockquote>
<p>$ sudo yum install mono-devel &ndash;enablerepo=epel<br>
$ sudo useradd tig<br>
$ sudo su tig<br>
$ cd ~<br>
$ mkdir tig<br>
$ cd tig</p>
</blockquote>
<p>先ほどビルドしたものをtig内に入れる。</p>
<p>&ldquo;mono TwitterIrcGatewayCLI.exe&quot;とやると起動スクリプト書くときいろいろ大変になるので、スタンドアロン実行ファイルを作る</p>
<blockquote>
<p>$ mkbundle -o TwitterIrcGatewayCLI_START TwitterIrcGatewayCLI.exe</p>
</blockquote>
<p>起動スクリプトは以下になりました。</p>
<blockquote>
<p>$ sudo vim /etc/rc.d/init.d/TwitterIrcGateway</p>
</blockquote>
<blockquote>
<p>$ sudo chmod +x /etc/rc.d/init.d/TwitterIrcGateway </p>
</blockquote>
<p>で上記スクリプトを記述<br>
起動スクリプトを登録</p>
<blockquote>
<p>$ sudo chkconfig &ndash;add TwitterIrcGateway<br>
$ sudo chkconfig TwitterIrcGateway on</p>
</blockquote>
<p>起動確認</p>
<blockquote>
<p>$ sudo service TwitterIrcGateway start<br>
$ sudo service TwitterIrcGateway stop</p>
</blockquote>
<h3 id="3-oauth">3. OAuth認証</h3>
<p>これはいつもどおりでLimechatなりで認証済みにしておいてください。<br>
また登録したパスワードはzncの設定で使用するため、覚えておいてください。<br>
認証を終了した後、必ずTIGのプロセスをキルしておいてください。</p>
<h3 id="4-tigznc">4. TIG用にzncを設定する</h3>
<blockquote>
<p>$ sudo yum install znc &ndash;enablerepo=epel</p>
</blockquote>
<p>基本的には<a href="http://d.hatena.ne.jp/sugyan/20120320/1332223715">こちら</a>のサイトにあるように</p>
<blockquote>
<p>$ sudo su tig<br>
$ znc &ndash;makeconf</p>
</blockquote>
<p>していきます。主な設定項目は以下のとおりです。</p>
<blockquote>
<p>Would you like ZNC to listen using SSL? (yes/no) [no]: yes<br>
IRC server (host only): 127.0.0.1<br>
[127.0.0.1] Port (1 to 65535) [6667]: TIGのポート<br>
[127.0.0.1] Password (probably empty):
TIGのOAuth認証で決めたパスワード<br>
Would you like to add a channel for ZNC to automatically join?
(yes/no) [yes]: yes<br>
Channel name: #Twitter<br>
Would you like to add a channel for ZNC to automatically join?
(yes/no) [yes]: yes<br>
Channel name: #Console</p>
</blockquote>
<p>SSLを使用したかったので有効化しました。また注意としてはサーバのパスワードはTIGのOAuth認証で決めたパスワードを入力することです。間違わないようにしてください。</p>
<p>zncの起動スクリプトは、そのままではうまく動かないので以下のようにしました。</p>
<h3 id="5-">5. その他注意点</h3>
<p>今回はzncを介してtigを使用することを前提にしています。<br>
そのため、tigの&ndash;bind-addressは内側からのみアクセス可能な状態にするために、「&ndash;bind-address=127.0.0.1」とすべきです。OAuth認証時は「&ndash;bind-address=0.0.0.0」としても構いませんが、それを終えた場合、必ず内側からのみアクセスできるようにしておいてください。</p>
<p>また、TIGの起動スクリプトは一般ユーザ権限の範囲内でのみ実行できるようにしています。Google等で検索して出てくる起動スクリプトはroot権限で実行する形になっています。これは色々と危険であるため、なるべく一般ユーザ権限で使用しているものを使うべきかと思います。</p>
]]></content>
		</item>
		
		<item>
			<title>環境によってCythonでうまくコード変換ができない場合の対処</title>
			<link>https://github.pyyoshi.com/blog/2012/08/%E7%92%B0%E5%A2%83%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6Cython%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
			<pubDate>Wed, 22 Aug 2012 22:25:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/08/%E7%92%B0%E5%A2%83%E3%81%AB%E3%82%88%E3%81%A3%E3%81%A6Cython%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89%E5%A4%89%E6%8F%9B%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
			<description>なぜかWindowsやUbuntuでは素直に変換しビルドが成功するのに、CentOSではうまくpyxをC/CPPに変換できない問題が発生しました。
この原因がどのようなものなのか色々と調べてみたのですが、検索の仕方がまずかったのか謎のままでいました。
きっとCython.Distutils.build_extが悪さしてるんだろうなという検討はついていたので、
それを標準のdistutils.command.build_ext.build_extに変更し、
さらにCython.Compiler.Main.compileを使用して&amp;rdquo;*.pyx&amp;quot;をC/CPPに変換させるような処理に変更しました。
C/CPPに強制変換させているので、sourcesにはpyxではなく、変換したC/CPPファイルを追加するようにも変更してください。
この変更によって、たぶんCentOSのようにうまく変換できない環境でも対応できるかと思います。
変更した際のdiffはこちら
備忘録♪備忘録♪</description>
			<content type="html"><![CDATA[<p>なぜかWindowsやUbuntuでは素直に変換しビルドが成功するのに、CentOSではうまくpyxをC/CPPに変換できない問題が発生しました。</p>
<p>この原因がどのようなものなのか色々と調べてみたのですが、検索の仕方がまずかったのか謎のままでいました。</p>
<p>きっと<strong>Cython.Distutils.build_ext</strong>が悪さしてるんだろうなという検討はついていたので、</p>
<p>それを標準の<strong>distutils.command.build_ext.build_ext</strong>に変更し、</p>
<p>さらに<strong>Cython.Compiler.Main.compile</strong>を使用して&rdquo;*.pyx&quot;をC/CPPに変換させるような処理に変更しました。</p>
<p>C/CPPに強制変換させているので、sourcesにはpyxではなく、変換したC/CPPファイルを追加するようにも変更してください。</p>
<p>この変更によって、たぶんCentOSのようにうまく変換できない環境でも対応できるかと思います。</p>
<p>変更した際のdiffは<a href="https://github.com/PyYoshi/cChardet/commit/cadf8b72f64e707c45d3b0c9b8df94e5df8ee96e">こちら</a></p>
<p>備忘録♪備忘録♪</p>
]]></content>
		</item>
		
		<item>
			<title>何か一つ自身を持てるもの・強みになるものをもつ</title>
			<link>https://github.pyyoshi.com/blog/2012/08/%E4%BD%95%E3%81%8B%E4%B8%80%E3%81%A4%E8%87%AA%E8%BA%AB%E3%82%92%E6%8C%81%E3%81%A6%E3%82%8B%E3%82%82%E3%81%AE%E5%BC%B7%E3%81%BF%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E3%82%82%E3%81%A4/</link>
			<pubDate>Tue, 07 Aug 2012 22:09:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/08/%E4%BD%95%E3%81%8B%E4%B8%80%E3%81%A4%E8%87%AA%E8%BA%AB%E3%82%92%E6%8C%81%E3%81%A6%E3%82%8B%E3%82%82%E3%81%AE%E5%BC%B7%E3%81%BF%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E3%82%82%E3%81%A4/</guid>
			<description>pull requestが通るとニヤニヤが止まらなくなる僕です。
たとえ本当に小さな事でも誰かの役に立ったと思うと嬉しいのです。
誰がなんと言おうと僕はこれからもこれに快楽を得ていくでしょう。
さておき、最近良く思うことがあります。
自分の強みは一体何なのか？っということです。
翌々考えてみると、自分にはこれといって強みになるものなんてないんじゃないかとそう思うのです。
とりあえずTwitterなりフィードなりから興味をそそられるものを片っ端から試して、中途半端に終えることもあります。
その中でも唯一続いてきたのはPythonであるし、良きPythonistaであり続けたいとも思っています。
Linuxだってそうです。
最初はCLIかっけー俺ハッカーじゃん！って思っていたけれど、
プログラミングとともにすることでCUIの良さや、Windowsに比べて開発者との親和性の良さなどいくつも学びました。
さてさて話が少しそれてしまいました。
僕の強みってなんでしょうか？自身を持ってこれだ！って言えるものは何でしょう？
この答えをここ1年考え続けてきましたが、未だに見つかりません。
きっと探し方が悪いのかもしれませんし、はたまた気づいていないだけかもしれません。
このままでは自身の成長の妨げになりかねない。
そう思ったのです。
っということで、具体的な目標を立てて生活してみようかと思います。
最初の小さな目標は
自分がお世話になっているライブラリのコントリビュータになること
そう決めました。
なんだかおかしな目標ではあると思いますが、まずはOSSへ積極的に参加していくことが重要なのかなと思いました。
rejectを恐れずpull requestして行きましょう！</description>
			<content type="html"><![CDATA[<p>pull requestが通るとニヤニヤが止まらなくなる僕です。</p>
<p>たとえ本当に小さな事でも誰かの役に立ったと思うと嬉しいのです。</p>
<p>誰がなんと言おうと僕はこれからもこれに快楽を得ていくでしょう。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>さておき、最近良く思うことがあります。</p>
<p>自分の強みは一体何なのか？っということです。</p>
<p>翌々考えてみると、自分にはこれといって強みになるものなんてないんじゃないかとそう思うのです。</p>
<p>とりあえずTwitterなりフィードなりから興味をそそられるものを片っ端から試して、中途半端に終えることもあります。</p>
<p>その中でも唯一続いてきたのはPythonであるし、良きPythonistaであり続けたいとも思っています。</p>
<p>Linuxだってそうです。</p>
<p>最初はCLIかっけー俺ハッカーじゃん！って思っていたけれど、</p>
<p>プログラミングとともにすることでCUIの良さや、Windowsに比べて開発者との親和性の良さなどいくつも学びました。</p>
<p>さてさて話が少しそれてしまいました。</p>
<p>僕の強みってなんでしょうか？自身を持ってこれだ！って言えるものは何でしょう？</p>
<p>この答えをここ1年考え続けてきましたが、未だに見つかりません。</p>
<p>きっと探し方が悪いのかもしれませんし、はたまた気づいていないだけかもしれません。</p>
<p>このままでは自身の成長の妨げになりかねない。</p>
<p>そう思ったのです。</p>
<p>っということで、具体的な目標を立てて生活してみようかと思います。</p>
<p>最初の小さな目標は</p>
<p>自分がお世話になっているライブラリのコントリビュータになること</p>
<p>そう決めました。</p>
<p>なんだかおかしな目標ではあると思いますが、まずはOSSへ積極的に参加していくことが重要なのかなと思いました。</p>
<p><!-- raw HTML omitted -->rejectを恐れずpull
requestして行きましょう！<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>NASのHDDを復旧準備</title>
			<link>https://github.pyyoshi.com/blog/2012/08/NAS%E3%81%AEHDD%E3%82%92%E5%BE%A9%E6%97%A7%E6%BA%96%E5%82%99/</link>
			<pubDate>Tue, 07 Aug 2012 06:59:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/08/NAS%E3%81%AEHDD%E3%82%92%E5%BE%A9%E6%97%A7%E6%BA%96%E5%82%99/</guid>
			<description>ここ最近調子が悪いNAS。 そしておいておいたファイルがデバイスエラーで読み込めなくなってしまった。
ファイルシステムがXFSという事もあってLinux機につないで作業を行った。
まずマウントできるか試した。
$sudo mkdir /mnt/nas
$sudo mount -t xfs /dev/sdc1 /mnt/nas
SuperBlockがどうのこうのというよくわからないエラーが出た。
調べてみるとxfsprogsでなんとかなるかもしれないらしい。
$sudo apt-get install xfsprogs
$sudo reboot
バックアップの作成
$sudo mkdir /mnt/tmp
$sudo dd if=/dev/sdc1 of=/mnt/tmp/broken.img ibs=512 obs=1024k conv=noerror,sync
$sudo xfs_check /dev/sdc1
 found candidate secondary superblock&amp;hellip;
verified secondary superblock&amp;hellip;
writing modified primary superblock
sb root inode value 18446744073709551615 (NULLFSINO) inconsistent with calculated value 128
resetting superblock root inode pointer to 128
sb realtime bitmap inode 18446744073709551615 (NULLFSINO) inconsistent with calculated value 129</description>
			<content type="html"><![CDATA[<p>ここ最近調子が悪いNAS。
そしておいておいたファイルがデバイスエラーで読み込めなくなってしまった。</p>
<p>ファイルシステムがXFSという事もあってLinux機につないで作業を行った。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
まずマウントできるか試した。</p>
<p>$sudo mkdir /mnt/nas</p>
<p>$sudo mount -t xfs /dev/sdc1 /mnt/nas</p>
<p>SuperBlockがどうのこうのというよくわからないエラーが出た。</p>
<p>調べてみるとxfsprogsでなんとかなるかもしれないらしい。</p>
<p>$sudo apt-get install xfsprogs</p>
<p>$sudo reboot</p>
<p>バックアップの作成</p>
<p>$sudo mkdir /mnt/tmp</p>
<p>$sudo dd if=/dev/sdc1 of=/mnt/tmp/broken.img ibs=512 obs=1024k
conv=noerror,sync</p>
<p>$sudo xfs_check /dev/sdc1</p>
<blockquote>
<p>found candidate secondary superblock&hellip;<br>
verified secondary superblock&hellip;<br>
writing modified primary superblock<br>
sb root inode value 18446744073709551615 (NULLFSINO) inconsistent with
calculated value 128<br>
resetting superblock root inode pointer to 128<br>
sb realtime bitmap inode 18446744073709551615 (NULLFSINO) inconsistent
with calculated value 129<br>
resetting superblock realtime bitmap ino pointer to 129<br>
sb realtime summary inode 18446744073709551615 (NULLFSINO)
inconsistent with calculated value 130<br>
resetting superblock realtime summary ino pointer to 130<br>
Phase 2 - using internal log<br>
        - zero log&hellip;<br>
ERROR: The filesystem has valuable metadata changes in a log which
needs to<br>
be replayed.  Mount the filesystem to replay the log, and unmount it
before<br>
re-running xfs_repair.  If you are unable to mount the filesystem,
then use<br>
the -L option to destroy the log and attempt a repair.<br>
Note that destroying the log may cause corruption &ndash; please attempt a
mount<br>
of the filesystem before doing this.</p>
</blockquote>
<p>xfs_checkでかなり時間がかかります。
なにやらSuperBlockを探しているみたい。</p>
<p>それでもってエラー…</p>
<p>-Lオプション付けて再度実行しろと言われた。
しかももしかしたらデータ消えると…</p>
<p>まぁバックアップしているしっと思い-Lを付けて再実行</p>
<p>$sudo xfs_check -L /dev/sdc1</p>
<p>さくっと終了。</p>
<p>再度マウントしてみる。</p>
<p>$sudo mount -t xfs /dev/sdc1 /mnt/nas</p>
<p>マウントは成功。vncに入りデータ救出した。</p>
<p>おわり</p>
<p>ルータについていたお粗末なNAS機能。</p>
<p>本当にお粗末で録画していたエンコ済み動画を再生するのにかなりもたつきがあった。</p>
<p>NAS自体でフォーマットするより、Linuxなりで正常にフォーマットしてやったほうが良かったのではないかと後悔している。</p>
]]></content>
		</item>
		
		<item>
			<title>Windows環境下でもVirtualenvWrapperを使う</title>
			<link>https://github.pyyoshi.com/blog/2012/08/Windows%E7%92%B0%E5%A2%83%E4%B8%8B%E3%81%A7%E3%82%82VirtualenvWrapper%E3%82%92%E4%BD%BF%E3%81%86/</link>
			<pubDate>Thu, 02 Aug 2012 21:34:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/08/Windows%E7%92%B0%E5%A2%83%E4%B8%8B%E3%81%A7%E3%82%82VirtualenvWrapper%E3%82%92%E4%BD%BF%E3%81%86/</guid>
			<description>とても便利なvirtualenvwrapperですが、なぜかWindowsには対応していません。
MSYS下なら動かせないこともないのですが、PythonがMSYS環境であまり良い挙動を取りません。
どうしたら良いものか調べていたらPowerShell2で動かすことができる
virtualenvwrapper-powershellというものを見つけました。
なにやらvirtualenvwrapperをPowerShellスクリプト用に再実装したものみたいです。
ということで
使えるところまで準備していこうかと思います。
前提条件としてPowerShell(Win7はビルトイン)とvirtualenvはインストール済みとします。
**なお、私はPS初心者です。なのでPSの環境を一から作るところから始めます。ご了承ください。**１. PSスクリプトを使えるようにする。 まず、PSでPSスクリプトを使えるようにしなくてはいけません。
PSを管理者権限で起動します。
&amp;gt; Get-ExecutionPolicy
と実行すると「Restricted」 「AllSigned」 「RemoteSigned」 「Unrestricted」のいずれかが出力されるかと思います。
 Restrictedはすべてのスクリプトの実行を禁止している状態 AllSignedは署名済みスクリプトのみ実行可能な状態 RemoteSignedはローカルに保存されているスクリプト、ダウンロードされた署名済みスクリプトが実行可能な状態 Unrestrictedはすべて実行可能な状態  という感じです。
デフォルトだと1だと思います。これを3の状態に変更します。
&amp;gt; Set-ExecutionPolicy RemoteSigned
こうすることで、PSスクリプトを実行できる状態になりました。
PSを一旦終了します。
※なお、この状態変更時に管理者権限がないとエラーを吐きます。そのために最初に管理者権限で実行するようにしました。
２. PS環境の作成 PSを起動します。
&amp;gt; $profile
を実行すると、PS起動時に読み込むプロファイルのパスが出力されます。
設定していない場合パスに書かれているファイルが作成されていないので、
&amp;gt; New-Item -type file -force $profile
を実行してあげると空のファイルがパスに作成されます。
これをエディタで編集すれば、起動時にいろいろできるそうです。bashrcとかそのへんを浮かべればよいかと思います。
これを現在のセッションで有効にしてあげます。 今のところ空ファイルですけどね＾＾；
&amp;gt; . $profile
unix系だと source .hoge というのと同じ要領かと思います。
PSを終了します。
３. virtualenvwrapper-powershellをインストールする。 スクリプトをダウンロードしてきましょう。 pipやeasy_installではダメ
解凍したらPS起動します。
&amp;gt; cd \Bin
&amp;gt; .\Setup.ps1
と実行します。
「virtualenvwrapper: Installation complete.</description>
			<content type="html"><![CDATA[<p>とても便利なvirtualenvwrapperですが、なぜかWindowsには対応していません。</p>
<p>MSYS下なら動かせないこともないのですが、PythonがMSYS環境であまり良い挙動を取りません。</p>
<p>どうしたら良いものか調べていたらPowerShell2で動かすことができる</p>
<p><!-- raw HTML omitted -->virtualenvwrapper-powershell<!-- raw HTML omitted --></p>
<p>というものを見つけました。</p>
<p>なにやらvirtualenvwrapperをPowerShellスクリプト用に再実装したものみたいです。</p>
<p>ということで</p>
<p>使えるところまで準備していこうかと思います。</p>
<p>前提条件としてPowerShell(Win7はビルトイン)とvirtualenvはインストール済みとします。</p>
<p><!-- raw HTML omitted -->**なお、私はPS初心者です。なのでPSの環境を一から作るところから始めます。ご了承ください。**<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<h4 id="-ps">１. PSスクリプトを使えるようにする。</h4>
<p>まず、PSでPSスクリプトを使えるようにしなくてはいけません。</p>
<p>PSを管理者権限で起動します。</p>
<p>&gt; Get-ExecutionPolicy</p>
<p>と実行すると「Restricted」 「AllSigned」 「RemoteSigned」
「Unrestricted」のいずれかが出力されるかと思います。</p>
<ol>
<li>Restrictedはすべてのスクリプトの実行を禁止している状態</li>
<li>AllSignedは署名済みスクリプトのみ実行可能な状態</li>
<li>RemoteSignedはローカルに保存されているスクリプト、ダウンロードされた署名済みスクリプトが実行可能な状態</li>
<li>Unrestrictedはすべて実行可能な状態</li>
</ol>
<p>という感じです。</p>
<p>デフォルトだと1だと思います。これを3の状態に変更します。</p>
<p>&gt; Set-ExecutionPolicy RemoteSigned</p>
<p>こうすることで、PSスクリプトを実行できる状態になりました。</p>
<p>PSを一旦終了します。</p>
<p>※なお、この状態変更時に管理者権限がないとエラーを吐きます。そのために最初に管理者権限で実行するようにしました。</p>
<h4 id="-ps-1">２. PS環境の作成</h4>
<p>PSを起動します。</p>
<p>&gt; $profile</p>
<p>を実行すると、PS起動時に読み込むプロファイルのパスが出力されます。</p>
<p>設定していない場合パスに書かれているファイルが作成されていないので、</p>
<p>&gt; New-Item -type file -force $profile</p>
<p>を実行してあげると空のファイルがパスに作成されます。</p>
<p>これをエディタで編集すれば、起動時にいろいろできるそうです。bashrcとかそのへんを浮かべればよいかと思います。</p>
<p>これを現在のセッションで有効にしてあげます。
今のところ空ファイルですけどね＾＾；</p>
<p>&gt; . $profile</p>
<p>unix系だと source .hoge というのと同じ要領かと思います。</p>
<p>PSを終了します。</p>
<h4 id="-virtualenvwrapper-powershell">３.  virtualenvwrapper-powershellをインストールする。</h4>
<p>スクリプトを<a href="https://bitbucket.org/guillermooo/virtualenvwrapper-powershell/downloads">ダウンロード</a>してきましょう。
pipやeasy_installではダメ</p>
<p>解凍したらPS起動します。</p>
<p>&gt; cd \Bin</p>
<p>&gt; .\Setup.ps1</p>
<p>と実行します。</p>
<p>「virtualenvwrapper: Installation
complete.」となれば、2で作成されたプロファイルのあるディレクトリに</p>
<p>「Modules」というディレクトリが作成され、virtualenvwrapper-powershellがインストールされたと思います。</p>
<p>PSを終了します。</p>
<h4 id="virtualenvwrapper-powershell">４. virtualenvwrapper-powershell用の設定を行います。</h4>
<p>せっかくプロファイルを作成したので、これを元に設定していきたいと思います。</p>
<p>エディタで2で作成したプロファイルを開きましょう。</p>
<p>まずはvirtualenvwrapperで使用するディレクトリを設定します。</p>
<blockquote>
<p>$WORKON_HOME = &ldquo;$HOME\.virtualenvs&rdquo;</p>
</blockquote>
<p>Homeディレクトリ+「.virtualenvs」というディレクトリパスを指定しました。</p>
<p>これを環境変数に代入します。</p>
<blockquote>
<p>$env:WORKON_HOME = $WORKON_HOME</p>
</blockquote>
<p>VirtualEnvWrapperをロードさせます。</p>
<blockquote>
<p>$virtualenv_module_path =
&ldquo;$profile\..\Modules\VirtualEnvWrapper&rdquo;<br>
Import-Module $virtualenv_module_path</p>
</blockquote>
<p>最終的にプロファイルの中身は以下のようになりました。</p>
<p>$WORKON_HOMEがない場合、それを作成するように処理を追加しました。</p>
<p>&gt; . $profile</p>
<p>を実行しプロファイルを読み込ませます。</p>
<p>これで設定は終了です。</p>
<p>５. 実際に使ってみる。</p>
<p>&gt; mkvirtualenv test</p>
<p>$HOME_WORKON以下にもろもろのファイルができていれば完了です。 ※1</p>
<p>&gt; workon test</p>
<p>とすればtestの環境に変更されるし</p>
<p>&gt; deactivate</p>
<p>とすればvirtualenvの環境から出ることもできますね。</p>
<p>virtualenvwrapperそのものの使い方がPS内でできるようになりました。</p>
<p>これでいつもと変わらない環境がてにはいりました。</p>
<p>他に使えるコマンドを知りたい場合は</p>
<p>&gt; Get-Module virtualenvwrapper | Select-Object -ExpandProperty
ExportedFunctions</p>
<p>を実行すればひと通り出力されます。</p>
<p>以上でひと通り終わりです。 開発者の方には本当に感謝です。</p>
<p>ただ、PS初心者の方はとても導入が困難だと思うので、私含めそのような方でも手軽に導入できるようにドキュメントを作っていただけると、なお良いのではないかとも思います。</p>
<p>※1: mkvirtualenv時に、なにやらファイルが無いいよってエラーが出る。
気になる方は「$profile\..\Modules\Extensions」の中にあるファイルを削除するとよいでしょう。</p>
<p>追記(20120802):<br>
PowerShell
3で使用する場合は<a href="https://bitbucket.org/PyYoshi/virtualenvwrapper-powershell/changeset/58ebd8fcd394340397eb310f77a76f110fad7b6f">こちら</a>を使ってください。
開発者にpull
requestしたので、もしかしたら対応していただけるかもしれません。</p>
<p>追記(20120807)<br>
無事Pull RequestがConfirmedされました。
次回リリース以降にPowerShell3で上記エラーにはならないかと思います。</p>
<p>追記(20120808)<br>
<a href="http://powertab.codeplex.com/">PowerTab</a>を入れるとタブ補完でenvsの選択が楽になります。<br>
インストールはModulesの中にPowerTabディレクトリを作成してそこにひと通りのスクリプトを入れて、VirtualenvWrappeより前にImport-Moduleしました。<br>
Modulesの中がごちゃごちゃしだしたのでVirtualenvWrapperはVirtualenvWrapperディレクトリの作成の上そこにスクリプトを起きました。</p>
<p>そんでもってこっちがPS3対応のdiff</p>
<h4 id="heading">参考:</h4>
<p><a href="http://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner05.aspx">http://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner05.aspx</a><br>
<a href="http://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner06.aspx">http://technet.microsoft.com/ja-jp/scriptcenter/powershell_owner06.aspx</a></p>
]]></content>
		</item>
		
		<item>
			<title>ファイル監視にwatchdogがかなり便利な件</title>
			<link>https://github.pyyoshi.com/blog/2012/07/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%ABwatchdog%E3%81%8C%E3%81%8B%E3%81%AA%E3%82%8A%E4%BE%BF%E5%88%A9%E3%81%AA%E4%BB%B6/</link>
			<pubDate>Tue, 17 Jul 2012 17:40:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/07/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%9B%A3%E8%A6%96%E3%81%ABwatchdog%E3%81%8C%E3%81%8B%E3%81%AA%E3%82%8A%E4%BE%BF%E5%88%A9%E3%81%AA%E4%BB%B6/</guid>
			<description>win32apiを叩くのはナンセンスだし、何より手軽に書きたかったのでpypiで探索していたらwatchdogというものを知りました。
以下が「*.jpg, *.png, *.txtの3つのファイルが、作成・編集・削除された時にそれを知らせる」コードです。
on_created, on_modified, on_deletedに自分が実行したい処理を書いていけばいいかと思います。
例えばdocを編集していちいち自分でmake htmlとせずともwatchdogを使えば自動化できてしまいます。
ただちょっと触って気になったところが、ファイル・ディレクトリ作成時にon_any_eventだと2回実行してしまうことです。
このコードを使ってみればわかると思うのですが、どうやら作成イベントは on_created, on_modifiedの順で実行されているためのようです。
OS内部のことはわからないのであくまで推定ですが。</description>
			<content type="html"><![CDATA[<p>win32apiを叩くのはナンセンスだし、何より手軽に書きたかったのでpypiで探索していたらwatchdogというものを知りました。</p>
<p>以下が「*.jpg, *.png,
*.txtの3つのファイルが、作成・編集・削除された時にそれを知らせる」コードです。</p>
<p>on_created, on_modified,
on_deletedに自分が実行したい処理を書いていけばいいかと思います。</p>
<p>例えばdocを編集していちいち自分でmake
htmlとせずともwatchdogを使えば自動化できてしまいます。</p>
<p>ただちょっと触って気になったところが、ファイル・ディレクトリ作成時にon_any_eventだと2回実行してしまうことです。</p>
<p>このコードを使ってみればわかると思うのですが、どうやら作成イベントは
on_created, on_modifiedの順で実行されているためのようです。</p>
<p>OS内部のことはわからないのであくまで推定ですが。</p>
]]></content>
		</item>
		
		<item>
			<title>Python向けTumblrライブラリPytumb2をリリース</title>
			<link>https://github.pyyoshi.com/blog/2012/07/Python%E5%90%91%E3%81%91Tumblr%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AAPytumb2%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/</link>
			<pubDate>Sat, 14 Jul 2012 23:06:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/07/Python%E5%90%91%E3%81%91Tumblr%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AAPytumb2%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9/</guid>
			<description>Python向けTumblrライブラリPytumb2をリリースしました。
１年くらい前にPytumbをリリースして以来まったくメンテナンスせずに放置状態だったので、この際コードの書き直しを行いました。
使い方はTweepyのように手軽に扱えるようにしています。
詳しくはtests.pyやexample.pyを見ていただければとおもいます。
また、ドキュメントはまだ揃えていませんが、api.pyにある程度書かれています。
バグや要望等は随時承っております。
では
PyYoshi/Pytumb2 · GitHub</description>
			<content type="html"><![CDATA[<p>Python向けTumblrライブラリ<a href="https://github.com/PyYoshi/Pytumb2">Pytumb2</a>をリリースしました。</p>
<p>１年くらい前にPytumbをリリースして以来まったくメンテナンスせずに放置状態だったので、この際コードの書き直しを行いました。</p>
<p>使い方はTweepyのように手軽に扱えるようにしています。</p>
<p>詳しくは<a href="https://github.com/PyYoshi/Pytumb2/blob/master/tests.py">tests.py</a>や<a href="https://github.com/PyYoshi/Pytumb2/blob/master/example.py">example.py</a>を見ていただければとおもいます。</p>
<p>また、ドキュメントはまだ揃えていませんが、api.pyにある程度書かれています。</p>
<p>バグや要望等は随時承っております。</p>
<p>では</p>
<p><a href="https://github.com/PyYoshi/Pytumb2">PyYoshi/Pytumb2 · GitHub</a></p>
]]></content>
		</item>
		
		<item>
			<title>久しぶりに数学的なプログラミング＞＜</title>
			<link>https://github.pyyoshi.com/blog/2012/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E6%95%B0%E5%AD%A6%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
			<pubDate>Tue, 10 Jul 2012 21:32:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/07/%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB%E6%95%B0%E5%AD%A6%E7%9A%84%E3%81%AA%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</guid>
			<description>「for文を使って,s=1+3+5+&amp;hellip;+99の和を計算、表示するプログラミングを作りましょう」
というネタがTwitterで流れてきたのでPythonでやってみました。
#!/usr/bin/env python reduce(lambda a,b: a+b, [i for i in range(1,100) if i%2==1]) sum([i for i in range(1,100) if i%2==1])  男らしく()ワンライナーで書いてみました。
というかいくら奇数の足し算とはいえ、数学的なプログラミングを最近全くしていないせいか、最初？？？ってなりました。
そういえば自分の作ったプログラムって数学的な要素全然ない気がします…
コードは2つの方法があります。短く書きたいならsum()を使うのがいいと思います。
僕はどうなってるのか気になるタイプなのでreduce()使ったヤツのほうが好きですね。
といいますか、Pythonは気持ち悪いくらい便利な関数が標準で備わってます＞＜</description>
			<content type="html"><![CDATA[<p>「for文を使って,s=1+3+5+&hellip;+99の和を計算、表示するプログラミングを作りましょう」</p>
<p>というネタが<a href="https://twitter.com/nisikawa_xyz/status/222650172637839362">Twitter</a>で流れてきたのでPythonでやってみました。</p>
<pre><code>#!/usr/bin/env python
reduce(lambda a,b: a+b, [i for i in range(1,100) if i%2==1])
sum([i for i in range(1,100) if i%2==1])
</code></pre>
<p>男らしく()ワンライナーで書いてみました。</p>
<p>というかいくら奇数の足し算とはいえ、数学的なプログラミングを最近全くしていないせいか、最初？？？ってなりました。</p>
<p>そういえば自分の作ったプログラムって数学的な要素全然ない気がします…</p>
<p>コードは2つの方法があります。短く書きたいなら<a href="http://docs.python.org/library/functions.html#sum">sum()</a>を使うのがいいと思います。</p>
<p>僕はどうなってるのか気になるタイプなので<a href="http://docs.python.org/library/functions.html#reduce">reduce()</a>使ったヤツのほうが好きですね。</p>
<p>といいますか、Pythonは気持ち悪いくらい便利な関数が標準で備わってます＞＜</p>
]]></content>
		</item>
		
		<item>
			<title>ネタが無くなった</title>
			<link>https://github.pyyoshi.com/blog/2012/06/%E3%83%8D%E3%82%BF%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F/</link>
			<pubDate>Thu, 28 Jun 2012 18:38:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/%E3%83%8D%E3%82%BF%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F/</guid>
			<description>cchardetを作るまではいろいろはかどっていたプログラミングですが、それを終えるとネタがないことに気づいた。
PyGooglePlusは仕様変更の速度についていけないのとサンプリングデータの数が少ないのでという理由であまり更新できない。
もっとも仕様変更に柔軟に対応できるプログラミングの仕方が考えつかない自分のせいでもあるのですがXD
なにぶんニートの身分だと、やることがないと暇なのである。
仕事探せというお話ではあるのですが、仕事を探すのがひどく億劫。どうしようもないクズである…
親には申し訳ないとは思うけれど、もうちょっと自由でいたい反面、お金がないと遠征もできない。
素晴らしい負の連鎖である。 バイトくらいは探したほうがよさそう。</description>
			<content type="html"><![CDATA[<p>cchardetを作るまではいろいろはかどっていたプログラミングですが、それを終えるとネタがないことに気づいた。</p>
<p>PyGooglePlusは仕様変更の速度についていけないのとサンプリングデータの数が少ないのでという理由であまり更新できない。</p>
<p>もっとも仕様変更に柔軟に対応できるプログラミングの仕方が考えつかない自分のせいでもあるのですがXD</p>
<p>なにぶんニートの身分だと、やることがないと暇なのである。</p>
<p>仕事探せというお話ではあるのですが、仕事を探すのがひどく億劫。どうしようもないクズである…</p>
<p>親には申し訳ないとは思うけれど、もうちょっと自由でいたい反面、お金がないと遠征もできない。</p>
<p>素晴らしい負の連鎖である。 バイトくらいは探したほうがよさそう。</p>
]]></content>
		</item>
		
		<item>
			<title>cChardetをPyPiに登録してみた</title>
			<link>https://github.pyyoshi.com/blog/2012/06/cChardet%E3%82%92PyPi%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
			<pubDate>Tue, 26 Jun 2012 18:40:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/cChardet%E3%82%92PyPi%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
			<description>BeautifulSoupのGoogle Groupにcchardetを導入したら高速化したよって報告したらBS開発者から
「ビルド等の導入をシンプルにしてくれたら使ってやってもいいよ。」
と言われたのでlibcharsetdetectを取り込んで1つの静的ライブラリにしちゃいました。
いくつかライブラリを作っているみですが、PyPiにはじめて登録しました。
適宜setup.pyに必要な情報を入れたら、
$python setup.py register
でユーザ登録とライブラリの登録を済ませます。その際にログイン済みでないとファイルのアップロードができなくなりますので注意してください。
そして、sdistをアップロードさせます。
$python setup.py sdist &amp;ndash;formats=gztaruploadこれだけで簡単に登録できちゃいました。 難しいこと考えずにアップロードできるのは大変便利ですね。
ただし、registerすると~/.pypircにユーザ名と暗号化されていないパスワードが書かれちゃっています。
registerでログイン・アップロードを終了したら消すという作業をするのもありなのかもしれませんね。
この辺は要調査
cchardet: PyPi</description>
			<content type="html"><![CDATA[<p>BeautifulSoupのGoogle
Groupにcchardetを導入したら高速化したよって報告したらBS開発者から</p>
<p>「ビルド等の導入をシンプルにしてくれたら使ってやってもいいよ。」</p>
<p>と言われたのでlibcharsetdetectを取り込んで1つの静的ライブラリにしちゃいました。</p>
<p>いくつかライブラリを作っているみですが、PyPiにはじめて登録しました。</p>
<p>適宜setup.pyに必要な情報を入れたら、</p>
<p>$python setup.py register<br>
でユーザ登録とライブラリの登録を済ませます。その際にログイン済みでないとファイルのアップロードができなくなりますので注意してください。</p>
<p>そして、sdistをアップロードさせます。<br>
$python setup.py sdist <!-- raw HTML omitted -->&ndash;formats=gztar<!-- raw HTML omitted --><!-- raw HTML omitted --> upload<!-- raw HTML omitted --></p>
<p>これだけで簡単に登録できちゃいました。
難しいこと考えずにアップロードできるのは大変便利ですね。</p>
<p>ただし、registerすると~/.pypircにユーザ名と暗号化されていないパスワードが書かれちゃっています。</p>
<p>registerでログイン・アップロードを終了したら消すという作業をするのもありなのかもしれませんね。</p>
<p>この辺は要調査</p>
<p><a href="http://pypi.python.org/pypi/cchardet">cchardet: PyPi</a></p>
]]></content>
		</item>
		
		<item>
			<title>より高速なchardet、cchardetをリリースしました</title>
			<link>https://github.pyyoshi.com/blog/2012/06/%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F%E3%81%AAchardetcchardet%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
			<pubDate>Wed, 20 Jun 2012 11:52:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/%E3%82%88%E3%82%8A%E9%AB%98%E9%80%9F%E3%81%AAchardetcchardet%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
			<description>以前の投稿にchardetがあまりにも遅いと嘆いていました。これも何かの縁だと思い、Cythonの練習がてら、さっそくcchardetをリリースさせて頂きました！
ベンチを取ったのですが、C拡張なだけあってかなり早い結果が出ました。
chardetが4.009999990463257秒で検出したのに対し、cchardetは0.0009999275207519531秒と実に4000倍！（計算あっているか不安ｗ)
割かし満足しています。
ただ不満もありまして、chardetはconfidenceを出力できるのに対し、cchardetはencodingしか吐きません。
これはcharsetdetectライブラリ側の問題なのですが、いずれソースをいじって得られるようにしたいと考えています。
もう1つはビルド環境がWindowsでしかおこなっていないため、setup.pyをもう少々柔軟なものに変えないと他のプラットフォームで扱えないことです。
この2つは時間があるときに修正していきたいと思います。
ではでは
PyYoshi / cChardet
追記 2012,06/20,22:39
linuxもビルドできるように修正しました。 Ubuntu 12.04 64bit環境で確認
追記 2012,07/07,14:35
confidenceを取得できるようにしました。</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->以前の投稿に<a href="http://pypi.python.org/pypi/chardet">chardet</a>があまりにも遅いと嘆いていました。<!-- raw HTML omitted --></p>
<p>これも何かの縁だと思い、Cythonの練習がてら、さっそく<a href="https://github.com/PyYoshi/cChardet">cchardet</a>をリリースさせて頂きました！</p>
<p>ベンチを取ったのですが、C拡張なだけあってかなり早い結果が出ました。</p>
<p>chardetが4.009999990463257秒で検出したのに対し、cchardetは0.0009999275207519531秒と実に4000倍！（計算あっているか不安ｗ)</p>
<p>割かし満足しています。</p>
<p>ただ不満もありまして、chardetはconfidenceを出力できるのに対し、cchardetはencodingしか吐きません。</p>
<p>これは<a href="https://bitbucket.org/medoc/uchardet-enhanced/overview">charsetdetect</a>ライブラリ側の問題なのですが、いずれソースをいじって得られるようにしたいと考えています。</p>
<p>もう1つはビルド環境がWindowsでしかおこなっていないため、setup.pyをもう少々柔軟なものに変えないと他のプラットフォームで扱えないことです。</p>
<p>この2つは時間があるときに修正していきたいと思います。</p>
<p>ではでは</p>
<p><a href="https://github.com/PyYoshi/cChardet">PyYoshi / cChardet</a></p>
<p>追記 2012,06/20,22:39<br>
linuxもビルドできるように修正しました。 Ubuntu 12.04 64bit環境で確認</p>
<p>追記 2012,07/07,14:35<br>
confidenceを取得できるようにしました。</p>
]]></content>
		</item>
		
		<item>
			<title>PyGooglePlusをプロファイリングしてみた</title>
			<link>https://github.pyyoshi.com/blog/2012/06/PyGooglePlus%E3%82%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
			<pubDate>Mon, 18 Jun 2012 15:58:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/PyGooglePlus%E3%82%92%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
			<description>現在noseでテストコードを書いてるのだけれど、ついでにどこが足を引っ張っているのか知るためにnose経由でプロファイリングしてみた。
準備
 Graphizをインストール $ pip install https://guppy-pe.svn.sourceforge.net/svnroot/guppy-pe/trunk/guppy&amp;lt;/span&amp;gt; $ pip install pbp.scripts  テストコードをtests.pyとして書いたら
$ nosetests &amp;ndash;with-profile &amp;ndash;profile-stats-file nose.prof tests.py
$ hotshot2dot nose.prof| dot -Tpng -o profile.png
を実行して出力した画像とにらめっこ
今回はApiHandler.get_user_info()のみのテストコードで行った。 またBeautifulSoup4がリリースされていることを知り、lxmlあれば早くなるよって言ってたので、3と4の2パターンで行った。
以下が結果である。


上がBS3、下がBS4であるが結果としては、lxmlを使っているはずのBS4のほうが遅い結果になっている。処理が余計にかかっている印象。 いずれ改善されると思うけど、特に必要性を感じないのであればBS3を使っておけばいいと思う。
それにしてもchardetの処理が足を引っ張りすぎている気がする。それと自分のライブラリ（苦笑）
※ この結果を出したときは指定していなかったが、文字コードが固定で既知なら,from_encoding引数をBeautifulSoupに指定してあげるのもいいと思うよ。 実験的にPyGooglePlusにも使用してみたら、5分の1くらい処理時間が縮まりました。 省いてるから当然だね。 だとしてもC拡張のchardetが欲しくなるよね。だれか作らないかな参考：
 Visual profiling with Nose and gprof2dot  </description>
			<content type="html"><![CDATA[<p>現在noseでテストコードを書いてるのだけれど、ついでにどこが足を引っ張っているのか知るためにnose経由でプロファイリングしてみた。</p>
<p>準備</p>
<ul>
<li><!-- raw HTML omitted -->Graphizをインストール<!-- raw HTML omitted --></li>
<li><!-- raw HTML omitted -->$ pip install
<a href="https://guppy-pe.svn.sourceforge.net/svnroot/guppy-pe/trunk/guppy%3C/span%3E">https://guppy-pe.svn.sourceforge.net/svnroot/guppy-pe/trunk/guppy&lt;/span&gt;</a></li>
<li><!-- raw HTML omitted -->$ pip
install pbp.scripts<!-- raw HTML omitted --></li>
</ul>
<p>テストコードをtests.pyとして書いたら<br>
$ nosetests &ndash;with-profile &ndash;profile-stats-file nose.prof tests.py<br>
$ hotshot2dot nose.prof| dot -Tpng -o profile.png<br>
を実行して出力した画像とにらめっこ</p>
<p>今回はApiHandler.get_user_info()のみのテストコードで行った。
またBeautifulSoup4がリリースされていることを知り、lxmlあれば早くなるよって言ってたので、3と4の2パターンで行った。</p>
<p>以下が結果である。</p>
<p><a href="/images/2012-06-18-pygooglepluswopurohuairingushitemita-profile1.png"><img src="/images/2012-06-18-pygooglepluswopurohuairingushitemita-profile1.png" alt=""></a></p>
<p><a href="/images/2012-06-18-pygooglepluswopurohuairingushitemita-profile3.png"><img src="/images/2012-06-18-pygooglepluswopurohuairingushitemita-profile3.png" alt=""></a></p>
<p>上がBS3、下がBS4であるが結果としては、lxmlを使っているはずのBS4のほうが遅い結果になっている。処理が余計にかかっている印象。
いずれ改善されると思うけど、特に必要性を感じないのであればBS3を使っておけばいいと思う。</p>
<p>それにしてもchardetの処理が足を引っ張りすぎている気がする。それと自分のライブラリ（苦笑）</p>
<p>※
この結果を出したときは指定していなかったが、文字コードが固定で既知なら,from_encoding引数をBeautifulSoupに指定してあげるのもいいと思うよ。
実験的にPyGooglePlusにも使用してみたら、5分の1くらい処理時間が縮まりました。
省いてるから当然だね。
だとしてもC拡張のchardetが欲しくなるよね。<!-- raw HTML omitted -->だれか作らないかな<!-- raw HTML omitted --></p>
<p>参考：</p>
<ul>
<li><!-- raw HTML omitted --><a href="http://blog.ziade.org/2008/08/25/visual-profiling-with-nose-and-gprof2dot/">Visual profiling with Nose
and
gprof2dot</a><!-- raw HTML omitted --></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Pythonコードを実行ファイル(exe)にするときの注意点</title>
			<link>https://github.pyyoshi.com/blog/2012/06/Python%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABexe%E3%81%AB%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Tue, 05 Jun 2012 11:16:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/Python%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%83%95%E3%82%A1%E3%82%A4%E3%83%ABexe%E3%81%AB%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>自分が知っている限りだと、py2exeとcx_freezeがある。前者はwindowsのみ対応であるが、cx_freezeはmac等のプラットフォームにも対応している。
さらにcx_freezeはsetup.pyに特に記述しなくても実行ファイルを作ることができるのでpy2exeより手軽に作れて便利なのである。
またpy2exeに比べてコードの依存関係のチェックを詳しくしているのか実行ファイルサイズが小さくなる。
で、便利ではあるcx_freezeなのだが使ってみて デメリット が２つほどあった。
１. py2exeでは１ファイルのなかにpydやpython.dll等があるのだが、cx_freezeは実行ファイルの他にpydとかそのへんの動的ライブラリが外に出る。
  py2exeはバイナリにビルドするコードを内包しているが、cx_freezeは__main__.py*というファイルにもろでているため、ごにょごにょするとバイトコードの中身がわかってしまう。
というデメリットがある。　＃1のデメリットはNSISを使えば1ファイルにまとめ上げることは出来る。 (参考)
以下のことから、あんまり見せたいくない文字列があるときはcx_freezeは避けて、py2exeを使えばいいのである。
その時は
  なるべくコードは１ファイルに収めてビルドする。
  見せたくない文字列がある場合は軽く難読化する。
  に気をつければいいんじゃないかな？
※ py2exeのメインコードは実行ファイルのバイナリでしか見つからなかったが、どこか違う場所にあるかもしれないので、この記事自体が意味をなさなくなるかもしれないのであしからず。
それと、そもそもPythonという言語のコンパイルはバイトコードに変換するだけであってC#とかJavaのように中間コードに変換しているわけではないので、コードは覗かれて当然であるという認識のもとで使うべきであるかと思います☆（ゝω・）vｷｬﾋﾟ</description>
			<content type="html"><![CDATA[<p>自分が知っている限りだと、py2exeとcx_freezeがある。前者はwindowsのみ対応であるが、cx_freezeはmac等のプラットフォームにも対応している。</p>
<p>さらにcx_freezeはsetup.pyに特に記述しなくても実行ファイルを作ることができるのでpy2exeより手軽に作れて便利なのである。</p>
<p>またpy2exeに比べてコードの依存関係のチェックを詳しくしているのか実行ファイルサイズが小さくなる。</p>
<p>で、便利ではあるcx_freezeなのだが使ってみて
デメリット が２つほどあった。</p>
<p>１.
py2exeでは１ファイルのなかにpydやpython.dll等があるのだが、cx_freezeは実行ファイルの他にpydとかそのへんの動的ライブラリが外に出る。</p>
<ol start="2">
<li></li>
</ol>
<p>py2exeはバイナリにビルドするコードを内包しているが、cx_freezeは__main__.py*というファイルにもろでているため、ごにょごにょするとバイトコードの中身がわかってしまう。</p>
<p>というデメリットがある。　＃1のデメリットはNSISを使えば1ファイルにまとめ上げることは出来る。
(<a href="http://blogs.yahoo.co.jp/topitopi38/17290986.html">参考</a>)</p>
<p>以下のことから、あんまり見せたいくない文字列があるときはcx_freezeは避けて、py2exeを使えばいいのである。</p>
<p>その時は</p>
<ol>
<li>
<p>なるべくコードは１ファイルに収めてビルドする。</p>
</li>
<li>
<p>見せたくない文字列がある場合は軽く難読化する。</p>
</li>
</ol>
<p>に気をつければいいんじゃないかな？</p>
<p>※
py2exeのメインコードは実行ファイルのバイナリでしか見つからなかったが、どこか違う場所にあるかもしれないので、この記事自体が意味をなさなくなるかもしれないのであしからず。</p>
<p>それと、そもそもPythonという言語のコンパイルはバイトコードに変換するだけであってC#とかJavaのように中間コードに変換しているわけではないので、コードは覗かれて当然であるという認識のもとで使うべきであるかと思います☆（ゝω・）vｷｬﾋﾟ</p>
]]></content>
		</item>
		
		<item>
			<title>IronPythonはクソ</title>
			<link>https://github.pyyoshi.com/blog/2012/06/IronPython%E3%81%AF%E3%82%AF%E3%82%BD/</link>
			<pubDate>Fri, 01 Jun 2012 11:26:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/06/IronPython%E3%81%AF%E3%82%AF%E3%82%BD/</guid>
			<description>PyGooglePlusでクライアントでも作ろうかとC#にIronPythonを組み込んで実験していたのだけれど、どうもうまく動かない。
というのもIronPython単体ではCPythonには負けるものの、いちよ実行はできたのだけれどC#から呼ぶとログイン処理からユーザ情報取得処理までに５分くらいかかる始末
せっかくdynamic使えてかなり親和性が上がっているのにもったいないなぁ…
ちなみにurllib2までの処理は軒並みな速さなのだけれどObjectを生成するBeautifulSoupやsimplejsonでかなり時間がかかっているみたい。
というわけで、pythonで書かれたものをrpc serverにしてソケット通信すればいいんじゃね？ってのが昨日たどり着いた結論；（</description>
			<content type="html"><![CDATA[<p>PyGooglePlusでクライアントでも作ろうかとC#にIronPythonを組み込んで実験していたのだけれど、どうもうまく動かない。</p>
<p>というのもIronPython単体ではCPythonには負けるものの、いちよ実行はできたのだけれどC#から呼ぶとログイン処理からユーザ情報取得処理までに５分くらいかかる始末</p>
<p>せっかくdynamic使えてかなり親和性が上がっているのにもったいないなぁ…</p>
<p>ちなみにurllib2までの処理は軒並みな速さなのだけれどObjectを生成するBeautifulSoupやsimplejsonでかなり時間がかかっているみたい。</p>
<p>というわけで、pythonで書かれたものをrpc
serverにしてソケット通信すればいいんじゃね？ってのが昨日たどり着いた結論；（</p>
]]></content>
		</item>
		
		<item>
			<title>PyGooglePlusをリリースしました</title>
			<link>https://github.pyyoshi.com/blog/2012/05/PyGooglePlus%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</link>
			<pubDate>Fri, 25 May 2012 22:38:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/05/PyGooglePlus%E3%82%92%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/</guid>
			<description>Google+の非公開APIを扱えるようにするPython製ライブラリ「PyGooglePlus」をリリースしました。
何時まで経ってもWrite API公開されないし、Webハックは楽しいので作ってしまいました。
Chrome Devtoolsとにらめっこしたせいもあって結構使い方わかってきた感じがします。
ただ、やはり久しぶりに書いた（まともな）コードなだけあって、へんてこな書き方が多く見受けられたのがちょっとアレですね。
使い方ですが、ひと通りtest.pyに書いてありますが、まぁ誰もこのままじゃ使わないだろうからドキュメント書いて、クライアント作ってぽいっとgithubにでも上げたいと思います :)</description>
			<content type="html"><![CDATA[<p>Google+の非公開APIを扱えるようにするPython製ライブラリ「<a href="https://github.com/PyYoshi/pygoogleplus">PyGooglePlus</a>」をリリースしました。</p>
<p>何時まで経ってもWrite
API公開されないし、Webハックは楽しいので作ってしまいました。<br>
Chrome
Devtoolsとにらめっこしたせいもあって結構使い方わかってきた感じがします。<br>
ただ、やはり久しぶりに書いた（まともな）コードなだけあって、へんてこな書き方が多く見受けられたのがちょっとアレですね。</p>
<p>使い方ですが、ひと通りtest.pyに書いてありますが、まぁ誰もこのままじゃ使わないだろうからドキュメント書いて、クライアント作ってぽいっとgithubにでも上げたいと思います
:)</p>
]]></content>
		</item>
		
		<item>
			<title>Python2.7.3 x64を自ビルド for Windows</title>
			<link>https://github.pyyoshi.com/blog/2012/05/Python2.7.3-x64%E3%82%92%E8%87%AA%E3%83%93%E3%83%AB%E3%83%89-for-Windows/</link>
			<pubDate>Thu, 17 May 2012 22:26:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/05/Python2.7.3-x64%E3%82%92%E8%87%AA%E3%83%93%E3%83%AB%E3%83%89-for-Windows/</guid>
			<description>前提としてsvnやVC++、Perl、Gowなどが入っているものとする
cd src
svn checkout http://svn.python.org/projects/python/branches/release27-maint/ python2.7.3
svn export http://svn.python.org/projects/external/bzip2-1.0.5
svn export http://svn.python.org/projects/external/openssl-0.9.8l
wget &amp;ldquo;http://sourceforge.jp/frs/redir.php?m=jaist&amp;amp;f=%2Fgnupack%2F49095%2Fsqlite3-3.6.21-3-src.tar.bz2&amp;quot;
tarコマンドではうまく解凍できないので7zip等で解凍、PCBuild内に置く。
wget &amp;ldquo;http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tcl8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;amp;ts=1337257341&amp;amp;use_mirror=jaist&amp;rdquo;
wget &amp;ldquo;http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tk8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;amp;ts=1337257429&amp;amp;use_mirror=jaist&amp;rdquo;
tcl/tkはsrcルートにtcltkというディレクトリを作り、その中に解凍
VisualStudio2010から
_bsddbのプロパティのインクリュードディレクトリにPCBuildとPCBuild/build_windowsを追加する。
_tkinterのプロパティのインクリュードディレクトリにtcltk内のgenericとxlibを追加。構成の種類をスタティックライブラリにする。
ビルドする。
２つほどエラーがでるがpython自体はビルド完了する。 ２つのエラーは
ここのパッチを使えば解決するみたいなのだがうまくいかない…
Windowsはさくっとビルドできないのがつらくてしょうがない…</description>
			<content type="html"><![CDATA[<p>前提としてsvnやVC++、Perl、Gowなどが入っているものとする</p>
<p>cd src<br>
svn
checkout http://svn.python.org/projects/python/branches/release27-maint/
python2.7.3</p>
<p>svn export <a href="http://svn.python.org/projects/external/bzip2-1.0.5">http://svn.python.org/projects/external/bzip2-1.0.5</a></p>
<p>svn export <a href="http://svn.python.org/projects/external/openssl-0.9.8l">http://svn.python.org/projects/external/openssl-0.9.8l</a></p>
<p>wget
&ldquo;<a href="http://sourceforge.jp/frs/redir.php?m=jaist&amp;f=%2Fgnupack%2F49095%2Fsqlite3-3.6.21-3-src.tar.bz2%22">http://sourceforge.jp/frs/redir.php?m=jaist&amp;f=%2Fgnupack%2F49095%2Fsqlite3-3.6.21-3-src.tar.bz2&quot;</a><br>
tarコマンドではうまく解凍できないので7zip等で解凍、PCBuild内に置く。</p>
<p>wget
&ldquo;<a href="http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tcl8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;ts=1337257341&amp;use">http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tcl8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;ts=1337257341&amp;use</a>_mirror=jaist&rdquo;<br>
wget
&ldquo;<a href="http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tk8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;ts=1337257429&amp;use">http://downloads.sourceforge.net/project/tcl/Tcl/8.4.19/tk8419-src.zip?r=http%3A%2F%2Fwww.tcl.tk%2Fsoftware%2Ftcltk%2Fdownload.html&amp;ts=1337257429&amp;use</a>_mirror=jaist&rdquo;<br>
tcl/tkはsrcルートにtcltkというディレクトリを作り、その中に解凍</p>
<p>VisualStudio2010から<br>
_bsddbのプロパティのインクリュードディレクトリにPCBuildとPCBuild/build_windowsを追加する。<br>
_tkinterのプロパティのインクリュードディレクトリにtcltk内のgenericとxlibを追加。構成の種類をスタティックライブラリにする。</p>
<p>ビルドする。</p>
<p>２つほどエラーがでるがpython自体はビルド完了する。 ２つのエラーは<br>
<!-- raw HTML omitted --><a href="http://bugs.python.org/issue10752">ここ</a>のパッチ<!-- raw HTML omitted --><br>
を使えば解決するみたいなのだがうまくいかない…</p>
<p>Windowsはさくっとビルドできないのがつらくてしょうがない…</p>
]]></content>
		</item>
		
		<item>
			<title>ircBot-consoleで自動オペレータ権限付与するスクリプト書いたよ</title>
			<link>https://github.pyyoshi.com/blog/2012/02/ircBot-console%E3%81%A7%E8%87%AA%E5%8B%95%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E6%A8%A9%E9%99%90%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88/</link>
			<pubDate>Mon, 20 Feb 2012 04:14:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2012/02/ircBot-console%E3%81%A7%E8%87%AA%E5%8B%95%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF%E6%A8%A9%E9%99%90%E4%BB%98%E4%B8%8E%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88/</guid>
			<description>IRCを使用しなくてはいけなくなったので書いてみました。
このコードはircBot-console用でJavaScript(Rhino)で書かれています。
WHITE_LISTにユーザを追加していくことで、自動でOP権限を与えるユーザを増やすことができます。
また、完全一致か前方一致か選択できます。
愚痴としてRhinoのデバッグメッセージがないこと（オブジェクトハッシュしか出力されない）、エラーログを記述するための関数がないことかなー。スクリプトのデバッグはとてもめんどくさいです。 OSSだし自分で書きなおせってのはあるけど</description>
			<content type="html"><![CDATA[<p>IRCを使用しなくてはいけなくなったので書いてみました。</p>
<p>このコードは<a href="http://www.enjoyxstudy.com/ircbotconsole/">ircBot-console</a>用でJavaScript(Rhino)で書かれています。</p>
<p>WHITE_LISTにユーザを追加していくことで、自動でOP権限を与えるユーザを増やすことができます。</p>
<p>また、完全一致か前方一致か選択できます。</p>
<p><!-- raw HTML omitted -->愚痴としてRhinoのデバッグメッセージがないこと（オブジェクトハッシュしか出力されない）、エラーログを記述するための関数がないことかなー。スクリプトのデバッグはとてもめんどくさいです。
OSSだし自分で書きなおせってのはあるけど<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>redmineをnginxで扱う</title>
			<link>https://github.pyyoshi.com/blog/2011/10/redmine%E3%82%92nginx%E3%81%A7%E6%89%B1%E3%81%86/</link>
			<pubDate>Wed, 05 Oct 2011 23:43:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/10/redmine%E3%82%92nginx%E3%81%A7%E6%89%B1%E3%81%86/</guid>
			<description>教授から成果を見える形で出せと言われたのでとりあえず備忘録。。
Redmineの設定とかsudo apt-get install ruby ruby1.8-dev rubygems sendmail imagemagick libmagick9-devsudo gem update &amp;ndash;system 1.6.2sudo gem install sqlite3-ruby sudo gem install -v=2.3.11 railssudo gem install -v=0.4.2 i18nsudo gem install rakesudo mkdir -p /var/www/redmine_testcd /var/www/redmine_testsudo git clone git://github.com/edavis10/redmine.gitcd redminesudo vim config/database.ymlproduction:adapter: sqlite3database: db/redmine.dbtimeout: 5000sudo rake generate_session_storesudo rake db:migrate RAILS_ENV=&amp;quot;production&amp;quot;sudo rake redmine:load_default_data RAILS_ENV=production&amp;gt;jaメールの設定がいまいちわからない。
使わないしテキトーでいいよね。sudo vim config/email.ymldelivery_method: :async_smtpsmtp_settings:address: localhostport: 25domain: host.example.jpsudo ruby script/server webrick -e productionhttp://serverip:3000にアクセスして動くかチェック
Ctrl-Cで中断
redmineをnginxで動かすときのもろもろsudo gem install passengersudo gem install rmagicksudo passenger-install-nginx-module自ビルドnginxだったので、そのときのソースとcofigureオプションで通す形に。</description>
			<content type="html"><![CDATA[<p>教授から成果を見える形で出せと言われたのでとりあえず備忘録。。</p>
<p><!-- raw HTML omitted -->Redmineの設定とか<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo apt-get install ruby ruby1.8-dev rubygems
sendmail imagemagick libmagick9-dev<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem update &ndash;system 1.6.2<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install sqlite3-ruby <!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install -v=2.3.11 rails<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install -v=0.4.2 i18n<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install rake<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo mkdir -p /var/www/redmine_test<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->cd /var/www/redmine_test<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo git clone
git://github.com/edavis10/redmine.git<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->cd redmine<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->sudo vim config/database.yml<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->production:<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   adapter: sqlite3<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   database: db/redmine.db<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   timeout: 5000<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->sudo rake generate_session_store<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo rake db:migrate
RAILS_ENV=&quot;production&quot;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo rake redmine:load_default_data
RAILS_ENV=production<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;ja<!-- raw HTML omitted --></p>
<p>メールの設定がいまいちわからない。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->使わないしテキトーでいいよね。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo vim config/email.yml<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->delivery_method: :async_smtp<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   smtp_settings:<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   address: localhost<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   port: 25<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->   domain: host.example.jp<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->sudo ruby script/server webrick -e
production<!-- raw HTML omitted --><br>
http://serverip:3000にアクセスして動くかチェック<br>
Ctrl-Cで中断</p>
<p><!-- raw HTML omitted -->redmineをnginxで動かすときのもろもろ<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install passenger<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo gem install rmagick<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->sudo passenger-install-nginx-module<!-- raw HTML omitted --><br>
自ビルドnginxだったので、そのときのソースとcofigureオプションで通す形に。</p>
<p><!-- raw HTML omitted -->passenger-config &ndash;root<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->/usr/lib/ruby/gems/1.8/gems/passenger-3.0.9<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->which ruby<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->/usr/bin/ruby<!-- raw HTML omitted --><br>
上記2つのコマンドの値を覚えておく</p>
<p><!-- raw HTML omitted -->cd /opt/nginx/conf<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo vim nginx.conf<!-- raw HTML omitted --><br>
とかそのへんで<br>
<!-- raw HTML omitted -->http {<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->&hellip;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_root
/usr/lib/ruby/gems/1.8/gems/passenger-3.0.9;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_ruby
/usr/bin/ruby;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_max_pool_size 8;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_max_instances_per_app
1;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_pool_idle_time
3600;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->&hellip;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->server {<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->listen 80;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->client_max_body_size 250M;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->server_name
redmine.example.com;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->root
/var/www/redmine_test/public;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->passenger_enabled on;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --> <!-- raw HTML omitted -->rails_env production;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->}<!-- raw HTML omitted --><br>
を適宜追加</p>
<p><!-- raw HTML omitted -->nginx -t -c &ldquo;nginx.confのpath&quot;<!-- raw HTML omitted --><br>
でエラーでないなら<br>
<!-- raw HTML omitted -->nginx -s reload<!-- raw HTML omitted --><br>
でおｋ</p>
<p>あとは<br>
/var/www/redmine_test<br>
以下のアクセス権等の調整でいいかな？<br>
多分だけどnginxのworkerと同じ権限を与えてやればいいと思う<br>
上のとおりだと多分権限の関係でうまく動かなくなると思うのでそのへんはよろしく</p>
<p>参考:<br>
<a href="http://redmine.jp/tech_note/install/">http://redmine.jp/tech_note/install/</a><br>
<a href="http://www.redmine.org/issues/8325">http://www.redmine.org/issues/8325</a><br>
<a href="http://doruby.kbmj.com/8y/20100628/Redmine_nginx_Passenger_">http://doruby.kbmj.com/8y/20100628/Redmine_nginx_Passenger_</a><br>
<a href="http://redmine.jp/tech_note/apache-passenger/">http://redmine.jp/tech_note/apache-passenger/</a></p>
]]></content>
		</item>
		
		<item>
			<title>mongodbの認証について</title>
			<link>https://github.pyyoshi.com/blog/2011/10/mongodb%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Wed, 05 Oct 2011 12:33:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/10/mongodb%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>mongodbで認証
configに
auth=trueとかく
bind_ip=0.0.0.0を指定するとそこからのみ接続を受け付ける。
次にデータベースへ接続する
mongo &amp;ndash;shelluse admindb.addUser(&amp;lsquo;username&amp;rsquo;,&amp;lsquo;passwd&amp;rsquo;)で管理者を追加
使用しているデータベースにユーザを追加する場合は
db.auth(&amp;lsquo;username&amp;rsquo;,&amp;lsquo;passwd&amp;rsquo;)で管理者権限でログイン後
db.addUser(&amp;lsquo;username2&amp;rsquo;,&amp;lsquo;passwd2&amp;rsquo;)で追加可能
{&amp;ldquo;$err&amp;rdquo; : &amp;ldquo;unauthorized db:admin lock type:-1 client:127.0.0.1&amp;rdquo;,&amp;quot;code&amp;rdquo; : 10057}上記のようなエラーは管理者権限を持っていないとなるので注意
詳しい設定方法は
File Based Configuration</description>
			<content type="html"><![CDATA[<p>mongodbで認証<br>
configに<br>
<!-- raw HTML omitted -->auth=true<!-- raw HTML omitted --><br>
とかく<br>
<!-- raw HTML omitted -->bind_ip=0.0.0.0<!-- raw HTML omitted --><br>
を指定するとそこからのみ接続を受け付ける。<br>
次にデータベースへ接続する<br>
<!-- raw HTML omitted -->mongo &ndash;shell<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->use admin<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->db.addUser(&lsquo;username&rsquo;,&lsquo;passwd&rsquo;)<!-- raw HTML omitted --><br>
で管理者を追加<br>
使用しているデータベースにユーザを追加する場合は<br>
<!-- raw HTML omitted -->db.auth(&lsquo;username&rsquo;,&lsquo;passwd&rsquo;)<!-- raw HTML omitted --><br>
で管理者権限でログイン後<br>
<!-- raw HTML omitted -->db.addUser(&lsquo;username2&rsquo;,&lsquo;passwd2&rsquo;)<!-- raw HTML omitted --><br>
で追加可能<br>
<!-- raw HTML omitted -->{&ldquo;$err&rdquo; : &ldquo;unauthorized db:admin lock type:-1
client:127.0.0.1&rdquo;,<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&quot;code&rdquo; : 10057}<!-- raw HTML omitted --><br>
上記のようなエラーは管理者権限を持っていないとなるので注意</p>
<p>詳しい設定方法は<br>
<a href="http://www.mongodb.org/display/DOCS/File+Based+Configuration">File Based
Configuration</a></p>
]]></content>
		</item>
		
		<item>
			<title>Windows8をWinPE3を使ったネットワーク経由でインストール</title>
			<link>https://github.pyyoshi.com/blog/2011/09/Windows8%E3%82%92WinPE3%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
			<pubDate>Wed, 21 Sep 2011 13:47:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/09/Windows8%E3%82%92WinPE3%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E7%B5%8C%E7%94%B1%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
			<description>たまたま4GBのUSBメモリ無く、それとネットワーク経由でのOSのインストールってどんなものなのか知りたくなったので試してみた。
使用したPCはdynabook S30。 こいつにRAM4GB+SSD64GBでアップグレードしてるのでWin7でもそれなり頑張ってくれていた。そんで今度はWin8で犠牲になってもらおうという魂胆である。
手順
1, USBから起動できるWindows PE 3の作成
1-1, Windows PEのイメージ作成
とりあえずここからWindows AIKをDLしてインスコ
インスコ終わったら管理者権限でWindows AIKの「Deployment ツールのコマンド プロンプト」を起動します。
そして以下のコマンドを実行するとWinPE起動イメージが出来上がります。
copype x86 D:\WinPE3imagex /apply D:\WinPE3\winpe.wim 1 D:\WinPE3\mountimagex /capture D:\WinPE3\mount D:\WinPE3\ISO\SOURCES\BOOT.WIM &amp;ldquo;WinPE for recovery&amp;rdquo; /boot /compress maximum oscdimg -n -bD:\WinPE3\etfsboot.com D:\WinPE3\ISO D:\WinPE3\recovery.iso1-2, USBメモリにイメージを書き込む
USBメモリの初期化を行わなければなりません。
それ自体はこちらの記事を参照すると良いでしょう。
さて初期化が終わった所で1-1で作ったイメージをUSBメモリに書き込みます。と言ってもコピーだけなんですが。
D:\WinPE3以下のISOフォルダ内をすべてUSBメモリにコピーすれば完了です。
あとはUSBメモリにドライバー類をおいて起動します。
2, WindowsPE上からネットワークインストール
2-1, ドライバの読み込み
うまく起動できたらコマンドプロンプトが表示されているかと思います。
そこで
drvload &amp;ldquo;読み込みたいドライバのINFパス&amp;quot;を実行すると良いと思う。
S30の場合RAIDドライバが無いといけないので
例) drvload C:\drivers\KR10.INFとしてドライバを読み込ませた。
2-2, ネットワークドライブのマウント
※ネットワーク越しからインストールするということでWin8のISOをマウントし、共有してあることを前提にします。
net use &amp;ldquo;任意のドライブレター&amp;rdquo; &amp;ldquo;共有先のパス&amp;rdquo; &amp;ldquo;ログインパスワード&amp;rdquo; /user:&amp;ldquo;ユーザ名&amp;quot;という感じに実行します。
例) net use n: \\test-user\h password /user:test-userこうすることでネットワークからOSインストールに必要なファイルへアクセスすることができます。</description>
			<content type="html"><![CDATA[<p>たまたま4GBのUSBメモリ無く、それとネットワーク経由でのOSのインストールってどんなものなのか知りたくなったので試してみた。<br>
使用したPCはdynabook S30。
こいつにRAM4GB+SSD64GBでアップグレードしてるのでWin7でもそれなり頑張ってくれていた。そんで今度はWin8で犠牲になってもらおうという魂胆である。</p>
<p>手順<br>
1, USBから起動できるWindows PE 3の作成<br>
1-1, Windows PEのイメージ作成<br>
とりあえず<a href="http://www.microsoft.com/downloads/ja-jp/details.aspx?FamilyID=696dd665-9f76-4177-a811-39c26d3b3b34">ここ</a>からWindows
AIKをDLしてインスコ<br>
インスコ終わったら管理者権限でWindows AIKの「Deployment ツールのコマンド
プロンプト」を起動します。<br>
そして以下のコマンドを実行するとWinPE起動イメージが出来上がります。<br>
<!-- raw HTML omitted -->copype x86 D:\WinPE3<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->imagex /apply D:\WinPE3\winpe.wim 1
D:\WinPE3\mount<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->imagex /capture D:\WinPE3\mount
D:\WinPE3\ISO\SOURCES\BOOT.WIM &ldquo;WinPE for recovery&rdquo; /boot /compress
maximum <!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->oscdimg -n -bD:\WinPE3\etfsboot.com
D:\WinPE3\ISO D:\WinPE3\recovery.iso<!-- raw HTML omitted --></p>
<p>1-2, USBメモリにイメージを書き込む<br>
USBメモリの初期化を行わなければなりません。<br>
それ自体は<a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/1175wpe2usb/wpe2usb.html#initusbmem">こちら</a>の記事を参照すると良いでしょう。<br>
さて初期化が終わった所で1-1で作ったイメージをUSBメモリに書き込みます。と言ってもコピーだけなんですが。<br>
<!-- raw HTML omitted -->D:\WinPE3以下のISOフォルダ内をすべてUSBメモリにコピー<!-- raw HTML omitted -->すれば完了です。<br>
あとはUSBメモリにドライバー類をおいて起動します。</p>
<p>2, WindowsPE上からネットワークインストール<br>
2-1, ドライバの読み込み<br>
うまく起動できたらコマンドプロンプトが表示されているかと思います。<br>
そこで<br>
<!-- raw HTML omitted -->drvload
&ldquo;読み込みたいドライバのINFパス&quot;<!-- raw HTML omitted --><br>
を実行すると良いと思う。<br>
S30の場合RAIDドライバが無いといけないので<br>
<!-- raw HTML omitted -->例) drvload C:\drivers\KR10.INF<!-- raw HTML omitted --><br>
としてドライバを読み込ませた。</p>
<p>2-2, ネットワークドライブのマウント<br>
※ネットワーク越しからインストールするということでWin8のISOをマウントし、共有してあることを前提にします。<br>
<!-- raw HTML omitted -->net use &ldquo;任意のドライブレター&rdquo; &ldquo;共有先のパス&rdquo;
&ldquo;ログインパスワード&rdquo; /user:&ldquo;ユーザ名&quot;<!-- raw HTML omitted --><br>
という感じに実行します。<br>
<!-- raw HTML omitted -->例) net use n: \\test-user\h password
/user:test-user<!-- raw HTML omitted --><br>
こうすることでネットワークからOSインストールに必要なファイルへアクセスすることができます。</p>
<p>2-3, Windows8のインストール<br>
ここからは結構すんなりとしています。<br>
コマンドプロンプトからマウントした先が「n:」ドライバの時は<br>
<!-- raw HTML omitted -->n:<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->setup.exe<!-- raw HTML omitted --><br>
と実行すればOSインストール画面が出てきます。<br>
あとは普段のインストールと同じようにすればいいと思います。</p>
<p>以上。</p>
]]></content>
		</item>
		
		<item>
			<title>Python向けTumblr APIライブラリ更新</title>
			<link>https://github.pyyoshi.com/blog/2011/08/Python%E5%90%91%E3%81%91Tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%9B%B4%E6%96%B0/</link>
			<pubDate>Mon, 15 Aug 2011 08:25:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/08/Python%E5%90%91%E3%81%91Tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%9B%B4%E6%96%B0/</guid>
			<description>v1からv2に新しくAPIが更新されたのでライブラリもそれに従いました。
使い方はtest.py見てください。 これまでどおりv1で良い方はリポジトリ変更して持って行ってください。
PyYoshi/Pytumb
実装していく中でわけわからないものとかあったし、そのうちDocなり書くかなぁ～。
まだまだv2の修正来るだろうし、新しく追加されるであろうapiを楽しみにしますかねぇ。 like/unlikeは早く実装して欲しいところｗ</description>
			<content type="html"><![CDATA[<p>v1からv2に新しくAPIが更新されたのでライブラリもそれに従いました。</p>
<p>使い方はtest.py見てください。
これまでどおりv1で良い方はリポジトリ変更して持って行ってください。</p>
<p><a href="https://github.com/PyYoshi/Pytumb">PyYoshi/Pytumb</a></p>
<p>実装していく中でわけわからないものとかあったし、そのうちDocなり書くかなぁ～。</p>
<p>まだまだv2の修正来るだろうし、新しく追加されるであろうapiを楽しみにしますかねぇ。
like/unlikeは早く実装して欲しいところｗ</p>
]]></content>
		</item>
		
		<item>
			<title>JavaScriptでOAuth認証するときの注意点</title>
			<link>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
			<pubDate>Thu, 30 Jun 2011 19:18:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/06/JavaScript%E3%81%A7OAuth%E8%AA%8D%E8%A8%BC%E3%81%99%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
			<description>JavaScript単体でOAuth認証する場合ConsumerKey/SecretKeyが見えてしまう。
難読化（base64など）ですぐにはバレないようにはできてもいずれ見つかってしますのだけれど、どのように他のJSなアプリは隠しているのだろうか？
単体ではなくサーバプロキシを通せばそんな意識しなくてもいいのだろうけど気になるところではある。
思いつく限りだと、JS本体には置かずバイナリをJSでパースしてキーを使うというものもある。
xhrでバイナリ取得
var xhr = new XMLHttpRequest();
xhr.open(&amp;lsquo;GET&amp;rsquo;, path, false);
xhr.overrideMimeType(&amp;lsquo;text/plain; charset=x-user-defined&amp;rsquo;);
xhr.send(null);
binary_string = xhr.responseText;
binary_stringをbinaryに変換する
bytes = []
for(var i=0, t; i &amp;lt; binary_string.length; i++){
bytes[i] = binary_string.charCodeAt(i) &amp;amp; 0xff;
}
こんなかんじでJS内でバイナリ化して、各自パース処理を書けばいいのではないでしょうか？
隠し方は人それぞれだと想いますが＾＾；
他の方法としてはyqlを使う方法もあるようですね。
How-to: Secure OAuth in JavaScript</description>
			<content type="html"><![CDATA[<p>JavaScript単体でOAuth認証する場合ConsumerKey/SecretKeyが見えてしまう。</p>
<p>難読化（base64など）ですぐにはバレないようにはできてもいずれ見つかってしますのだけれど、どのように他のJSなアプリは隠しているのだろうか？</p>
<p>単体ではなくサーバプロキシを通せばそんな意識しなくてもいいのだろうけど気になるところではある。</p>
<p>思いつく限りだと、JS本体には置かずバイナリをJSでパースしてキーを使うというものもある。</p>
<p>xhrでバイナリ取得<br>
var xhr = new XMLHttpRequest();<br>
xhr.open(&lsquo;GET&rsquo;, path, false);<br>
xhr.overrideMimeType(&lsquo;text/plain; charset=x-user-defined&rsquo;);<br>
xhr.send(null);<br>
binary_string = xhr.responseText;</p>
<p>binary_stringをbinaryに変換する<br>
bytes = []<br>
for(var i=0, t; i &lt; binary_string.length; i++){<br>
bytes[i] = binary_string.charCodeAt(i) &amp; 0xff;<br>
}</p>
<p>こんなかんじでJS内でバイナリ化して、各自パース処理を書けばいいのではないでしょうか？</p>
<p>隠し方は人それぞれだと想いますが＾＾；</p>
<p>他の方法としてはyqlを使う方法もあるようですね。</p>
<p><a href="http://derek.io/blog/2010/how-to-secure-oauth-in-javascript/">How-to: Secure OAuth in
JavaScript</a></p>
]]></content>
		</item>
		
		<item>
			<title>nginxでfastcgiを使うとき</title>
			<link>https://github.pyyoshi.com/blog/2011/06/nginx%E3%81%A7fastcgi%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D/</link>
			<pubDate>Wed, 29 Jun 2011 18:23:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/06/nginx%E3%81%A7fastcgi%E3%82%92%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%8D/</guid>
			<description>Pythonでweb app作ったので動かそうとサーバ周りをいろいろやってみたのだがfastcgiでの動作方法がいまいちよくわからなかった。
apacheのようにhoge.fcgiを指定してやれば動く、というものではないらしくどうすればいいのか結構時間を費やしてしまった。
１つのやり方としてspawn-fcgiを使ってプロセスを生成してやればいいらしい。 それをnginx.confのfastcgi_passに指定してやることでいいみたいだ。
試しにspawn-fcgiを単体起動して動かしてみた。
sudo spawn-fcgi -f test.fcgi -a 127.0.0.1 -p 9001 -u www-data -P /var/run/spawn-fcgi-moin.pid
こんな感じで起動してやればいい。
指定したipとportをnginx.confのfastcgi_passに指定して動けばおｋ
そんなかんじで。
起動スクリプト書いてみたので参考としてどうぞ
自動起動する場合はUbuntuはchkconfigではなくsysv-rc-confを使うこと。
sudo sysv-rc-conf test_app on
またはupdate-rc.d</description>
			<content type="html"><![CDATA[<p>Pythonでweb
app作ったので動かそうとサーバ周りをいろいろやってみたのだがfastcgiでの動作方法がいまいちよくわからなかった。</p>
<p>apacheのようにhoge.fcgiを指定してやれば動く、というものではないらしくどうすればいいのか結構時間を費やしてしまった。</p>
<p>１つのやり方としてspawn-fcgiを使ってプロセスを生成してやればいいらしい。
それをnginx.confのfastcgi_passに指定してやることでいいみたいだ。</p>
<p>試しにspawn-fcgiを単体起動して動かしてみた。</p>
<p>sudo spawn-fcgi -f test.fcgi -a 127.0.0.1 -p 9001 -u www-data
-P /var/run/spawn-fcgi-moin.pid</p>
<p>こんな感じで起動してやればいい。</p>
<p>指定したipとportをnginx.confのfastcgi_passに指定して動けばおｋ</p>
<p>そんなかんじで。</p>
<p>起動スクリプト書いてみたので参考としてどうぞ</p>
<p>自動起動する場合はUbuntuはchkconfigではなくsysv-rc-confを使うこと。</p>
<p><!-- raw HTML omitted --> <!-- raw HTML omitted -->sudo
sysv-rc-conf test_app on</p>
<p>またはupdate-rc.d</p>
]]></content>
		</item>
		
		<item>
			<title>Python向けtumblr APIライブラリ公開した。</title>
			<link>https://github.pyyoshi.com/blog/2011/06/Python%E5%90%91%E3%81%91tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F/</link>
			<pubDate>Mon, 06 Jun 2011 00:38:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/06/Python%E5%90%91%E3%81%91tumblr-API%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E5%85%AC%E9%96%8B%E3%81%97%E3%81%9F/</guid>
			<description>OAuthにしか対応してないtumblr APIライブラリ公開した。
test.pyとかapi.pyとか見ればいいと思うよ。
各API毎のパラメータは公式API DOC見てください。
まぁtumblr api叩いたことある人なら大丈夫だと思うけど。
ということでほい
PyYoshi/Pytumb at master - GitHub</description>
			<content type="html"><![CDATA[<p>OAuthにしか対応してないtumblr APIライブラリ公開した。<br>
test.pyとかapi.pyとか見ればいいと思うよ。</p>
<p>各API毎のパラメータは公式API DOC見てください。<br>
まぁtumblr api叩いたことある人なら大丈夫だと思うけど。</p>
<p>ということでほい</p>
<p><a href="https://github.com/PyYoshi/Pytumb">PyYoshi/Pytumb at master - GitHub</a></p>
]]></content>
		</item>
		
		<item>
			<title>libwebpのビルド</title>
			<link>https://github.pyyoshi.com/blog/2011/06/libwebp%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89/</link>
			<pubDate>Fri, 03 Jun 2011 19:00:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/06/libwebp%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89/</guid>
			<description>Ubuntu 10.04に用意されていないようで自前で用意したときのメモ
$ cd tmp
$ wget http://webp.googlecode.com/files/libwebp-0.1.2.tar.gz
$ tar zxvf libwebp-0.1.2.tar.gz
$ cd libwebp-0.1.2
$ sudo apt-get install automake libtool
$ aclocal &amp;amp;&amp;amp; autoconf &amp;amp;&amp;amp; automake -a -c;
$ ./autogen.sh
$ ./.configure
$ make
$ sudo make install
$ ls -la /usr/local/lib/libwebp*
$ ls -la /usr/local/include/webp/*
$ ls -la /usr/local/bin/*webp
以上</description>
			<content type="html"><![CDATA[<p>Ubuntu 10.04に用意されていないようで自前で用意したときのメモ</p>
<p>$ cd tmp<br>
$ wget http://webp.googlecode.com/files/libwebp-0.1.2.tar.gz<br>
$ tar zxvf libwebp-0.1.2.tar.gz<br>
$ cd libwebp-0.1.2<br>
$ sudo apt-get install automake libtool<br>
$ aclocal &amp;&amp; autoconf &amp;&amp; automake -a -c;<br>
$ ./autogen.sh<br>
$ ./.configure<br>
$ make<br>
$ sudo make install<br>
$ ls -la /usr/local/lib/libwebp*<br>
$ ls -la /usr/local/include/webp/*<br>
$ ls -la /usr/local/bin/*webp</p>
<p>以上</p>
]]></content>
		</item>
		
		<item>
			<title>VS2010でboostを扱う準備</title>
			<link>https://github.pyyoshi.com/blog/2011/04/VS2010%E3%81%A7boost%E3%82%92%E6%89%B1%E3%81%86%E6%BA%96%E5%82%99/</link>
			<pubDate>Mon, 18 Apr 2011 18:12:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/04/VS2010%E3%81%A7boost%E3%82%92%E6%89%B1%E3%81%86%E6%BA%96%E5%82%99/</guid>
			<description>研究室配属されて、スクリプト言語ばかり使っていた生活も変わるだろうとDreamSparkからVS2010を拝借した。
で、巷で話題のboostをVS2010で使えるようにした。（boostすげぇーってしか分かってないｗ
それとVSがうまくインスコされていないのか各PATHを手動で通している。
準備:C:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.batの修正
最初の行に
@SET VSINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0
@SET VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0\VC
@SET FrameworkDir32=C:\Windows\Microsoft.NET\Framework
@SET FrameworkVersion32=v4.0.30319
@SET Framework35Version=v3.5
を追加
:: @call :GetVSCommonToolsDir
:: @if &amp;ldquo;%VS100COMNTOOLS%&amp;ldquo;==&amp;rdquo;&amp;rdquo; goto error_no_VS100COMNTOOLSDIR
:: @call &amp;ldquo;%VS100COMNTOOLS%VCVarsQueryRegistry.bat&amp;rdquo; 32bit No64bit
該当部分をコメントにする。
※当環境ではこのようになったが各自インスコ場所とVer.は確認しておくこと。PATHに
C:\Program Files\Microsoft Visual Studio 10.0\VC\bin
C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE
C:\Program Files\Microsoft Visual Studio 10.0\VC\include
を追加
INCLUDEに
C:\Program Files\Microsoft SDKs\Windows\v7.0A\Include
C:\Program Files\Microsoft Visual Studio 10.0\VC\include
を追加
LIBに</description>
			<content type="html"><![CDATA[<p>研究室配属されて、スクリプト言語ばかり使っていた生活も変わるだろうとDreamSparkからVS2010を拝借した。<br>
で、巷で話題のboostをVS2010で使えるようにした。（boostすげぇーってしか分かってないｗ<br>
それとVSがうまくインスコされていないのか各PATHを手動で通している。</p>
<p><!-- raw HTML omitted -->準備:<!-- raw HTML omitted --><br>
C:\Program Files\Microsoft Visual Studio
10.0\VC\bin\vcvars32.batの修正<br>
最初の行に<br>
@SET VSINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0<br>
@SET VCINSTALLDIR=C:\Program Files\Microsoft Visual Studio 10.0\VC<br>
@SET FrameworkDir32=C:\Windows\Microsoft.NET\Framework<br>
@SET FrameworkVersion32=v4.0.30319<br>
@SET Framework35Version=v3.5<br>
を追加</p>
<p>:: @call :GetVSCommonToolsDir<br>
:: @if &ldquo;%VS100COMNTOOLS%&ldquo;==&rdquo;&rdquo; goto error_no_VS100COMNTOOLSDIR<br>
:: @call &ldquo;%VS100COMNTOOLS%VCVarsQueryRegistry.bat&rdquo; 32bit No64bit<br>
該当部分をコメントにする。<br>
<!-- raw HTML omitted -->※当環境ではこのようになったが各自インスコ場所とVer.は確認しておくこと。<!-- raw HTML omitted --></p>
<p>PATHに<br>
C:\Program Files\Microsoft Visual Studio 10.0\VC\bin<br>
C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE<br>
C:\Program Files\Microsoft Visual Studio 10.0\VC\include<br>
を追加</p>
<p>INCLUDEに<br>
C:\Program Files\Microsoft SDKs\Windows\v7.0A\Include<br>
C:\Program Files\Microsoft Visual Studio 10.0\VC\include<br>
を追加</p>
<p>LIBに<br>
C:\Program Files\Microsoft SDKs\Windows\v7.0A\Lib<br>
C:\Program Files\Microsoft Visual Studio 10.0\VC\lib<br>
を追加</p>
<p><!-- raw HTML omitted -->ビルド:<!-- raw HTML omitted --><br>
Visual Studio
コマンドプロンプトからboostrap.batのあるディレクトリに移動して<br>
bootstrapを実行。</p>
<pre><code>&gt;bootstrap
</code></pre>
<p>bjam.exeが生成されると思う。<br>
できなかったら、「boost\tools\build\bjam.log」あたりをチェックしてみるといいかもしれない。</p>
<p>bjamからboostのコンパイル</p>
<pre><code>&gt;bjam toolset=msvc-10.0 variant=debug,release threading=multi link=static
</code></pre>
<p>スペックが糞なせいかだいぶビルドに時間かかった。</p>
<p><!-- raw HTML omitted -->VS2010の設定:<!-- raw HTML omitted --><br>
プロジェクトを読み込んだら<br>
「Microsoft.Cpp.Win32.user」をダブルクリック、Includeディレクトリをクリックしboostディレクトリを追加。<br>
Libraryディレクトリをクリックし、ビルドされた「stage/lib」を追加。</p>
<p>以上で終了です。<br>
VS側の設定はまだビルドが終わってないので試してないけど、たぶん大丈夫でしょうｗ</p>
<p>参考:<br>
<a href="http://stackoverflow.com/questions/3461275/vs2010-command-prompt-gives-error-cannot-determine-the-location-of-the-vs-commo">VS2010 command prompt gives error : Cannot determine the location of
the VS Common Tools
folder.</a><br>
<a href="http://stackoverflow.com/questions/2990331/ms-c-2010-and-mspdb100-dll">MS C++ 2010 and
mspdb100.dll</a><br>
<a href="http://www.youtube.com/watch?v=5AmwIwedTCM">Compiling and configuring Boost C++ libraries for Visual Studio
2010</a></p>
]]></content>
		</item>
		
		<item>
			<title>PythonモジュールをSL4A向けにビルドしてみた</title>
			<link>https://github.pyyoshi.com/blog/2011/04/Python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92SL4A%E5%90%91%E3%81%91%E3%81%AB%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
			<pubDate>Wed, 06 Apr 2011 22:49:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/04/Python%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92SL4A%E5%90%91%E3%81%91%E3%81%AB%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
			<description>SL4AのVer.が上がってAPIも結構数サポートされて驚いていたのだが、それよりうれしいとおもったのがPythonのCモジュールのビルド方法が確立されたこと。
以前まではソースにそのようなツールは用意されていなくクロスコンパイラでとりあえずビルドって感じだった。
ということでPythonモジュールのビルド方法を。
ツールのソースコード追ってないので正しいかどうか分からないけどAndroidソースが必要みたい。
Androidのソースは各自準備してください。
/home/hoge/android/mydroid ← Androidのソース置き場
/home/hoge/android/sl4a ← SL4Aのソース置き場
とします。
今回はPyLZMAをビルドする例を紹介します。
SL4Aのソースをとってくる。
$pwd
/home/hoge/android/
$cd sl4a
$hg clone https://android-scripting.googlecode.com/hg/ android-scripting
ビルドツールの一部を修正する。
$cd android-scripting/tools/agcc
$vim agcc
126行目以降のものを以下のように1行追加
# Also need: -Wl,-soname,libXXXX.so
my @shared_args = (
 &amp;ldquo;-nostdlib&amp;rdquo;,
 &amp;ldquo;-Wl,-T,$DROID/build/core/armelf.xsc&amp;rdquo;,
 &amp;ldquo;-Wl,&amp;ndash;gc-sections&amp;rdquo;,
 &amp;ldquo;-Wl,-shared,-Bsymbolic&amp;rdquo;,
 &amp;ldquo;-L$ALIB&amp;rdquo;,
 &amp;ldquo;-Wl,&amp;ndash;no-whole-archive&amp;rdquo;,
** &amp;ldquo;-L/home/hoge/android/mydroid/prebuilt/ndk/android-ndk-r4/platforms/android-3/arch-arm/usr/lib &amp;ldquo;,** &amp;ldquo;-lc&amp;rdquo;,
 &amp;ldquo;-lm&amp;rdquo;,
 &amp;ldquo;-ldl&amp;rdquo;,
 #&amp;quot;-Wl,&amp;ndash;no-undefined&amp;rdquo;,
 &amp;ldquo;$TOOLCHAIN/lib/gcc/arm-eabi/4.4.0/interwork/libgcc.a&amp;rdquo;,
 &amp;ldquo;-Wl,&amp;ndash;whole-archive&amp;rdquo;); # .a, .o input files go *after* here</description>
			<content type="html"><![CDATA[<p>SL4AのVer.が上がってAPIも結構数サポートされて驚いていたのだが、それよりうれしいとおもったのがPythonのCモジュールのビルド方法が確立されたこと。<br>
以前まではソースにそのようなツールは用意されていなくクロスコンパイラでとりあえずビルドって感じだった。</p>
<p>ということでPythonモジュールのビルド方法を。</p>
<p>ツールのソースコード追ってないので正しいかどうか分からないけどAndroidソースが必要みたい。</p>
<p>Androidのソースは各自準備してください。</p>
<p>/home/hoge/android/mydroid ← Androidのソース置き場</p>
<p>/home/hoge/android/sl4a ← SL4Aのソース置き場</p>
<p>とします。</p>
<p>今回はPyLZMAをビルドする例を紹介します。</p>
<p>SL4Aのソースをとってくる。</p>
<p>$pwd</p>
<p>/home/hoge/android/</p>
<p>$cd sl4a</p>
<p>$hg clone <a href="https://android-scripting.googlecode.com/hg/">https://android-scripting.googlecode.com/hg/</a> android-scripting</p>
<p>ビルドツールの一部を修正する。</p>
<p>$cd android-scripting/tools/agcc<br>
$vim agcc</p>
<p>126行目以降のものを以下のように1行追加</p>
<p># Also need: -Wl,-soname,libXXXX.so</p>
<p>my @shared_args = (</p>
<p>    &ldquo;-nostdlib&rdquo;,</p>
<p>    &ldquo;-Wl,-T,$DROID/build/core/armelf.xsc&rdquo;,</p>
<p>    &ldquo;-Wl,&ndash;gc-sections&rdquo;,</p>
<p>    &ldquo;-Wl,-shared,-Bsymbolic&rdquo;,</p>
<p>    &ldquo;-L$ALIB&rdquo;,</p>
<p>    &ldquo;-Wl,&ndash;no-whole-archive&rdquo;,</p>
<p><!-- raw HTML omitted -->**   
&ldquo;-L/home/hoge/android/mydroid/prebuilt/ndk/android-ndk-r4/platforms/android-3/arch-arm/usr/lib &ldquo;,**<!-- raw HTML omitted --></p>
<p>    &ldquo;-lc&rdquo;,</p>
<p>    &ldquo;-lm&rdquo;,</p>
<p>    &ldquo;-ldl&rdquo;,</p>
<p>    #&quot;-Wl,&ndash;no-undefined&rdquo;,</p>
<p>    &ldquo;$TOOLCHAIN/lib/gcc/arm-eabi/4.4.0/interwork/libgcc.a&rdquo;,</p>
<p>    &ldquo;-Wl,&ndash;whole-archive&rdquo;); # .a, .o input files go *after* here</p>
<p>PyLZMAをとってくる。</p>
<p>$pwd</p>
<p>/home/hoge/android/sl4a</p>
<p>$mkdir Modules</p>
<p>$cd Modules</p>
<p>$wget http://pypi.python.org/packages/source/p/pylzma/pylzma-0.4.4.tar.gz</p>
<p>$tar zxvf pylzma-0.4.4.tar.gz</p>
<p>Moduleをビルド</p>
<p>$cd pylzma*<br>
$export SL4A_TRUNC=/home/hoge/android/sl4a/android-scripting</p>
<p>$export ANDROID_SRC=/home/hoge/android</p>
<p>$export
PATH=$PATH:$ANDROID_SRC/prebuilt/linux-x86/toolchain/arm-eabi-4.3.1/bin</p>
<p>$export PATH=$PATH:$SL4A_TRUNC/tools/agcc</p>
<p>$export AR=arm-eabi-ar</p>
<p>$export PYBASE=$SL4A_TRUNC/python/src</p>
<p>$export INCLUDES=&rdquo;-I$PYBASE -I$PYBASE/Include&rdquo;</p>
<p>$export OPT=&rdquo;-DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes
-fno-short-enums $INCLUDES&rdquo;</p>
<p>$export CXX=agcc</p>
<p>$export LDSHARED=&quot;agcc -shared&rdquo;</p>
<p>$export RANLIB=arm-eabi-ranlib</p>
<p>$export CC=agcc</p>
<p>$python -E setup.py build</p>
<p>これで問題なくビルド出来ると思う。</p>
<p>$cd build/lib*</p>
<p>$zip pylzma.zip *</p>
<p>でパッケージングしたらPython for
Androidでそのzipファイルをインポートすれば使えると思う。</p>
<p>またlib*の他にscripts*ってのが出来てたらそれも必要。</p>
<p>それを/sdcard/downloadに置く。</p>
<p>で、これだとなんかうまくいかない…</p>
<p>root取れれば</p>
<p>*.soを</p>
<p>/data/data/com.googlecode.pythonforandroid/files/python/lib/python2.6</p>
<p>に</p>
<p>*.pyを</p>
<p>/sdcard/com.googlecode.pythonforandroid/extras</p>
<p>に置けばいいと思う。</p>
<p>なんか説明が足らないな…<br>
ソース見ろってことかねｗ<br>
その部分のソース: <a href="http://code.google.com/p/python-for-android/source/browse/android/PythonForAndroid/src/com/googlecode/pythonforandroid/PythonMain.java?r=42c189f5b59e5e71f25440c55855e2336a9b1f12&amp;spec=svn42c189f5b59e5e71f25440c55855e2336a9b1f12">PythonMain.java</a></p>
]]></content>
		</item>
		
		<item>
			<title>x11vncをUbuntu10.04にインストールする</title>
			<link>https://github.pyyoshi.com/blog/2011/03/x11vnc%E3%82%92Ubuntu10.04%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/</link>
			<pubDate>Mon, 21 Mar 2011 19:57:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/03/x11vnc%E3%82%92Ubuntu10.04%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/</guid>
			<description>以前はVNCクライアント上でD&amp;amp;D出来た記憶があったけど10.04ではなんかうまくいかなかった。
仕様なのかなと思ったけど違うみたい。 いろいろなサイト（海外のフォーラム）でvnc4server以外でもどうやら起きている見たいで、x11vncだけはそうでもないってことでそれを入れた。
いろいろなサイトを参考にx11vncをxinetdで動かそうとしたんだけどうまくいかねぇ…
自ビルドしたり、gdmに登録してみたり、半日くらい潰した。無能すぎる
ってなわけで
$sudo apt-get install x11vnc
$sudo mkdir /etc/x11vnc
$sudo x11vnc -storepasswd /etc/x11vnc/passwd
$sudo chmod 644 /etc/x11vnc/passwd
$sudo vim /etc/xinetd.d/x11vnc
service x11vnc
{
 type = UNLISTED
 protocol = tcp
 disable = 0
 user = root
 server = /usr/bin/x11vnc
 server_args = -inetd -o /var/log/x11vnc.log -forever -auth /var/lib/gdm/:0.Xauth　-display :0 -xkb -rfbauth /etc/x11vnc/passwd
 port = ポート適宜
}
$sudo vim /etc/services
x11vnc ポート番号適宜/tcp #X11VNC Server</description>
			<content type="html"><![CDATA[<p>以前はVNCクライアント上でD&amp;D出来た記憶があったけど10.04ではなんかうまくいかなかった。<br>
仕様なのかなと思ったけど違うみたい。
いろいろなサイト（海外のフォーラム）でvnc4server以外でもどうやら起きている見たいで、x11vncだけはそうでもないってことでそれを入れた。</p>
<p>いろいろなサイトを参考にx11vncをxinetdで動かそうとしたんだけどうまくいかねぇ…<br>
自ビルドしたり、gdmに登録してみたり、半日くらい潰した。無能すぎる</p>
<p>ってなわけで</p>
<p>$sudo apt-get install x11vnc<br>
$sudo mkdir /etc/x11vnc<br>
$sudo x11vnc -storepasswd /etc/x11vnc/passwd<br>
$sudo chmod 644 /etc/x11vnc/passwd</p>
<p>$sudo vim /etc/xinetd.d/x11vnc</p>
<p>service x11vnc</p>
<p>{</p>
<p>   type = UNLISTED</p>
<p>   protocol = tcp</p>
<p>   disable = 0</p>
<p>   user = root</p>
<p>   server = /usr/bin/x11vnc</p>
<p>   server_args = -inetd -o /var/log/x11vnc.log -forever -auth
/var/lib/gdm/:0.Xauth　-display :0 -xkb -rfbauth /etc/x11vnc/passwd</p>
<p>   port = ポート適宜</p>
<p>}</p>
<p>$sudo vim /etc/services</p>
<p>x11vnc   ポート番号適宜/tcp   #X11VNC Server</p>
<p>これでいちよ動くようになった。</p>
<p>-xkbオプション追加でshiftキーが使えるようになる。</p>
<p>てかx11vncなんかきびきび動いてくれませんね(Color
depthが指定できないからかな？) vnc4serverの方が個人的には好きかもｗ</p>
<p>で、さらに問題が。<br>
X11VNCはX11自体にアクセスして処理を行っているため、クライアントで操作しているとサーバ側の画面もそれと同じように動くのである・・・ 困った。。<br>
いろいろ調べていたらXvfbというX11仮想プログラムを使えば良いみたい。</p>
<p>$sudo apt-get install xvfb</p>
<p>このあとよく分からない</p>
<p>$Xvfb :20 -screen 0 800x600x16 &amp;<br>
とかして<br>
x11vncの-displayオプションに:20を指定してやれば良いみたい？<br>
なので、<br>
端末で実際試してみたんだけど、ログインまではできるものの画面が白っぽいままセッション画面が出ない。<br>
何が問題なのかも分からない。</p>
<p>参考<br>
<a href="http://www.bramschoenmakers.nl/en/node/714">x11vnc: Shift key does not
work</a></p>
]]></content>
		</item>
		
		<item>
			<title>Win7でScalaとScalaAndroid環境構築とか</title>
			<link>https://github.pyyoshi.com/blog/2011/03/Win7%E3%81%A7Scala%E3%81%A8ScalaAndroid%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%A8%E3%81%8B/</link>
			<pubDate>Fri, 18 Mar 2011 02:31:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/03/Win7%E3%81%A7Scala%E3%81%A8ScalaAndroid%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%81%A8%E3%81%8B/</guid>
			<description>ただの備忘ログ
構築とかわかりにくかったのでまとめただけ。転んだら泣いてください。
サイトScala
Index of /gnu/windows/emacs か NTemacs
[](http://www.scala-ide.org/)[Apache Ant](http://ant.apache.org/bindownload.cgi)
[](http://ant.apache.org/bindownload.cgi)[ProGuard](http://proguard.sourceforge.net/)
[](http://proguard.sourceforge.net/)[simple-build-tool](http://code.google.com/p/simple-build-tool/)
[](http://code.google.com/p/simple-build-tool/)[object版create_project](https://gist.github.com/486306)
準備1:
ScalaのサイトからIzPack Installerをダウンロードして指示通りインスコ。インストーラ版だとPATHも勝手に追加してくれるので楽。
2:
最新のemacsを持ってくる。
「scala/misc/scala-tool-support/emacs」のファイルを「.emacs.d/scala-mode」に置く
C:\Users\***\AppData\Roaming\.emacs.dにinit.elを作成
以下内容
;; Set default fonts and fonts for Japaense (cond (window-system (set-default-font &amp;quot;Courier New-10&amp;quot;) ;; Japanese(japanese-jisx0208)font (set-fontset-font (frame-parameter nil &#39;font) &#39;japanese-jisx0208 (font-spec :family &amp;quot;Meiryo&amp;quot; :size 12) ;;&#39;(&amp;quot;Meiryo&amp;quot; . &amp;quot;unicode-bmp&amp;quot;) ) ) ) ;; Set scala-mode (add-to-list &#39;load-path &amp;quot;~/.emacs.d/scala-mode&amp;quot;) (require &#39;scala-mode-auto)  起動はbin以下の「runemacs.exe」でおｋみたい。
cuiでは「emacs -nw」みたい。
使い方とかよく分からないので追々。
3:
Apache AntからWindowsバイナリをダウンロード解凍後、適宜場所へ。 そのあと環境変数のPATHに「apache-ant/bin」がある場所を追加。
端末から「ant -version」でPATH通っているか確認。</description>
			<content type="html"><![CDATA[<p>ただの備忘ログ<br>
構築とかわかりにくかったのでまとめただけ。転んだら泣いてください。</p>
<p><!-- raw HTML omitted -->サイト<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><a href="http://www.scala-lang.org/">Scala</a><br>
<a href="http://ftp.gnu.org/gnu/windows/emacs/">Index of /gnu/windows/emacs</a> か
<a href="http://cha.la.coocan.jp/doc/NTEmacs.html#sec8">NTemacs</a><br>
[](<a href="http://www.scala-ide.org/)%5BApache">http://www.scala-ide.org/)[Apache</a>
Ant](<a href="http://ant.apache.org/bindownload.cgi">http://ant.apache.org/bindownload.cgi</a>)<br>
[](<a href="http://ant.apache.org/bindownload.cgi)%5BProGuard%5D(http://proguard.sourceforge.net/">http://ant.apache.org/bindownload.cgi)[ProGuard](http://proguard.sourceforge.net/</a>)<br>
[](<a href="http://proguard.sourceforge.net/)%5Bsimple-build-tool%5D(http://code.google.com/p/simple-build-tool/">http://proguard.sourceforge.net/)[simple-build-tool](http://code.google.com/p/simple-build-tool/</a>)<br>
[](<a href="http://code.google.com/p/simple-build-tool/)%5Bobject">http://code.google.com/p/simple-build-tool/)[object</a>版create_project](<a href="https://gist.github.com/486306">https://gist.github.com/486306</a>)</p>
<p><!-- raw HTML omitted -->準備<!-- raw HTML omitted --><br>
1:<br>
ScalaのサイトからIzPack
Installerをダウンロードして指示通りインスコ。インストーラ版だとPATHも勝手に追加してくれるので楽。</p>
<p>2:<br>
最新のemacsを持ってくる。<br>
「scala/misc/scala-tool-support/emacs」のファイルを「.emacs.d/scala-mode」に置く<br>
C:\Users\***\AppData\Roaming\.emacs.dにinit.elを作成<br>
以下内容</p>
<pre><code>;; Set default fonts and fonts for Japaense
(cond
  (window-system
    (set-default-font &quot;Courier New-10&quot;)
    ;; Japanese(japanese-jisx0208)font
    (set-fontset-font
      (frame-parameter nil 'font)
      'japanese-jisx0208
      (font-spec :family &quot;Meiryo&quot; :size 12)
      ;;'(&quot;Meiryo&quot; . &quot;unicode-bmp&quot;)
    )
  )
)
;; Set scala-mode
(add-to-list 'load-path &quot;~/.emacs.d/scala-mode&quot;)
(require 'scala-mode-auto)
</code></pre>
<p>起動はbin以下の「runemacs.exe」でおｋみたい。<br>
cuiでは「emacs -nw」みたい。<br>
使い方とかよく分からないので追々。</p>
<p>3:<br>
Apache AntからWindowsバイナリをダウンロード解凍後、適宜場所へ。
そのあと環境変数のPATHに「apache-ant/bin」がある場所を追加。<br>
端末から「ant -version」でPATH通っているか確認。</p>
<p>4:<br>
ProGuardをダウンロード解凍後適宜場所へ。そのあと環境変数に<br>
PROGUARD_HOMEを新規追加。<br>
PATHに「%PROGUARD_HOME%\bin」を追加<br>
「proguard」を端末内で実行確認。</p>
<p>5:<br>
端末内で「sbaz install
scala-android」を実行しscala-androidをインスコ。<br>
このままではscala自体がエラーで起動しないので。<br>
こちらで2.8.1用にビルドした物を用意したので、自己責任で<a href="http://dl.dropbox.com/u/2791985/scala-2.8.1/scala-android.7z">scala-android.7z</a>をダウンロード解凍後<br>
「scala/lib」以下に置けばおｋ<br>
※いつダウンロードリンクが切れるか分かりません（笑</p>
<p>6:<br>
simple-build-toolをダウンロード解凍後適宜場所へ。<br>
「sbt-launch-*」を「sbt-launch.jar」へリネーム</p>
<pre><code>@echo off
java -Xmx512M -jar &quot;%~dp0/sbt-launch.jar&quot; %*
</code></pre>
<p>そのあと環境変数のPATHにsimple-build-toolがある場所を追加。<br>
ANDROID_SDK_HOMEという名前でandroid-sdkのある場所を追加。</p>
<p>端末内で「sbt」でPATHが通っているか確認。</p>
<p>7:<br>
simple-build-toolと同じところにcreate_project.scalaを保存<br>
create_project.scalaを修正<br>
create_project.scala:13
&ndash; val e = args.elements
++ /<strong>val e = args.elements</strong>/
++ val e = args.iterator</p>
<p>修正版：<a href="http://dl.dropbox.com/u/2791985/scala-2.8.1/create_project.7z">create_project.7z</a></p>
<p>※こっちもいつダウンロードリンクが切れるか分かりません（笑<br>
あとScala触ったことないのでちゃんと動くかすら分かりません（汗</p>
<p><!-- raw HTML omitted -->実際に使ってみる<!-- raw HTML omitted --><br>
1: プロジェクトの作成<br>
任意のフォルダにsimple-build-toolディレクトリにある「create_project.scala」をコピーする。<br>
PS&gt; scalac create_project.scala<br>
PS&gt; scala -cp . CreateProject HelloProject scalatohoku.example.hello
&ndash;platform android-8 &ndash;scala-version 2.8.1 &ndash;activity HelloActivity<br>
PS&gt; cd HelloProject<br>
PS&gt; sbt update package-debug</p>
<p>2: コンパイル(apk化) → ぶち当たった壁を参照<br>
HelloProject下で<br>
PS&gt; sbt<br>
sbt&gt; compile<br>
sbt&gt; install-emulator<br>
または<br>
sbt&gt; install-device<br>
インストール出来ません</p>
<p><!-- raw HTML omitted -->ぶち当たった壁<!-- raw HTML omitted --><br>
1:<a href="http://code.google.com/p/simple-build-tool/issues/detail?id=150">Issue 150: sbt.Process apply splits path to command having
spaces</a><br>
android-sdkのpathにスペースが入るとだめな見たい。なので別位置に置きましょう。<br>
結構これに時間とられた（汗</p>
<p>2: sbt&gt; install-emulator(install-device)しても動かない<br>
device名が文字化けしているのか端末へのインストールがうまくいかない。<br>
「target/scala_2.8.1」にapkできてるのでそれをインストールして対処。</p>
<p>参考<br>
<!-- raw HTML omitted --><a href="http://blog.takeda-soft.jp/blog/show/381">Android SDK for
Scala |
ブログ.武田ソフト.jp</a><!-- raw HTML omitted --><br>
<a href="http://d.hatena.ne.jp/nanjakkun/20101117/1289945494">Scala + Androidをsbt(Simple Build Tool)
とEclipseを併用して開発</a><br>
<a href="http://d.hatena.ne.jp/tototoshi/20100925/1285420294">EmacsでつくるScala開発環境
前編(scala-mode)</a></p>
]]></content>
		</item>
		
		<item>
			<title>Androidのライブラリの依存関係を調べる。</title>
			<link>https://github.pyyoshi.com/blog/2011/03/Android%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</link>
			<pubDate>Tue, 08 Mar 2011 16:47:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/03/Android%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BE%9D%E5%AD%98%E9%96%A2%E4%BF%82%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B/</guid>
			<description>バイナリ開けるのめんどくさかったので書いた。やってることが分かる人のみで。スクリプトと同じフォルダにbin, lib作って適宜ファイル入れること。また、arm-eabi-objdumpも入れておくこと。# -*- coding: utf-8 -*- #!/usr/bin/env python from os import getcwd, listdir from popen2 import popen3 cdir = getcwd() lib_flist = listdir(cdir+&#39;/lib/&#39;) bin_flist = listdir(cdir+&#39;/bin/&#39;) for file in lib_flist: cmd = &#39;./arm-eabi-objdump -x ./lib/&#39;+ file + &#39; |grep -e NEEDED&#39; stdout, stdin, stderr = popen3(cmd) print file print stdout.read() print stderr.read() for file in bin_flist: cmd = &#39;./arm-eabi-objdump -x ./bin/&#39;+ file + &#39; |grep -e NEEDED&#39; stdout, stdin, stderr = popen3(cmd) print file print stdout.</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted -->バイナリ開けるのめんどくさかったので書いた。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->やってることが分かる人のみで。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->スクリプトと同じフォルダにbin,
lib作って適宜ファイル入れること。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->また、<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->arm-eabi-objdumpも入れておくこと。<!-- raw HTML omitted --></p>
<pre><code># -*- coding: utf-8 -*-
#!/usr/bin/env python
from os import getcwd, listdir
from popen2 import popen3

cdir = getcwd()

lib_flist = listdir(cdir+'/lib/')
bin_flist = listdir(cdir+'/bin/')
for file in lib_flist:
    cmd = './arm-eabi-objdump -x ./lib/'+ file + ' |grep -e NEEDED'
    stdout, stdin, stderr = popen3(cmd)
    print file
    print stdout.read()
    print stderr.read()

for file in bin_flist:
    cmd = './arm-eabi-objdump -x ./bin/'+ file + ' |grep -e NEEDED'
    stdout, stdin, stderr = popen3(cmd)
    print file
    print stdout.read()
    print stderr.read()
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>cd hoge; ls-aと打つのがめんどくさくて、、</title>
			<link>https://github.pyyoshi.com/blog/2011/02/cd-hoge-ls-a%E3%81%A8%E6%89%93%E3%81%A4%E3%81%AE%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%8F%E3%81%A6/</link>
			<pubDate>Wed, 09 Feb 2011 17:00:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/02/cd-hoge-ls-a%E3%81%A8%E6%89%93%E3%81%A4%E3%81%AE%E3%81%8C%E3%82%81%E3%82%93%E3%81%A9%E3%81%8F%E3%81%95%E3%81%8F%E3%81%A6/</guid>
			<description>最近リナックスを使う機会が多くなってきて、どうもcd コマンドの後にls -aと打つのが面倒になってきた。
最初はまぁそーいうものだろうと思ってたんだけど我慢の限界だったので、bashrcにcd hoge; ls -aをcdコマンドだけで出来るようにした。
$vim .bashrc
function cd() {
builtin cd $@
ls -a
}
$source .bashrc
を追加して終了。
動くか心配だったけど無事動きましたｗ</description>
			<content type="html"><![CDATA[<p>最近リナックスを使う機会が多くなってきて、どうもcd コマンドの後にls
-aと打つのが面倒になってきた。</p>
<p>最初はまぁそーいうものだろうと思ってたんだけど我慢の限界だったので、bashrcにcd
hoge; ls -aをcdコマンドだけで出来るようにした。</p>
<p>$vim .bashrc<br>
function cd() {<br>
  builtin cd $@<br>
  ls -a<br>
}<br>
$source .bashrc</p>
<p>を追加して終了。</p>
<p>動くか心配だったけど無事動きましたｗ</p>
]]></content>
		</item>
		
		<item>
			<title>暗号化したHomeで注意すること SSH編</title>
			<link>https://github.pyyoshi.com/blog/2011/01/%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%97%E3%81%9FHome%E3%81%A7%E6%B3%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8-SSH%E7%B7%A8/</link>
			<pubDate>Sat, 15 Jan 2011 19:20:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2011/01/%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%97%E3%81%9FHome%E3%81%A7%E6%B3%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8-SSH%E7%B7%A8/</guid>
			<description>普段はHomeなんて暗号化しない設定でOSを構築するのでが、正月中に作ったとある鯖では暗号化したHomeを採用していた。
そのときは、まぁ何も影響ないだろうと思っていたのだが、SSHなどの公開鍵認証でそれにぶち当たった。
基本的に公開鍵はHome以下の&amp;rdquo;.ssh&amp;quot;に置くのだが、暗号化Homeの場合はそのデフォルトの状態だと公開鍵を読みに行くことが出来ないのだ。
/home以下がマウントされることはないので。
なので、公開鍵は/home以外の場所に置く必要が出てくる。
で、実際やることは
/homeが見える環境で公開鍵を別の場所にコピーすればおｋってことで作業開始。
$sudo mkdir /etc/
$sudo cp $HOME/.ssh/authorized_keys/etc//authorized_keys

**$sudo chmod 700 /etc/****$sudo chown /etc/**$sudo chmod 600 /etc//authorized_keys$sudo chown /etc//authorized_keys$sudo vim /etc/ssh/sshd_config**「AuthorizedKeysFile/etc//authorized_keys」部分を編集**$sudo /etc/init.d/ssh restart問題は$HOME以下にこのままではアクセス出来ないこと。どうすればいいんだろうか？参考: Encrypted Home Directory</description>
			<content type="html"><![CDATA[<p>普段はHomeなんて暗号化しない設定でOSを構築するのでが、正月中に作ったとある鯖では暗号化したHomeを採用していた。</p>
<p>そのときは、まぁ何も影響ないだろうと思っていたのだが、SSHなどの公開鍵認証でそれにぶち当たった。</p>
<p>基本的に公開鍵はHome以下の&rdquo;.ssh&quot;に置くのだが、暗号化Homeの場合はそのデフォルトの状態だと公開鍵を読みに行くことが出来ないのだ。</p>
<p>/home以下がマウントされることはないので。</p>
<p>なので、公開鍵は/home以外の場所に置く必要が出てくる。</p>
<p>で、実際やることは</p>
<p>/homeが見える環境で公開鍵を別の場所にコピーすればおｋってことで作業開始。</p>
<p><strong><!-- raw HTML omitted -->$sudo mkdir
/etc/<!-- raw HTML omitted --></strong></p>
<p><strong><!-- raw HTML omitted -->$sudo cp <!-- raw HTML omitted -->$HOME/.ssh/<!-- raw HTML omitted --><!-- raw HTML omitted -->authorized_keys<!-- raw HTML omitted --><!-- raw HTML omitted --> /etc//authorized_keys<!-- raw HTML omitted --><!-- raw HTML omitted --></strong></p>
<p><strong><!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<!-- raw HTML omitted -->**$sudo
chmod 700 /etc/**<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted -->**$sudo
chown  /etc/**<!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><strong>$sudo
chmod 600 /etc/<!-- raw HTML omitted -->/authorized_keys<!-- raw HTML omitted --></strong><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><strong>$sudo
chown  /etc/<!-- raw HTML omitted -->/authorized_keys<!-- raw HTML omitted --></strong><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><strong>$sudo
vim /etc/ssh/sshd_config</strong><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->**「AuthorizedKeysFile<!-- raw HTML omitted -->
<!-- raw HTML omitted -->/etc//authorized_keys」部分を編集**<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><strong>$sudo
/etc/init.d/ssh restart</strong><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->問題は$HOME以下にこのままではアクセス出来ないこと。<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->どうすればいいんだろうか？<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->参考: <a href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys#Troubleshooting">Encrypted
Home
Directory</a><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>githubにプッシュ</title>
			<link>https://github.pyyoshi.com/blog/2010/12/github%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5/</link>
			<pubDate>Fri, 24 Dec 2010 00:46:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/12/github%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5/</guid>
			<description>git init
git add .
git commit -m &amp;lsquo;first commit&amp;rsquo;
git remote add origin git@github.com:hoge/fuga.git
git push origin master</description>
			<content type="html"><![CDATA[<p>git init<br>
git add .<br>
git commit -m &lsquo;first commit&rsquo;<br>
git remote add origin <a href="mailto:git@github.com">git@github.com</a>:hoge/fuga.git<br>
git push origin master</p>
]]></content>
		</item>
		
		<item>
			<title>IS01 rooterでうまーくモジュールが呼び出せないとおもったらの巻き</title>
			<link>https://github.pyyoshi.com/blog/2010/12/IS01-rooter%E3%81%A7%E3%81%86%E3%81%BE%E3%83%BC%E3%81%8F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%9B%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8A%E3%82%82%E3%81%A3%E3%81%9F%E3%82%89%E3%81%AE%E5%B7%BB%E3%81%8D/</link>
			<pubDate>Sun, 12 Dec 2010 14:00:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/12/IS01-rooter%E3%81%A7%E3%81%86%E3%81%BE%E3%83%BC%E3%81%8F%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%9B%E3%81%AA%E3%81%84%E3%81%A8%E3%81%8A%E3%82%82%E3%81%A3%E3%81%9F%E3%82%89%E3%81%AE%E5%B7%BB%E3%81%8D/</guid>
			<description>※文鎮化する可能性が高い操作を行っていますので注意してください。
いやはや便利な者が出来てしまうとそれに頼ってしまうのですが、それが盲点となってしまった。
たぶん僕だけの環境で起こったことだと思うので気にせずに＾＾；
MIRO氏作成のIS01 rooter_002ですが、こちらを使用した際にmsm_nand_exをinsmodすることが出来なかった。
なぜ出来なかったのか？
まずは、/sqlite_journals/is01root/以下にあるautoexecに実行権限が付与されていなかった。
#chmod 755 /sqlite_journals/is01root/autoexec.sh
それと。autoexec.shに書かれている２行に「/sqlite_journals/is01root/_su &amp;hellip;」とあるが、is01root以下に「_su」が入っていない。
ファイルをDL解凍したら
adb push _su /sqlite_journals/is01root/
#chown root.root _su
#chmod 6755 _su
で再起動を行う。
これでlsmodしてモジュールがロードされていればおｋです。
あと*.koは基本的に644で。
で、ここまで書いたが。</description>
			<content type="html"><![CDATA[<p>※文鎮化する可能性が高い操作を行っていますので注意してください。</p>
<p>いやはや便利な者が出来てしまうとそれに頼ってしまうのですが、それが盲点となってしまった。</p>
<p>たぶん僕だけの環境で起こったことだと思うので気にせずに＾＾；</p>
<p>MIRO氏作成の<a href="http://blog.mobilehackerz.jp/2010/11/au-is01root010009-is01.html">IS01
rooter_002</a>ですが、こちらを使用した際にmsm_nand_exをinsmodすることが出来なかった。</p>
<p>なぜ出来なかったのか？</p>
<p>まずは、/sqlite_journals/is01root/以下にあるautoexecに実行権限が付与されていなかった。<br>
<strong><!-- raw HTML omitted -->#chmod
755 /sqlite_journals/is01root/autoexec.sh<!-- raw HTML omitted --></strong></p>
<p>それと。autoexec.shに書かれている２行に「/sqlite_journals/is01root/_su
&hellip;」とあるが、is01root以下に「_su」が入っていない。<br>
<a href="http://mobilehackerz.jp/contents?plugin=attach&amp;refer=Software%2FAndroid%2FIS01root&amp;openfile=342-bootkit.zip">ファイルをDL</a>解凍したら<br>
<strong><!-- raw HTML omitted -->adb push
_su /sqlite_journals/is01root/<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#chown root.root
_su<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#chmod 6755
_su<!-- raw HTML omitted --></strong><br>
で再起動を行う。<br>
これでlsmodしてモジュールがロードされていればおｋです。<br>
あと*.koは基本的に644で。</p>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->で、ここまで書いたが。<br>
MIRO氏はたぶんsystemを書き込めないように上記手順を行わなかったのかなと思います。<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>IS01のkernelをビルドしちゃおう！ ※修正: 20101213</title>
			<link>https://github.pyyoshi.com/blog/2010/12/IS01%E3%81%AEkernel%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86-%E4%BF%AE%E6%AD%A3-20101213/</link>
			<pubDate>Sat, 04 Dec 2010 20:08:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/12/IS01%E3%81%AEkernel%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86-%E4%BF%AE%E6%AD%A3-20101213/</guid>
			<description>※このビルドはNANDロック解除などのセキュリティ部分の解除はしていません。
nandロックが解除出きるようになって、recovery等の書き変えも可能になりいろいろと旬になってきたIS01ですが、まだまだスタートしたばかりです。
で、まぁカスタムロム作りたくてandroidのソースをぼちぼち読んでいるのですが云々。
さてさて、今回はSH Developers Squareに公開されているIS01のkernelソースをビルドしていきます。
ソースは前記事のスクリプトから取得しておきましょう。
STEP1: android.git.kernel.orgからコンパイル用ソースをとってきましょう。(既にやっている人はSTEP2へ)
#mkdir mydroid
#wget http://android.git.kernel.org/repo&amp;lt;/span&amp;gt;
#chmod 755 repo
#./repo init -u git://android.git.kernel.org/platform/manifest.git -b froyo
#./repo sync
ここのSTEPは取得に時間がかかりますので気長に待ちましょう。
STEP2: IS01のソースをビルドするための準備1
IS01のkernelソースに移動
#vim ./arch/arm/mach-msm/sh_sleepcheck.c
最初の行にある#include &amp;lt;smd_private.h&amp;gt;を#include &amp;ldquo;smd_private.h&amp;rdquo;
に書き換える。diffはよーわからないのでそのうち勉強する。
STEP3: IS01のソースをビルドするための準備2
IS01での操作です。
rootとった状態でTerminal Emulatorから
#busybox cp /proc/config.gz /sdcard/config.gz ←この操作はbusyboxとそのpathが必要です。
config.gzをPCに持ってきて展開する。
それをIS01のkernelフォルダに「.config」という名前で保存してください。
「.config」はmakeするときに使用します。
STEP4: kernelのビルド
#make ARCH=arm CROSS_COMPILE=../../mydroid/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin/arm-eabi-
を実行すると、
arch/arm/boot/にImageというファイルが出来上がります。これがkernelです。
お疲れ様でした。
と記事書いてたら仙石さんが仕事早いｗ
「Android 端末 IS01 のカーネルを入れ替えてみた ? さよならデッカード LSM」
とりあえず僕はnandプロテクト外したものを作っています。
froyoベースになるにはもうちょいお勉強。。
STEP 番外編1: android.kernel.orgとcode auroraからのkernelソース取得
・純粋なandroid向けkernelの取得</description>
			<content type="html"><![CDATA[<p><strong><!-- raw HTML omitted -->※このビルドはNANDロック解除などのセキュリティ部分の解除はしていません。<!-- raw HTML omitted --></strong></p>
<p>nandロックが解除出きるようになって、recovery等の書き変えも可能になりいろいろと旬になってきたIS01ですが、まだまだスタートしたばかりです。</p>
<p>で、まぁカスタムロム作りたくてandroidのソースをぼちぼち読んでいるのですが云々。</p>
<p>さてさて、今回はSH Developers
Squareに公開されているIS01のkernelソースをビルドしていきます。</p>
<p>ソースは<a href="/2010/12/SH-DevelopersSquare%E3%81%8B%E3%82%89IS01%E7%AD%89%E3%81%AEAndroid%E5%90%91%E3%81%91%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92DL%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/">前記事</a>のスクリプトから取得しておきましょう。</p>
<p>STEP1:
android.git.kernel.orgからコンパイル用ソースをとってきましょう。(既にやっている人はSTEP2へ)<br>
<strong><!-- raw HTML omitted -->#mkdir
mydroid<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#wget
<a href="http://android.git.kernel.org/repo%3C/span%3E">http://android.git.kernel.org/repo&lt;/span&gt;</a></strong><br>
<strong><!-- raw HTML omitted -->#chmod 755
repo<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#./repo init -u
git://android.git.kernel.org/platform/manifest.git -b froyo<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#./repo
sync<!-- raw HTML omitted --></strong><br>
ここのSTEPは取得に時間がかかりますので気長に待ちましょう。</p>
<p>STEP2: IS01のソースをビルドするための準備1<br>
IS01のkernelソースに移動<br>
<strong><!-- raw HTML omitted -->#vim
./arch/arm/mach-msm/sh_sleepcheck.c<!-- raw HTML omitted --></strong><br>
最初の行にある#include &lt;smd_private.h&gt;を#include
&ldquo;smd_private.h&rdquo;<br>
に書き換える。diffはよーわからないのでそのうち勉強する。</p>
<p>STEP3: IS01のソースをビルドするための準備2<br>
<strong>IS01での操作です。</strong><br>
rootとった状態でTerminal Emulatorから<br>
<strong><!-- raw HTML omitted -->#busybox cp
/proc/config.gz /sdcard/config.gz<!-- raw HTML omitted --></strong>
←この操作はbusyboxとそのpathが必要です。<br>
config.gzをPCに持ってきて展開する。<br>
それをIS01の<strong>kernelフォルダに「.config」という名前で保存</strong>してください。<br>
「.config」はmakeするときに使用します。</p>
<p>STEP4: kernelのビルド<br>
<strong><!-- raw HTML omitted -->#make ARCH=arm
CROSS_COMPILE=../../mydroid/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin/arm-eabi-<!-- raw HTML omitted --></strong><br>
を実行すると、<br>
arch/arm/boot/にImageというファイルが出来上がります。これがkernelです。<br>
お疲れ様でした。</p>
<p>と記事書いてたら仙石さんが仕事早いｗ<br>
「<a href="http://www.gcd.org/blog/2010/12/682/">Android 端末 IS01 のカーネルを入れ替えてみた ? さよならデッカード
LSM</a>」<br>
とりあえず僕はnandプロテクト外したものを作っています。<br>
froyoベースになるにはもうちょいお勉強。。</p>
<p>STEP 番外編1: android.kernel.orgとcode auroraからのkernelソース取得<br>
・純粋なandroid向けkernelの取得<br>
<strong>mkdir android_kernel</strong> ←適宜名前変更してください<br>
<strong><!-- raw HTML omitted -->git clone <!-- raw HTML omitted -->git://android.git.kernel.org/kernel/msm.git
-b android-msm-2.6.35<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<!-- raw HTML omitted -->2.6.29の場合は「android-msm-2.6.29」です。なお各ブランチは<a href="http://android.git.kernel.org/?p=kernel/msm.git;a=heads">こちら</a>を参考にしてください。<!-- raw HTML omitted --></p>
<p>・IS01のベースとなったとされるcodeauroraのkernelの取得<br>
<strong><!-- raw HTML omitted -->mkdir
aurora<!-- raw HTML omitted --></strong><br>
<!-- raw HTML omitted --><strong>git clone
git://codeaurora.org/kernel/msm.git msm-kernel <strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --></strong>cd
msm-kernel <strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --></strong>git checkout
origin/android-msm-2.6.29b <strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --></strong>git checkout
dcdb890bc3e49ba5091230e73e976d9f6860fffe</strong><!-- raw HTML omitted --><br>
<a href="http://www22.atwiki.jp/is01next/pages/28.html">wiki</a>参考</p>
<p>どうでもいいこと：なんでSTEP2で書き換えたのかは…<br>
カーネルソースを修正せずにmakeしたらエラーが出た。これはひどい、、<br>
arch/arm/mach-msm/sh_sleepcheck.c:27:25: error: smd_private.h: No such
file or directory<br>
arch/arm/mach-msm/sh_sleepcheck.c: In function
&lsquo;sh_sleepcheck_name_m_show&rsquo;:<br>
arch/arm/mach-msm/sh_sleepcheck.c:625: error: implicit declaration of
function &lsquo;smem_get_entry&rsquo;<br>
arch/arm/mach-msm/sh_sleepcheck.c:625: error: &lsquo;SMEM_SLEEP_STATIC&rsquo;
undeclared (first use in this function)<br>
arch/arm/mach-msm/sh_sleepcheck.c:625: error: (Each undeclared
identifier is reported only once<br>
arch/arm/mach-msm/sh_sleepcheck.c:625: error: for each function it
appears in.)<br>
cc1: warnings being treated as errors<br>
arch/arm/mach-msm/sh_sleepcheck.c:625: warning: assignment makes
pointer from integer without a cast<br>
make[1]: *** [arch/arm/mach-msm/sh_sleepcheck.o] エラー 1<br>
make: *** [arch/arm/mach-msm] エラー 2<br>
てなかんじのエラーが。まさか素の状態でこんなもんでるとは思わなかったw<br>
で、まぁ上のSTEPで修正していたわけですね。</p>
<p>repoつかったりgit
clone使ったりしてるのは、途中でエラーが発生したりしなかったり謎なため。<br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>SH DevelopersSquareからIS01等のAndroid向けソースをDLするスクリプト作ったよ！</title>
			<link>https://github.pyyoshi.com/blog/2010/12/SH-DevelopersSquare%E3%81%8B%E3%82%89IS01%E7%AD%89%E3%81%AEAndroid%E5%90%91%E3%81%91%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92DL%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/</link>
			<pubDate>Fri, 03 Dec 2010 16:43:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/12/SH-DevelopersSquare%E3%81%8B%E3%82%89IS01%E7%AD%89%E3%81%AEAndroid%E5%90%91%E3%81%91%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92DL%E3%81%99%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%88/</guid>
			<description>SH DevelopersSquareがgitとかsvnとか用意してくれていないのでソースのDLがまんどくさいことこの上ないのでPythonでスクリプトを作成しました。このスクリプトを利用することにより、is01, sh-10b, jn-dk01のソースを取得・展開してくれます。使い方（Ubuntu環境）は以下の通りです。まず、easy_install等で必要なモジュールをインストールします。**#sudo apt-get install setup_tools**←インストールしていない場合**#sudo easy_install -U MultipartPostHandler****#sudo easy_install -U BeautifulSoup**スクリプトの実行例は以下の通りです。**#python ./sdasg.py is01**←is01のソースを取得・展開したい場合**#python ./sdasg.py sh-10b** ←sh-10bのソースを取得・展開したい場合**#python ./sdasg.py jn-dk01** ←jn-dk01のソースを取得・展開したい場合以下がスクリプトです。# -*- coding: utf-8 -*- #------------------------------------------------------------------------------- # Name: SH Dev Android Source Getter(特に名前決めてない) # Purpose: (https://sh-dev.sharp.co.jp/android/modules/oss/)がsvnやgitでの # ソース公開してなかったので自動でダウンロードしてきて展開するスク # リプト作った。 # 使用する際は、GPL(http://www.gnu.org/licenses/)と各々のソフトウェ # ア使用許諾契約書に同意すること。 # # Usage: 引数にis01, sh-10b, jn-dk01のどれかを与えてください。 # スクリプト直下にディレクトリを作られ保存されます。 # 例)is01のソースを取得・展開します。 # #python ./sdasg.py is01 # # Require MultipartPostHandler, BeautifulSoupをeasy_installなどでインストー # ルしてください。 # # Author: renax64.blogspot.com # # Created: 02/12/2010, ver.</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->SH
DevelopersSquareがgitとかsvnとか用意してくれていないのでソースのDLがまんどくさいことこの上ないのでPythonでスクリプトを作成しました。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->このスクリプトを利用することにより、is01,
sh-10b, jn-dk01のソースを取得・展開してくれます。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->使い方（Ubuntu環境）は以下の通りです。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->まず、easy_install等で必要なモジュールをインストールします。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->**#sudo apt-get install
setup_tools**<!-- raw HTML omitted --> ←インストールしていない場合<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->**#sudo
easy_install -U MultipartPostHandler**<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->**#sudo
easy_install -U BeautifulSoup**<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->スクリプトの実行例は以下の通りです。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->**#python ./sdasg.py
is01**<!-- raw HTML omitted --> ←is01のソースを取得・展開したい場合<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->**<!-- raw HTML omitted -->#python
./sdasg.py sh-10b<!-- raw HTML omitted -->** ←sh-10bのソースを取得・展開したい場合<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->**<!-- raw HTML omitted -->#python
./sdasg.py jn-dk01<!-- raw HTML omitted -->** ←jn-dk01のソースを取得・展開したい場合<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->以下がスクリプトです。<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<pre><code># -*- coding: utf-8 -*-
#-------------------------------------------------------------------------------
# Name:        SH Dev Android Source Getter(特に名前決めてない)
# Purpose:     (https://sh-dev.sharp.co.jp/android/modules/oss/)がsvnやgitでの
#              ソース公開してなかったので自動でダウンロードしてきて展開するスク
#              リプト作った。
#              使用する際は、GPL(http://www.gnu.org/licenses/)と各々のソフトウェ
#              ア使用許諾契約書に同意すること。
#
# Usage:       引数にis01, sh-10b, jn-dk01のどれかを与えてください。
#              スクリプト直下にディレクトリを作られ保存されます。
#              例)is01のソースを取得・展開します。
#                 #python ./sdasg.py is01
#
# Require      MultipartPostHandler, BeautifulSoupをeasy_installなどでインストー
#              ルしてください。
#
# Author:      renax64.blogspot.com
#
# Created:     02/12/2010, ver. 0.3
# Copyright:   (c) renax64.blogspot.com 2010
#-------------------------------------------------------------------------------
#!/usr/bin/env python

import os
import sys
from BeautifulSoup import BeautifulSoup
#import datetime
import urllib2
import MultipartPostHandler
import cookielib
import tarfile

#初期値: 対策されたときここを書き換える
init_vals ={
    &quot;main_url&quot;:&quot;https://sh-dev.sharp.co.jp/android/modules/oss/index.php?/&quot;,
    &quot;is01&quot;:&quot;is01&quot;,
    &quot;sh-10b&quot;:&quot;sh10b&quot;,
    &quot;jn-dk01&quot;:&quot;jndk01&quot;,
    &quot;dl_form_class&quot;:&quot;dl2_center&quot;,
    &quot;dl_tr_class&quot;:&quot;dl2_data&quot;,
    &quot;td_date_class&quot;:&quot;dl2_center&quot;,
    &quot;td_filename_style&quot;:&quot;padding-left:1em&quot;,
    &quot;form_post_class&quot;:&quot;dl2_center&quot;,
    &quot;input_name&quot;:&quot;ticket&quot;,
    &quot;accept&quot;:&quot;同意する ( ダウンロード )&quot;,
    &quot;User-Agent&quot;:&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.12 (KHTML, like Gecko) Chrome/9.0.587.0 Safari/534.12&quot;,
    &quot;Content-Type&quot;:&quot;multipart/form-data&quot;
    }

#ファイルの取得・展開
def getFile(link, filename, device):
    try:
        html = urllib2.urlopen(link)
        soup = BeautifulSoup(html)
        form = soup.find(&quot;form&quot;, {&quot;class&quot;:init_vals[&quot;form_post_class&quot;]})
        ticket = form.find(&quot;input&quot;, {&quot;name&quot;:init_vals[&quot;input_name&quot;]}).get(&quot;value&quot;)
        params = {&quot;ticket&quot;:ticket, &quot;accept&quot;:init_vals[&quot;accept&quot;]}
        cookies = cookielib.CookieJar()
        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies),MultipartPostHandler.MultipartPostHandler)
        opener.addheaders = [(&quot;User-agent&quot;,init_vals[&quot;User-Agent&quot;]),
                            (&quot;Content-Type&quot;,init_vals[&quot;Content-Type&quot;]),
                            (&quot;Referer&quot;,link)]
        f = opener.open(link, params)
        #device_sourceディレクトリ作成
        dir_name = device + &quot;_sources&quot;
        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        current_dir = os.getcwd()
        if os.path.isdir(dir_name) != True:
            os.mkdir(dir_name)
        #device_sourceディレクトリへ移動
        os.chdir(dir_name)
        #ファイル書き込み
        fw = open(filename,'wb')
        print u&quot;現在 %s をダウンロード中...&quot; % filename
        fw.write(f.read())
        fw.close()
        #ファイル展開
        ft = tarfile.open(filename,&quot;r&quot;)
        print u&quot;現在 %s を展開中...&quot; % filename
        ft.extractall(&quot;./&quot;)
        ft.close()
        #元のディレクトリへ移動
        os.chdir(current_dir)
    except urllib2.HTTPError, e:
        e.code, e.msg
        pass

def getInf(device):
    #オープンソースソフトウェアのファイル一覧ページの解析
    curl = init_vals[&quot;main_url&quot;] + init_vals[device]
    try:
        html = urllib2.urlopen(curl).read()
        soup = BeautifulSoup(html)
        tr_data = soup.findAll(&quot;tr&quot;, {&quot;class&quot;:init_vals[&quot;dl_tr_class&quot;]})
        trs = []
        for i in tr_data:
            link = init_vals[&quot;main_url&quot;] + i.a.get(&quot;href&quot;).replace(&quot;./index.php?/&quot;, &quot;&quot;)
            #dateは差分処理を実装しようとして取得したが、そこまでする必要もないと思い放置
            dates = i.findAll(&quot;td&quot;, {&quot;class&quot;:init_vals[&quot;td_date_class&quot;]})
            for ix in dates:
                date = ix.renderContents().split(&quot;/&quot;)
            files = i.findAll(&quot;td&quot;, {&quot;style&quot;:init_vals[&quot;td_filename_style&quot;]})
            for iy in files:
                filename = iy.a.renderContents()
            array = dict([[&quot;link&quot;, link], [&quot;date&quot;, date], [&quot;filename&quot;, filename]])
            trs.append(array)
            #ファイルの取得
            getFile(link, filename, device)
        return trs
    except urllib2.HTTPError, e:
        e.code, e.msg
        pass

def main():
    #引数の取得
    argvs = sys.argv
    argc = len(argvs)
    #実行
    #現在のディレクトリパスを取得
    c_dir = os.getcwd()
    if argc == 2:
        device = argvs[1]
        if device == &quot;is01&quot;:
            getInf(device)
        elif device == &quot;sh-10b&quot;:
            getInf(device)
        elif device == &quot;jn-dk01&quot;:
            getInf(device)
        else:
            print &quot;usage: #python ./sdasg.py (is01|sh-10b|jn-dk01)\n&quot;
    else:
        print &quot;usage: #python ./sdasg.py (is01|sh-10b|jn-dk01)\n&quot;
    print u&quot;すべてのファイルの取得・展開が終了しました。&quot;

if __name__ == '__main__':
    main()
</code></pre>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><a href="http://codepad.org/65q435ka">こちら</a>からもスクリプトをDLすることができます。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->更新履歴:<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->Ver. 0.3:
気づいた部分のスペルミス修正<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->Ver. 0.2:
UbuntuなどのLinuxで動作しないバグを修正<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->Ver. 0.1:
とりあえずリリース<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>beautifulsoupが3.0.1から3.2.0に変わったらHTMLParseErrorなくなってた！</title>
			<link>https://github.pyyoshi.com/blog/2010/12/beautifulsoup%E3%81%8C3.0.1%E3%81%8B%E3%82%893.2.0%E3%81%AB%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89HTMLParseError%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F/</link>
			<pubDate>Fri, 03 Dec 2010 01:13:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/12/beautifulsoup%E3%81%8C3.0.1%E3%81%8B%E3%82%893.2.0%E3%81%AB%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E3%82%89HTMLParseError%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F/</guid>
			<description>beautifulsoupが3.0.1から3.2.0に変わったらHTMLParseErrorなくなっていました。そういえばアップデートしてないなーとか思いながらeasy_installから実行したら、そうなっちまった。良いことなのか悪いのか、間違いなく例外とかfrom importとか書き換えないと行けない場所が出てしまった。しかし、パースエラーあった部分が問題なくパースされるようになったりどっこいどっこいなのかな。で、まぁアップデートによってfrom html5lib import HTMLParser from html5lib import treebuilders from BeautifulSoup import HTMLParseError try: soup = BeautifulSoup(html) except HTMLParseError, e: parser = HTMLParser(tree=treebuilders.getTreeBuilder(&amp;quot;beautifulsoup&amp;quot;)) soup = parser.parse(html)  とかやって別なパーサーでエラー部分を除去って貰う形をとっていたことが必要なくなったのかな？
ということで前回書いた記事「BeautifulSoupでHTMLParseErrorが起きた時の対処」もこんなことやれば良かったのかな？
まぁまとめるとアップデートしとけ(ﾟДﾟ)ｺﾞﾙｧ!! ですね・・・ｗ</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->beautifulsoupが3.0.1から3.2.0に変わったらHTMLParseErrorなくなっていました。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->そういえばアップデートしてないなーとか思いながらeasy_installから実行したら、そうなっちまった。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->良いことなのか悪いのか、<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->間違いなく例外とかfrom
importとか書き換えないと行けない場所が出てしまった。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->しかし、パースエラーあった部分が問題なくパースされるようになったりどっこいどっこいなのかな。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->で、まぁアップデートによって<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<pre><code>from html5lib import HTMLParser
from html5lib import treebuilders
from BeautifulSoup import HTMLParseError

try:
 soup = BeautifulSoup(html)
except HTMLParseError, e:
 parser = HTMLParser(tree=treebuilders.getTreeBuilder(&quot;beautifulsoup&quot;))
 soup = parser.parse(html)
</code></pre>
<p>とかやって別なパーサーでエラー部分を除去って貰う形をとっていたことが必要なくなったのかな？</p>
<p>ということで前回書いた記事「<a href="/2010/11/BeautifulSoup%E3%81%A7HTMLParseError%E3%81%8C%E8%B5%B7%E3%81%8D%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/">BeautifulSoupでHTMLParseErrorが起きた時の対処</a>」もこんなことやれば良かったのかな？</p>
<p>まぁまとめるとアップデートしとけ(ﾟДﾟ)ｺﾞﾙｧ!! ですね・・・ｗ</p>
]]></content>
		</item>
		
		<item>
			<title>UnicodeEncodeError: &#39;ascii&#39; codec...が出てしまった。</title>
			<link>https://github.pyyoshi.com/blog/2010/11/UnicodeEncodeError-ascii-codec...%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</link>
			<pubDate>Fri, 05 Nov 2010 22:29:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/11/UnicodeEncodeError-ascii-codec...%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%97%E3%81%BE%E3%81%A3%E3%81%9F/</guid>
			<description>UnicodeEncodeError: &amp;lsquo;ascii&amp;rsquo; codec can&#39;t encode characters in position 3-4: ordinal not in range(128)
Pyscripterの環境で弄くり回していたのだが、↑のようなエラーが吐かれました。
よく分からないことにPythonインタプリタに直接投げた場合はそのようなエラーは吐かれないんですよね。
で、
問題解決しました。
凡ミスというか、恥ずかしいミス。
Pathにマルチバイトコードが入っていたんですね。
ディレクトリ名やファイル名に日本語等の名前をつけちゃうと起こるみたいです。
で、
なんでなったのかというと。
普段からファイル名やディレクトリ名にはマルチバイト使わないようにしてるのですが、
ちょっとしたことからいつも保存している場所から別の場所に保存していて、それに気づかなかったという落ちでした。
気づくまでに時間掛かりましたよ。
ええ。
うん、こーいう問題は俺だけじゃなくて他の人もやってしまってる見たいですよ。
こちらにその指摘があります。(ソース)</description>
			<content type="html"><![CDATA[<p><strong>UnicodeEncodeError: &lsquo;ascii&rsquo; codec can't encode characters in position
3-4: ordinal not in range(128)</strong></p>
<p>Pyscripterの環境で弄くり回していたのだが、↑のようなエラーが吐かれました。</p>
<p>よく分からないことにPythonインタプリタに直接投げた場合はそのようなエラーは吐かれないんですよね。</p>
<p>で、</p>
<p>問題解決しました。</p>
<p>凡ミスというか、恥ずかしいミス。</p>
<p><!-- raw HTML omitted -->Pathにマルチバイトコードが入っていた<!-- raw HTML omitted -->んですね。</p>
<p>ディレクトリ名やファイル名に日本語等の名前をつけちゃうと起こるみたいです。</p>
<p>で、</p>
<p>なんでなったのかというと。</p>
<p>普段からファイル名やディレクトリ名にはマルチバイト使わないようにしてるのですが、</p>
<p>ちょっとしたことからいつも保存している場所から別の場所に保存していて、それに気づかなかったという落ちでした。</p>
<p>気づくまでに時間掛かりましたよ。</p>
<p>ええ。</p>
<p>うん、こーいう問題は俺だけじゃなくて他の人もやってしまってる見たいですよ。</p>
<p><strong>こちらにその指摘があります。(<a href="http://code.google.com/p/pyscripter/issues/detail?id=427">ソース</a>)</strong></p>
<p><!-- raw HTML omitted -->でもさ、Pyscripterさんもそのへん放置しないでさ。何とかしてくださいよ…<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>BeautifulSoupでHTMLParseErrorが起きた時の対処</title>
			<link>https://github.pyyoshi.com/blog/2010/11/BeautifulSoup%E3%81%A7HTMLParseError%E3%81%8C%E8%B5%B7%E3%81%8D%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</link>
			<pubDate>Thu, 04 Nov 2010 21:16:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/11/BeautifulSoup%E3%81%A7HTMLParseError%E3%81%8C%E8%B5%B7%E3%81%8D%E3%81%9F%E6%99%82%E3%81%AE%E5%AF%BE%E5%87%A6/</guid>
			<description>BeautifulSoupでスクレイピングしていたとき、「bad end tag: u&amp;rdquo;&amp;quot;」というHTMLParseErrorが起きてしまった。
これから研究でぶち当たっていきそうなのでとりあえずメモ。
結果から言うと単純に例外処理で該当部分を書き換えてしまえばいいのだ。
#!/usr/bin/env python # -*- coding: utf-8 -*- import urllib2 from BeautifulSoup import BeautifulSoup from HTMLParser import HTMLParseError def fix_html(html): #UTF8に強制変換 html = html.encode(&amp;quot;utf-8&amp;quot;) try: soup = BeautifulSoup(html) return soup except HTMLParseError,e: emsg = e.msg #無理矢理、問題の該当箇所を抽出し空文字列に置換 emsg_start = emsg.find(&#39;u&amp;quot;&#39;) rpl_str = eval(emsg[emsg_start:]).encode(&amp;quot;utf-8&amp;quot;) html = html.replace(rpl_str,u&amp;quot;&amp;quot;) #再帰的処理 return fix_html(html) except e: raise e def main(): try: set_url = &amp;quot;#適宜URLを&amp;quot; html = urllib2.urlopen(set_url).read() print fix_html(html) except urllib2.HTTPError, e: e.</description>
			<content type="html"><![CDATA[<p>BeautifulSoupでスクレイピングしていたとき、「bad end tag:
u&rdquo;&quot;」というHTMLParseErrorが起きてしまった。</p>
<p>これから研究でぶち当たっていきそうなのでとりあえずメモ。</p>
<p>結果から言うと単純に例外処理で該当部分を書き換えてしまえばいいのだ。</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import urllib2
from BeautifulSoup import BeautifulSoup
from HTMLParser import HTMLParseError

def fix_html(html):
    #UTF8に強制変換
    html = html.encode(&quot;utf-8&quot;)
    try:
        soup = BeautifulSoup(html)
        return soup
    except HTMLParseError,e:
        emsg = e.msg
        #無理矢理、問題の該当箇所を抽出し空文字列に置換
        emsg_start = emsg.find('u&quot;')
        rpl_str = eval(emsg[emsg_start:]).encode(&quot;utf-8&quot;)
        html = html.replace(rpl_str,u&quot;&quot;)
        #再帰的処理
        return fix_html(html)
    except e:
        raise e

def main():
    try:
     set_url = &quot;#適宜URLを&quot;
     html = urllib2.urlopen(set_url).read()
        print fix_html(html)
    except urllib2.HTTPError, e:
     e.code, e.msg
     print &quot;%s is not existed.&quot; % set_url

if __name__ == '__main__':
    main()
</code></pre>
<p>こんな感じだろうか。<br>
やってはいけないことをしています。それは問題箇所を無理矢理抽出して置換していることです。<br>
なにか良い方法あると思いますが、考えつかなかったのでこんなかんじにしちゃいました＾＾；</p>
]]></content>
		</item>
		
		<item>
			<title>arm-Ubuntuのビルド（qemu用</title>
			<link>https://github.pyyoshi.com/blog/2010/10/arm-Ubuntu%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89qemu%E7%94%A8/</link>
			<pubDate>Wed, 27 Oct 2010 21:18:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/arm-Ubuntu%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89qemu%E7%94%A8/</guid>
			<description>ちょっとarm触る必要あったのでUbuntuでいくかと。
ビルドはいつも通りUbuntuで行います。はい。
ちなみに10.10です。もしかしたら、それ以前ではうまくいかないかもしれません。
んでは。
あ、今回QEMU上で動かすVer.は9.04です＾＾；
QEMU用のimg作成
#sudo mkdir arm-ubuntu
#cd arm-ubuntu
#sudo wget http://people.ubuntu.com/~ogra/arm/build-arm-rootfs&amp;lt;/span&amp;gt;
#sudo wget http://ports.ubuntu.com/ubuntu-ports/dists/lucid/main/installer-armel/current/images/versatile/netboot/vmlinuz
#sudo chmod 744 build-arm-rootfs
#sudo ./build-arm-rootfs &amp;ndash;fqdn ubuntu &amp;ndash;login ubuntuuser &amp;ndash;password hogefuga &amp;ndash;notarball &amp;ndash;imagesize 1G
※fdqn、login、passwordは任意のものに変えること。imagesizeも任意に変えるといいと思います。
QEMU上でUbuntuを起動
#cp qemu-armel-&amp;lt;タイムスタンプ&amp;gt;.img qemu-armel.img
※cpで元残すのも良いし、mvで名前変えるのもよし。
#sudo qemu-system-arm -M versatilepb -cpu cortex-a8 -kernel vmlinuz -hda qemu-armel.img -m 256 -append &amp;ldquo;root=/dev/sda rootwait&amp;quot;
起動後にやること
**#LANG=C****#sudo vi /etc/network/interfaces****auto eth0**
**iface eth0 inet dhcp**
**#sudo ifconfig eth0 up**
**#sudo dhclient eth0**
**#sudo apt-get update**</description>
			<content type="html"><![CDATA[<p>ちょっとarm触る必要あったのでUbuntuでいくかと。</p>
<p>ビルドはいつも通りUbuntuで行います。はい。</p>
<p>ちなみに10.10です。もしかしたら、それ以前ではうまくいかないかもしれません。</p>
<p>んでは。</p>
<p>あ、今回QEMU上で動かすVer.は9.04です＾＾；</p>
<p>QEMU用のimg作成<br>
<strong><!-- raw HTML omitted -->#sudo mkdir
arm-ubuntu<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#cd
arm-ubuntu<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#sudo wget
<a href="http://people.ubuntu.com/~ogra/arm/build-arm-rootfs%3C/span%3E">http://people.ubuntu.com/~ogra/arm/build-arm-rootfs&lt;/span&gt;</a></strong><br>
<strong><!-- raw HTML omitted -->#sudo
wget http://ports.ubuntu.com/ubuntu-ports/dists/lucid/main/installer-armel/current/images/versatile/netboot/vmlinuz<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#sudo chmod 744
build-arm-rootfs<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted -->#sudo
./build-arm-rootfs &ndash;fqdn ubuntu &ndash;login ubuntuuser &ndash;password hogefuga
&ndash;notarball &ndash;imagesize 1G<!-- raw HTML omitted --></strong><br>
※fdqn、login、passwordは任意のものに変えること。imagesizeも任意に変えるといいと思います。</p>
<p>QEMU上でUbuntuを起動<br>
<strong><!-- raw HTML omitted -->#cp
qemu-armel-&lt;タイムスタンプ&gt;.img qemu-armel.img<!-- raw HTML omitted --></strong><br>
※cpで元残すのも良いし、mvで名前変えるのもよし。<br>
<strong><!-- raw HTML omitted -->#sudo
qemu-system-arm -M versatilepb -cpu cortex-a8 -kernel vmlinuz -hda
qemu-armel.img -m 256 -append &ldquo;root=/dev/sda rootwait&quot;<!-- raw HTML omitted --></strong></p>
<p>起動後にやること<br>
<!-- raw HTML omitted -->**#LANG=C**<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->**#sudo vi
/etc/network/interfaces**<!-- raw HTML omitted --><br>
**<!-- raw HTML omitted -->auto
eth0<!-- raw HTML omitted -->**<br>
**<!-- raw HTML omitted -->iface eth0 inet
dhcp<!-- raw HTML omitted -->**<br>
**<!-- raw HTML omitted -->#sudo ifconfig
eth0 up<!-- raw HTML omitted -->**<br>
**<!-- raw HTML omitted -->#sudo dhclient
eth0<!-- raw HTML omitted -->**<br>
**<!-- raw HTML omitted -->#sudo apt-get
update<!-- raw HTML omitted -->**</p>
<p>これで一通り使える状態になりました。</p>
<p>お疲れ様でした。</p>
<p>番外編というか、ぶち当たった壁。</p>
<p>本当は最新のUbuntuをビルドして使いたかったのですが、うまく行かなかったわけです。<br>
というのも、この<a href="https://wiki.ubuntu.com/ARM/BuildArmPackages">ページ</a>にある「If
development machine is running Lucid or
Karmic」を一通りやってみたのですが、2nd
stageでエラーでてうまーくいかないんですよね。</p>
<p>2時間近くうにゃうにゃ悩んだあげく上の手段を執ったわけです。</p>
<p>なんとかならないのかなーｗ</p>
]]></content>
		</item>
		
		<item>
			<title>document.getElementsByClassNameがChromeで実装されていた。</title>
			<link>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</link>
			<pubDate>Sun, 24 Oct 2010 11:29:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/document.getElementsByClassName%E3%81%8CChrome%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%9F/</guid>
			<description>いつに実装されたかは知らないがなんか使えた。(ソース)</description>
			<content type="html"><![CDATA[<p>いつに実装されたかは知らないがなんか使えた。(<a href="http://code.google.com/p/doctype/wiki/DocumentGetElementsByClassNameMethod#Browser_compatibility">ソース</a>)</p>
]]></content>
		</item>
		
		<item>
			<title>AndroidでSkypeAppが復活したのでさっそく</title>
			<link>https://github.pyyoshi.com/blog/2010/10/Android%E3%81%A7SkypeApp%E3%81%8C%E5%BE%A9%E6%B4%BB%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F/</link>
			<pubDate>Tue, 05 Oct 2010 19:33:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/Android%E3%81%A7SkypeApp%E3%81%8C%E5%BE%A9%E6%B4%BB%E3%81%97%E3%81%9F%E3%81%AE%E3%81%A7%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F/</guid>
			<description>やっと来ました！！
今年初めに一部のキャリアでしかSkypeを使用することが出来ないようになってしまいましたが、いよいよ復活です！
ただし、日本のプロバイダー(ストア固有ID)情報だとマーケットで表示することが出来ませんのでちょっとしたてこ入れをしてあげないといけません。
ということで、手順です。（root権限が必要です。）
用意するものはMarketEnablerです。こちらからDLしてインスコしてしまいましょう。
あとは、MarketEnablerを起動して「Setting List -&amp;gt; T-Mobile」のところで長押しすればプロバイダー情報を偽装することが出来ます。（プロバイダー情報のバックアップは行っておいてください。）
そしたら、こちらのQRコードからアクセスを行いSkypeのインストールを行っちゃいましょう！！

以上で終了です！お疲れ様でした！！
あ、DoCoMo回線だと使えないからね。</description>
			<content type="html"><![CDATA[<p>やっと来ました！！</p>
<p>今年初めに一部のキャリアでしかSkypeを使用することが出来ないようになってしまいましたが、いよいよ復活です！</p>
<p>ただし、日本のプロバイダー(ストア固有ID)情報だとマーケットで表示することが出来ませんのでちょっとしたてこ入れをしてあげないといけません。</p>
<p>ということで、手順です。（<!-- raw HTML omitted -->root権限が必要です。<!-- raw HTML omitted -->）</p>
<p>用意するものはMarketEnablerです。<a href="http://code.google.com/p/market-enabler/downloads/detail?name=MarketEnabler_v3.0.8.apk&amp;can=1&amp;q=">こちら</a>からDLしてインスコしてしまいましょう。</p>
<p>あとは、MarketEnablerを起動して「Setting List
-&gt; T-Mobile」のところで長押しすればプロバイダー情報を偽装することが出来ます。（<!-- raw HTML omitted -->プロバイダー情報のバックアップは行っておいてください。<!-- raw HTML omitted -->）</p>
<p>そしたら、こちらのQRコードからアクセスを行いSkypeのインストールを行っちゃいましょう！！<br>
<a href="/images/2010-10-05-androiddeskypeappgafu-huo-shitanodesatsusoku-83a53d5b45bb9d6a54f19a7ca3a9206b.jpg"><img src="/images/2010-10-05-androiddeskypeappgafu-huo-shitanodesatsusoku-83a53d5b45bb9d6a54f19a7ca3a9206b.jpg" alt=""></a></p>
<p>以上で終了です！お疲れ様でした！！</p>
<p>あ、DoCoMo回線だと使えないからね。</p>
]]></content>
		</item>
		
		<item>
			<title>Acer Liquid EにLeaked Froyoを入れてみたよ</title>
			<link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%ABLeaked-Froyo%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</link>
			<pubDate>Sat, 02 Oct 2010 19:08:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%ABLeaked-Froyo%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</guid>
			<description>用意するもの：
Leaked Froyo
Acer Download Tool for A1
installMalezRecovery_0.6_FULL
Part1:
Acer Download Tool for A1はWin7では正常動作しないので互換モードで行ってください。

まずAcer Download Tool for A1を起動し、先ほどDLしてきたROMをBrowseから選択してください。
次にStartを押してROM焼きを行います。
ここで注意ですがAppにも書いてあるとおり抜いて良いよと言われるまでは絶対に抜かないでください。
ここで抜いてしまうと文鎮化してしまい使い物にならない端末に変貌するかもしれません。
以上でROM焼きは終了です。
Part2:
カスタムリカバリーの導入です。
こちらのやり方自体は、以前の記事で解説済みですので割愛させていただきまする。
Acer Liquid Eにカスタムリカバリーを入れてみたよ
Part3:
リカバリーモードに入ってFull Wipe, System Root Menuからrooted化する
以上で終了です。
Liquidを購入し、rooted, ROM焼きを通して思ったことは、とても簡単に導入できてしまい楽ちんになったなぁということです。
いや、HT-03Aも楽だったけど。
たぶんですが、Liquidの情報は日本にあまりなく覚悟して望んだのに拍子抜けしてしまったんでしょう＾＾；</description>
			<content type="html"><![CDATA[<p>用意するもの：<br>
<a href="http://android.modaco.com/content/acer-liquid-liquid-modaco-com/317448/leak-liquid-froyo-rom/">Leaked
Froyo</a><br>
<a href="http://android.modaco.com/content/acer-liquid-liquid-modaco-com/299500/acer-download-tool-for-a1/">Acer Download Tool for
A1</a><br>
<a href="http://code.google.com/p/acer-liquid-malez-recovery/downloads/detail?name=installMalezRecovery_0.6_FULL.exe&amp;can=2&amp;q=">installMalezRecovery_0.6_FULL</a></p>
<p><strong>Part1:</strong><br>
Acer Download Tool for
A1はWin7では正常動作しないので互換モードで行ってください。</p>
<p><a href="/images/2010-10-02-acer-liquid-enileaked-froyoworu-retemitayo-%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%8901.png"><img src="/images/2010-10-02-acer-liquid-enileaked-froyoworu-retemitayo-%E3%82%AF%E3%83%AA%E3%83%83%E3%83%97%E3%83%9C%E3%83%BC%E3%83%8901.png" alt=""></a></p>
<p>まずAcer Download Tool for
A1を起動し、先ほどDLしてきたROMをBrowseから選択してください。</p>
<p>次にStartを押してROM焼きを行います。</p>
<p>ここで注意ですがAppにも書いてあるとおり抜いて良いよと言われるまでは絶対に抜かないでください。</p>
<p>ここで抜いてしまうと文鎮化してしまい使い物にならない端末に変貌するかもしれません。</p>
<p>以上でROM焼きは終了です。</p>
<p><strong>Part2:</strong><br>
カスタムリカバリーの導入です。</p>
<p>こちらのやり方自体は、以前の記事で解説済みですので割愛させていただきまする。</p>
<p><a href="/2010/10/Acer-Liquid-E%E3%81%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/">Acer Liquid Eにカスタムリカバリーを入れてみたよ</a></p>
<p><strong>Part3</strong>:<br>
リカバリーモードに入ってFull Wipe, System Root Menuからrooted化する</p>
<p>以上で終了です。</p>
<p>Liquidを購入し、rooted,
ROM焼きを通して思ったことは、とても簡単に導入できてしまい楽ちんになったなぁということです。</p>
<p>いや、HT-03Aも楽だったけど。</p>
<p>たぶんですが、Liquidの情報は日本にあまりなく覚悟して望んだのに拍子抜けしてしまったんでしょう＾＾；</p>
]]></content>
		</item>
		
		<item>
			<title>Acer Liquid Eをrooted化しちゃおう！</title>
			<link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92rooted%E5%8C%96%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86/</link>
			<pubDate>Sat, 02 Oct 2010 09:58:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92rooted%E5%8C%96%E3%81%97%E3%81%A1%E3%82%83%E3%81%8A%E3%81%86/</guid>
			<description>リカバリーモードに入り（Vol- カメラキー　電源 で三回振動するのを待つ）
System Root menuから好きなモードを選んでrooted化終了です。
とても簡単にできますね。
出来ないって言うかたは、こちらのapkをインスコしてrooted化しちゃってください。（@Syu_uさん情報ありがとうございます。）
※責任は負えませんのでROMのバックアップは忘れずにこれでHT-03AでバックアップしたAppsをリストアすることが出来る。
バックアップ＆リストアに便利な『Titanium Backup』というものがあります。
ぜひ使ってみましょう。
使い方はとてもわかりやすく解説しているコムギさんのページをリンクしておきますね。
追記:
どうやらTitanium Backupではうまく復元することは出来ないみたい。
追記2:
apk版rootedのリンク張り忘れていたので修正。</description>
			<content type="html"><![CDATA[<p>リカバリーモードに入り（Vol- カメラキー　電源 で三回振動するのを待つ）</p>
<p>System Root menuから好きなモードを選んでrooted化終了です。</p>
<p>とても簡単にできますね。</p>
<p>出来ないって言うかたは、<a href="http://android.modaco.com/content/acer-liquid-liquid-modaco-com/315300/a-new-and-simple-root-method-universalandroot/">こちら</a>のapkをインスコしてrooted化しちゃってください。（@Syu_uさん情報ありがとうございます。）</p>
<p><!-- raw HTML omitted -->※責任は負えませんのでROMのバックアップは忘れずに<!-- raw HTML omitted --></p>
<p>これでHT-03AでバックアップしたAppsをリストアすることが出来る。</p>
<p>バックアップ＆リストアに便利な『Titanium
Backup』というものがあります。</p>
<p>ぜひ使ってみましょう。</p>
<p>使い方はとてもわかりやすく解説しているコムギさんのページを<a href="http://komugi.net/archives/2010/07/13191354.php">リンク</a>しておきますね。</p>
<p>追記:<br>
どうやらTitanium Backupではうまく復元することは出来ないみたい。</p>
<p>追記2:<br>
apk版rootedのリンク張り忘れていたので修正。</p>
]]></content>
		</item>
		
		<item>
			<title>Acer Liquid Eにカスタムリカバリーを入れてみたよ</title>
			<link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</link>
			<pubDate>Fri, 01 Oct 2010 19:41:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%81%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%AA%E3%82%AB%E3%83%90%E3%83%AA%E3%83%BC%E3%82%92%E5%85%A5%E3%82%8C%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%88/</guid>
			<description>すっごく簡単にカスタムリカバリーが導入できました。
こちらからファイルをDLして解凍しましょう。
解凍先を開き、install_malez_recovery.cmdを開きいくつかスペース叩けば終了します。（英語だけど説明はちゃんと読んでね）
これで、カスタムリカバリーの導入は終了です。導入終了と同時に再起動されると思うので、その後すぐにUSBを抜いちゃいましょう。（当方、USBつないだままだと起動しなかったので。）
カスタムリカバリへの入り方は、&amp;ldquo;adb reboot recovery&amp;quot;です。
なにやらこのカスタムリカバリーにはrooted化する機能がある（見えるｗ）のですが、ちょっと不安なのでまだ触ってません。
異常で終了です。
次回投稿あたりでLiquid Eのrootedでも。</description>
			<content type="html"><![CDATA[<p>すっごく簡単にカスタムリカバリーが導入できました。</p>
<p><a href="http://code.google.com/p/acer-liquid-malez-recovery/downloads/detail?name=installMalezRecovery_0.6_FULL.exe&amp;can=1&amp;q=">こちら</a>からファイルをDLして解凍しましょう。</p>
<p>解凍先を開き、install_malez_recovery.cmdを開きいくつかスペース叩けば終了します。（英語だけど説明はちゃんと読んでね）</p>
<p>これで、カスタムリカバリーの導入は終了です。導入終了と同時に再起動されると思うので、その後すぐにUSBを抜いちゃいましょう。（当方、USBつないだままだと起動しなかったので。）</p>
<p>カスタムリカバリへの入り方は、&ldquo;adb reboot recovery&quot;です。</p>
<p>なにやらこのカスタムリカバリーにはrooted化する機能がある（見えるｗ）のですが、ちょっと不安なのでまだ触ってません。</p>
<p>異常で終了です。</p>
<p>次回投稿あたりでLiquid Eのrootedでも。</p>
]]></content>
		</item>
		
		<item>
			<title>Acer Liquid Eを購入したよ！</title>
			<link>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%88/</link>
			<pubDate>Fri, 01 Oct 2010 19:17:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/10/Acer-Liquid-E%E3%82%92%E8%B3%BC%E5%85%A5%E3%81%97%E3%81%9F%E3%82%88/</guid>
			<description>GDD2010であまりにも刺激されてしまい、Acer Liquid EをIYH!してしまいました。
HT-03A持っているのですが、なにぶんこれからのAndroid開発はARMv7以降じゃないときついのかな？
って感じですね。ジンジャーブレッド（噂されてるやつ）や、AdobeさんがつくってるAppの仕様要件を見ていると。
それと、AcerLiquidは発表当初からとても気になっていた端末で念願？の入手というわけです。
これからLiquidたんをｐｒｐｒしてきまふ(;ﾟ∀ﾟ)=3ﾊｧﾊｧ</description>
			<content type="html"><![CDATA[<p>GDD2010であまりにも刺激されてしまい、Acer Liquid
EをIYH!してしまいました。</p>
<p>HT-03A持っているのですが、なにぶんこれからのAndroid開発はARMv7以降じゃないときついのかな？</p>
<p>って感じですね。ジンジャーブレッド（噂されてるやつ）や、AdobeさんがつくってるAppの仕様要件を見ていると。</p>
<p>それと、AcerLiquidは発表当初からとても気になっていた端末で念願？の入手というわけです。</p>
<p>これからLiquidたんをｐｒｐｒしてきまふ(;ﾟ∀ﾟ)=3ﾊｧﾊｧ</p>
<p><a href="/images/2010-10-01-acer-liquid-ewogou-ru-shitayo-170608916-c73866b11f7fedff6e936c73f13160a9.4ca5b120-full.jpg"><img src="/images/2010-10-01-acer-liquid-ewogou-ru-shitayo-170608916-c73866b11f7fedff6e936c73f13160a9.4ca5b120-full.jpg" alt=""></a></p>
]]></content>
		</item>
		
		<item>
			<title>本日、GDD2010に参加してきます！！</title>
			<link>https://github.pyyoshi.com/blog/2010/09/%E6%9C%AC%E6%97%A5GDD2010%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%99/</link>
			<pubDate>Tue, 28 Sep 2010 05:38:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/09/%E6%9C%AC%E6%97%A5GDD2010%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%99/</guid>
			<description>去年からずっと楽しみにしていたイベントの一つGDDに参加できる資格を貰えたので参加してきます！
HTML5やChromeエクステンション、Androidなどのたくさんのディベロッパさんのセッション聞いて刺激をいっぱい貰って
次に活かせるように楽しんできたいと思います！！！！！
GDDが終わったあとなにやらスーパーハッカー枠で参加資格を貰った方々だけによる交友会なるものがあるみたいです。
それにも参加する予定ですが、正直怖いです。
怖い…
GDD2010:
http://www.google.co.jp/events/developerday/2010/tokyo/
DevLink:
http://gddjp-devlink.appspot.com/v.html?action=view&amp;amp;edit=true&amp;amp;id=RenaX</description>
			<content type="html"><![CDATA[<p>去年からずっと楽しみにしていたイベントの一つGDDに参加できる資格を貰えたので参加してきます！</p>
<p>HTML5やChromeエクステンション、Androidなどのたくさんのディベロッパさんのセッション聞いて刺激をいっぱい貰って</p>
<p>次に活かせるように楽しんできたいと思います！！！！！</p>
<p>GDDが終わったあとなにやらスーパーハッカー枠で参加資格を貰った方々だけによる交友会なるものがあるみたいです。</p>
<p>それにも参加する予定ですが、正直怖いです。</p>
<p>怖い…</p>
<p>GDD2010:<br>
<a href="http://www.google.co.jp/events/developerday/2010/tokyo/">http://www.google.co.jp/events/developerday/2010/tokyo/</a></p>
<p>DevLink:<br>
<a href="http://gddjp-devlink.appspot.com/v.html?action=view&amp;edit=true&amp;id=RenaX">http://gddjp-devlink.appspot.com/v.html?action=view&amp;edit=true&amp;id=RenaX</a></p>
]]></content>
		</item>
		
		<item>
			<title>9月は1日1Appをやってみようかと思う。</title>
			<link>https://github.pyyoshi.com/blog/2010/09/9%E6%9C%88%E3%81%AF1%E6%97%A51App%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%86/</link>
			<pubDate>Wed, 01 Sep 2010 00:32:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/09/9%E6%9C%88%E3%81%AF1%E6%97%A51App%E3%82%92%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%86/</guid>
			<description>タイトル通り頑張る。
頑張るって言うと途中であきらめちゃうん？って感じだけど
やれるだけやってみる。糞みたいなAppが30個生成されると思うけど。
プラットフォームはまだ決めてないけど、たぶんWebAppとAndroidAppその辺だろうね。あとはChromeExtension。
やれるだけやってみよう</description>
			<content type="html"><![CDATA[<p>タイトル通り頑張る。<br>
頑張るって言うと途中であきらめちゃうん？って感じだけど<br>
やれるだけやってみる。糞みたいなAppが30個生成されると思うけど。<br>
プラットフォームはまだ決めてないけど、たぶんWebAppとAndroidAppその辺だろうね。あとはChromeExtension。<br>
やれるだけやってみよう</p>
]]></content>
		</item>
		
		<item>
			<title>Chromeのバージョンを戻す方法</title>
			<link>https://github.pyyoshi.com/blog/2010/07/Chrome%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%88%BB%E3%81%99%E6%96%B9%E6%B3%95/</link>
			<pubDate>Sat, 17 Jul 2010 11:41:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/07/Chrome%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%88%BB%E3%81%99%E6%96%B9%E6%B3%95/</guid>
			<description>**※****元々Chromeがインストールされたディレクトリに以前のバージョンが残っていることが原則**regeditでHKEY_CURRENT_USER\Software\Google\Updateを開き、現在のバージョン値で検索。
「pv」がヒットすると思うので、その値を戻したいバージョン値で書き換える。バージョン値はディレクトリ名をコピって良いと思う。
dev使ってる時点でアレですから、regeditの使い方はしらね。
自己責任でよろしく。</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->**※**<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->**元々Chromeがインストールされたディレクトリに以前のバージョンが残っていることが原則**<!-- raw HTML omitted --><br>
regeditでHKEY_CURRENT_USER\Software\Google\Updateを開き、現在のバージョン値で検索。</p>
<p>「pv」がヒットすると思うので、その値を戻したいバージョン値で書き換える。バージョン値はディレクトリ名をコピって良いと思う。</p>
<p>dev使ってる時点でアレですから、regeditの使い方はしらね。</p>
<p>自己責任でよろしく。</p>
]]></content>
		</item>
		
		<item>
			<title>PortablePython2.6.xにeasy_installを入れる。</title>
			<link>https://github.pyyoshi.com/blog/2010/06/PortablePython2.6.x%E3%81%ABeasy_install%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</link>
			<pubDate>Mon, 21 Jun 2010 11:06:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/06/PortablePython2.6.x%E3%81%ABeasy_install%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B/</guid>
			<description>PortablePythonで、easy_installを使おうと思ったんだが、そもそもそのような実行ファイルが見つからなかったので調べてみた。
やり方:
 PortablePythonフォルダのAppにある、setuptools, easy_install.py, pkg_resources.py, site.pyを削除  ez_setup.pyをDLし、Appフォルダに投下する。 コンソールより、python ez_setup.pyを実行する。  あとは、
 Scripts/easy_installがあるのでそいつを使えばおｋ  ※PortablePythonはUSBフラッシュ環境など、インストールできない環境でもPythonを使うことができる魔法のソフト(←　ここでDLできます。
参照:
http://groups.google.com/group/portablepython/browse_thread/thread/5cc217f34b895541?pli=1</description>
			<content type="html"><![CDATA[<p>PortablePythonで、easy_installを使おうと思ったんだが、そもそもそのような実行ファイルが見つからなかったので調べてみた。</p>
<p>やり方:</p>
<ol>
<li>PortablePythonフォルダのAppにある、setuptools, easy_install.py,
pkg_resources.py, site.pyを削除 </li>
<li><a href="http://peak.telecommunity.com/dist/ez_setup.py">ez_setup.py</a>をDLし、Appフォルダに投下する。</li>
<li>コンソールより、python ez_setup.pyを実行する。</li>
</ol>
<p>あとは、</p>
<ul>
<li>Scripts/easy_installがあるのでそいつを使えばおｋ</li>
</ul>
<p>※PortablePythonはUSBフラッシュ環境など、インストールできない環境でもPythonを使うことができる魔法のソフト(←　　<br>
<a href="http://www.portablepython.com/">ここ</a>でDLできます。</p>
<p>参照:<br>
<a href="http://groups.google.com/group/portablepython/browse_thread/thread/5cc217f34b895541?pli=1">http://groups.google.com/group/portablepython/browse_thread/thread/5cc217f34b895541?pli=1</a></p>
]]></content>
		</item>
		
		<item>
			<title>PSP Type B Driver 64bitをオレオレ署名する</title>
			<link>https://github.pyyoshi.com/blog/2010/06/PSP-Type-B-Driver-64bit%E3%82%92%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E7%BD%B2%E5%90%8D%E3%81%99%E3%82%8B/</link>
			<pubDate>Thu, 17 Jun 2010 22:53:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/06/PSP-Type-B-Driver-64bit%E3%82%92%E3%82%AA%E3%83%AC%E3%82%AA%E3%83%AC%E7%BD%B2%E5%90%8D%E3%81%99%E3%82%8B/</guid>
			<description>準備:
Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1 (ISO)をDLしインスコ。
ちなみに、CPU毎に違うので以下でチェック。
 X86 version: GRMSDK_EN_DVD.iso AMD64 version: GRMSDKX_EN_DVD.iso Itanium version: GRMSDKIAI_EN_DVD.iso   .NET Frameworkツールのリファレンスはここ。
PSP Type B DriverをDL、driver_x64準備。
以下手順:
各ツールは&amp;quot;Microsoft SDKs\Windows\v7.0\Bin&amp;rdquo;
 makecert -sv &amp;ldquo;libusb0_x64.pvk&amp;rdquo; -a sha1 -eku 1.3.6.1.5.5.7.3.3 -r -ss Root -len 1024 -sr localMachine -n CN=&amp;quot;libusb0_x64.sys&amp;rdquo; &amp;ldquo;libusb0_x64.cer&amp;rdquo; ダイアログが出るのでパスワードを決める。（参考画像） もう1つダイアログでるので、先ほど決めたパスワードを入力（参考画像） cert2spc &amp;ldquo;libusb0_x64.cer&amp;rdquo; &amp;ldquo;libusb0_x64.spc&amp;rdquo; pvk2pfx -pvk &amp;ldquo;libusb0_x64.pvk&amp;rdquo; -pi &amp;ldquo;パスワード&amp;rdquo; -spc &amp;ldquo;libusb0_x64.spc&amp;rdquo; -pfx &amp;ldquo;libusb0_x64.pfx&amp;rdquo; -po &amp;ldquo;パスワード&amp;rdquo; パスワードは先ほど決めたものを使用。 signtool sign /f &amp;ldquo;libusb0_x64.</description>
			<content type="html"><![CDATA[<p>準備:<br>
Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1
(ISO)を<a href="http://www.microsoft.com/downloads/details.aspx?familyid=71DEB800-C591-4F97-A900-BEA146E4FAE1&amp;displaylang=en">DL</a>しインスコ。<br>
ちなみに、CPU毎に違うので以下でチェック。</p>
<ul>
<li>X86 version: GRMSDK_EN_DVD.iso</li>
<li>AMD64 version: GRMSDKX_EN_DVD.iso</li>
<li>Itanium version: GRMSDKIAI_EN_DVD.iso </li>
</ul>
<p>.NET
Frameworkツールのリファレンスは<a href="http://msdn.microsoft.com/ja-jp/library/d9kh6s92(v=VS.80).aspx">ここ</a>。</p>
<p>PSP Type B
Driverを<a href="http://dl.qj.net/psp/homebrew-applications/remotejoy-sdl-2007.html">DL</a>、driver_x64準備。</p>
<p>以下手順:<br>
    各ツールは&quot;Microsoft SDKs\Windows\v7.0\Bin&rdquo;</p>
<ol>
<li>makecert -sv &ldquo;libusb0_x64.pvk&rdquo; -a sha1 -eku 1.3.6.1.5.5.7.3.3 -r
-ss Root -len 1024 -sr localMachine -n CN=&quot;libusb0_x64.sys&rdquo;
&ldquo;libusb0_x64.cer&rdquo;</li>
<li>ダイアログが出るのでパスワードを決める。（<a href="/images/2010-06-17-passssssss.jpg">参考画像</a>）</li>
<li>もう1つダイアログでるので、先ほど決めたパスワードを入力（<a href="/images/2010-06-17-paaaaaaaaaaaaaaaaaaaa.jpg">参考画像</a>）</li>
<li>cert2spc &ldquo;libusb0_x64.cer&rdquo; &ldquo;libusb0_x64.spc&rdquo;</li>
<li>pvk2pfx -pvk &ldquo;libusb0_x64.pvk&rdquo; -pi &ldquo;パスワード&rdquo; -spc
&ldquo;libusb0_x64.spc&rdquo; -pfx &ldquo;libusb0_x64.pfx&rdquo; -po &ldquo;パスワード&rdquo;
パスワードは先ほど決めたものを使用。</li>
<li>signtool sign /f  &ldquo;libusb0_x64.pfx&rdquo; /p &ldquo;パスワード&rdquo; /d
&ldquo;libusb0_x64.sys&rdquo; /v &ldquo;libusb0_x64.sys&rdquo; 上に同じ</li>
</ol>
<p>以上でドライバの署名ファイルの作成が終わった。あとは、署名をインストールしてドライバを読み込ませればおｋ</p>
<p>libusb0_x64.pfx -&gt; パス入力 -&gt; 信頼されたルート.レジストリ</p>
<p>※「<!-- raw HTML omitted -->bcdedit.exe /set
TESTSIGNING ON<!-- raw HTML omitted -->」必須</p>
<p>参考:</p>
<p><a href="http://www.katch.ne.jp/~kakonacl/douga/pt1/rikblog.html">64bit版Windows
7用のPT1_Driverに改造する方法</a></p>
<p>応用すればとりあえずなんだってオレオレ署名することができる。</p>
]]></content>
		</item>
		
		<item>
			<title>Bloggerのポスト日付取得うんたら</title>
			<link>https://github.pyyoshi.com/blog/2010/06/Blogger%E3%81%AE%E3%83%9D%E3%82%B9%E3%83%88%E6%97%A5%E4%BB%98%E5%8F%96%E5%BE%97%E3%81%86%E3%82%93%E3%81%9F%E3%82%89/</link>
			<pubDate>Sat, 05 Jun 2010 15:53:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/06/Blogger%E3%81%AE%E3%83%9D%E3%82%B9%E3%83%88%E6%97%A5%E4%BB%98%E5%8F%96%E5%BE%97%E3%81%86%E3%82%93%E3%81%9F%E3%82%89/</guid>
			<description>なんか、仕様変更？があったみたいでtimestampでの取得は時刻のみっぽい。
いや、わからないんだけど。別ブログでテンプレートDLしたやつ使ってたら未定義値が返ってきたので。
まぁ備忘録ということで。
投稿のデザイン編集で、日付の雛形は20001231みたいなかたちのやつで。
他のやつの対応はだるいのでしないｗ
以下ソース
&amp;lt;div class=&#39;post&#39; id=&#39;post&#39;&amp;gt; &amp;lt;div class=&#39;date&#39;&amp;gt; &amp;lt;small&amp;gt; &amp;lt;script type=&#39;text/javascript&#39;&amp;gt; var date = &amp;lt;data:post.dateHeader/&amp;gt; var date2 = date.toString(); var year = date2.substring(0,4); var month = date2.substring(4,6); var day = date2.substring(6,8); &amp;lt;/script&amp;gt; &amp;lt;div class=&#39;date_y&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(year);&amp;lt;/script&amp;gt;年&amp;lt;/div&amp;gt; &amp;lt;div class=&#39;date_m&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(month);&amp;lt;/script&amp;gt;月&amp;lt;/div&amp;gt; &amp;lt;div class=&#39;date_d&#39;&amp;gt;&amp;lt;script type=&#39;text/javascript&#39;&amp;gt;document.write(day);&amp;lt;/script&amp;gt;日&amp;lt;/div&amp;gt; &amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;  </description>
			<content type="html"><![CDATA[<p>なんか、仕様変更？があったみたいでtimestampでの取得は時刻のみっぽい。<br>
いや、わからないんだけど。別ブログでテンプレートDLしたやつ使ってたら未定義値が返ってきたので。<br>
まぁ備忘録ということで。<br>
投稿のデザイン編集で、日付の雛形は20001231みたいなかたちのやつで。<br>
他のやつの対応はだるいのでしないｗ<br>
以下ソース</p>
<pre><code>&lt;div class='post' id='post'&gt;
&lt;div class='date'&gt;
&lt;small&gt; 
&lt;script type='text/javascript'&gt; 
var date = &lt;data:post.dateHeader/&gt;
var date2 = date.toString();
var year = date2.substring(0,4);
var month = date2.substring(4,6);
var day = date2.substring(6,8);
&lt;/script&gt;
&lt;div class='date_y'&gt;&lt;script type='text/javascript'&gt;document.write(year);&lt;/script&gt;年&lt;/div&gt;
&lt;div class='date_m'&gt;&lt;script type='text/javascript'&gt;document.write(month);&lt;/script&gt;月&lt;/div&gt;   
&lt;div class='date_d'&gt;&lt;script type='text/javascript'&gt;document.write(day);&lt;/script&gt;日&lt;/div&gt;
&lt;/small&gt;
&lt;/div&gt;
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>gdippを各々のアプリケーションに適用させる方法</title>
			<link>https://github.pyyoshi.com/blog/2010/05/gdipp%E3%82%92%E5%90%84%E3%80%85%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Wed, 19 May 2010 18:21:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/05/gdipp%E3%82%92%E5%90%84%E3%80%85%E3%81%AE%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>Twitter上で相性悪いアプリがあるなー云々とかいってたので、全体適用ではなく各々のアプリに適用させる方法を紹介したいと思います。(やり方自体はgdi++の時と一緒ｗ)
ダウンロード:
gdippのダウンロードはこちら。32bit, 64bit版があるので使っているOSにあわせてください。
インストール:
Program Loaderを選択してインストール。※64bit版のかたは、64bit componentだけじゃなく32bit componentのほうもインストールしてくださいね(標準ではチェック入っているはず)
使い方:
デスクトップに「gdipp Loader 32」というショートカットができていると思います。 ※64bit版は「gdipp Loader 64」も作成されます。そのプロパティを開き、リンク先をメモっておきましょう。

次に適用させたいアプリのショートカット作りプロパティを開いてください。
先ほどメモしておいたリンクを今作成したショートカットの先頭に貼り付けて、次に半角スペースを入れてあげてください。
例) リンク先:[&amp;ldquo;C:\Program Files (x86)\gdipp\gdipp_loader_32.exe&amp;rdquo; &amp;ldquo;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&amp;rdquo;]

↑の感じです。これで完成です。あとは完成したショートカットから起動させればおｋです。お疲れ様でした。
※1 「gdipp Loader 64」ショートカットは、64bitアプリで使用します。やり方は一緒です。
※2 ショートカットアイコンがgdippのものになってしまいます。気になるかたは逐次変更してください。</description>
			<content type="html"><![CDATA[<p>Twitter上で相性悪いアプリがあるなー云々とかいってたので、全体適用ではなく各々のアプリに適用させる方法を紹介したいと思います。(やり方自体はgdi++の時と一緒ｗ)</p>
<p><strong><!-- raw HTML omitted -->ダウンロード:<!-- raw HTML omitted --></strong><br>
gdippのダウンロードは<a href="http://code.google.com/p/gdipp/">こちら</a>。32bit,
64bit版があるので使っているOSにあわせてください。</p>
<p><strong><!-- raw HTML omitted -->インストール:<!-- raw HTML omitted --></strong><br>
Program Loaderを選択してインストール。※64bit版のかたは、64bit
componentだけじゃなく32bit
componentのほうもインストールしてくださいね(標準ではチェック入っているはず)</p>
<p><strong><!-- raw HTML omitted -->使い方:<!-- raw HTML omitted --></strong><br>
デスクトップに「gdipp Loader
32」というショートカットができていると思います。 ※64bit版は「gdipp
Loader
64」も作成されます。そのプロパティを開き、リンク先をメモっておきましょう。<br>
<a href="/images/2010-05-19-gdippwoge-noapurikeshiyonnishi-yong-saserufang-fa-gdi32.gif"><img src="/images/2010-05-19-gdippwoge-noapurikeshiyonnishi-yong-saserufang-fa-gdi32.gif" alt=""></a></p>
<p>次に適用させたいアプリのショートカット作りプロパティを開いてください。<br>
先ほどメモしておいたリンクを今作成した<strong>ショートカットの先頭</strong>に貼り付けて、次に<strong>半角スペース</strong>を入れてあげてください。<br>
例) リンク先:[&ldquo;C:\Program Files (x86)\gdipp\gdipp_loader_32.exe&rdquo;
&ldquo;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&rdquo;]</p>
<p><a href="/images/2010-05-19-gdippwoge-noapurikeshiyonnishi-yong-saserufang-fa-fx.gif"><img src="/images/2010-05-19-gdippwoge-noapurikeshiyonnishi-yong-saserufang-fa-fx.gif" alt=""></a></p>
<p>↑の感じです。これで完成です。あとは完成したショートカットから起動させればおｋです。お疲れ様でした。</p>
<p>※1 「gdipp Loader
64」ショートカットは、64bitアプリで使用します。やり方は一緒です。<br>
※2
ショートカットアイコンがgdippのものになってしまいます。気になるかたは逐次変更してください。</p>
]]></content>
		</item>
		
		<item>
			<title>近況</title>
			<link>https://github.pyyoshi.com/blog/2010/05/%E8%BF%91%E6%B3%81/</link>
			<pubDate>Mon, 10 May 2010 21:52:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/05/%E8%BF%91%E6%B3%81/</guid>
			<description>クローラのテストコードをPythonで記述。
本コードをC++で。という感じ。GUIにするならC#あたり？ さわってみたのだけれども、Cという名前がついているだけであんまりCっぽくない。ちょっと微妙… MS製だし… あと、Linuxでやりたいし…
来期から研究室配属（単位次第ｗ）なのでその前までには完成させて、研究内容と結合してサービス云々。
今のところどのようなクローラーを作るかという段階ではない。とりあえずどっかのサービスをハックしようとか云々。</description>
			<content type="html"><![CDATA[<p>クローラのテストコードをPythonで記述。<br>
本コードをC++で。という感じ。GUIにするならC#あたり？
さわってみたのだけれども、Cという名前がついているだけであんまりCっぽくない。ちょっと微妙…
MS製だし… あと、Linuxでやりたいし…</p>
<p>来期から研究室配属（単位次第ｗ）なのでその前までには完成させて、研究内容と結合してサービス云々。<br>
今のところどのようなクローラーを作るかという段階ではない。とりあえずどっかのサービスを<!-- raw HTML omitted -->ハック<!-- raw HTML omitted -->しようとか云々。</p>
]]></content>
		</item>
		
		<item>
			<title>UbuntuでMumble Serverを。</title>
			<link>https://github.pyyoshi.com/blog/2010/05/Ubuntu%E3%81%A7Mumble-Server%E3%82%92/</link>
			<pubDate>Mon, 10 May 2010 21:26:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/05/Ubuntu%E3%81%A7Mumble-Server%E3%82%92/</guid>
			<description>1,インストールsudo apt-get install mumble-server
2,設定dpkg-reconfigure mumble-serversudo vim /etc/mumble-server.ini
4,起動（実は自動起動されますが、-supwすると落ちるので。sudo /usr/sbin/murmurd -ini /etc/mumble-server.ini
注意することはsudoしてあげないとデータベースを読み込んでくれないということ。
詳しい設定方法はちょっとわからないので割愛ｗ</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted -->1,インストール<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<strong>sudo apt-get install mumble-server</strong><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->2,設定<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>dpkg-reconfigure
mumble-server</strong><!-- raw HTML omitted --><br>
<strong>sudo vim /etc/mumble-server.ini</strong><br>
<!-- raw HTML omitted -->4,起動（実は自動起動されますが、-supwすると落ちるので。<!-- raw HTML omitted --><br>
<strong>sudo /usr/sbin/murmurd -ini /etc/mumble-server.ini</strong><br>
注意することはsudoしてあげないとデータベースを読み込んでくれないということ。</p>
<p>詳しい設定方法はちょっとわからないので割愛ｗ</p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntu 64bit環境でFlash Playerを使う</title>
			<link>https://github.pyyoshi.com/blog/2010/05/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A7Flash-Player%E3%82%92%E4%BD%BF%E3%81%86/</link>
			<pubDate>Fri, 07 May 2010 14:33:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/05/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A7Flash-Player%E3%82%92%E4%BD%BF%E3%81%86/</guid>
			<description>すっかり忘れておったのでメモsudo apt-get install flashplugin-installerで、いちよインストールされる。Google ChromeとかFirefoxで使えるようにするにはChromeはsudo mkdir /opt/google/chrome/pluginssudo ln -s /usr/lib/flashplugin-installer/libflashplayer.so /opt/google/chrome/pluginsFirefoxはsudo ln -s /usr/lib/flashplugin-installer/libflashplayer.so /usr/lib/mozilla/plugins**</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->すっかり忘れておったのでメモ<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><strong>sudo
apt-get install
flashplugin-installer</strong><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->で、いちよインストールされる。<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Google
ChromeとかFirefoxで使えるようにするには<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Chromeは<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><strong>sudo
mkdir /opt/google/chrome/plugins</strong><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><strong>sudo
ln -s /usr/lib/flashplugin-installer/libflashplayer.so
/opt/google/chrome/plugins</strong><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Firefoxは<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><strong>sudo
ln -s /usr/lib/flashplugin-installer/libflashplayer.so
/usr/lib/mozilla/plugins</strong><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->**<br>
**<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->このやり方のほかにも<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><a href="http://labs.adobe.com/technologies/flashplayer10/">ここ</a>とかから拾ってきたのを適当なディレクトリにぶっ込んでlnすりゃいいと思われる。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->※それにしてもadobeさん(´・ω・)ｶﾜｲｿｽ<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->いろんなサイトの動画プレイヤーがHTML5版とかでテスト始まってていよいよって感じ。<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Win7のブートローダが別HDDにインストールしやがったので</title>
			<link>https://github.pyyoshi.com/blog/2010/04/Win7%E3%81%AE%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%81%8C%E5%88%A5HDD%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%84%E3%81%8C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7/</link>
			<pubDate>Wed, 07 Apr 2010 21:01:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/04/Win7%E3%81%AE%E3%83%96%E3%83%BC%E3%83%88%E3%83%AD%E3%83%BC%E3%83%80%E3%81%8C%E5%88%A5HDD%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%82%84%E3%81%8C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A7/</guid>
			<description>SSDにWin7をインスコした際、めんどくさかったのでほかのHDDを接続したまま行ったせいか、
うんこWindows様はOSがインスコされたSSDにMBRを書き込まずに、別HDDに書き込んでしまいました。
その際の修復方法の備忘録です。
修復Disk or InstallDiskから修復モード選択後、ターミナルを開きます。
以下コマンドを
diskpartlist diskpart ←ここでインストール先のdisk番号をメモ！select disk [先ほどメモった番号を入力]list partition ←ここでインストールされているパーティッション番号をメモ！select partition [先ほどメモった番号を入力]activeexitbootrec /fixbootbootrec /fixmbrここまでやってまだWin7が起動しなかった。でもmbrは書き込まれているみたい。
もっかい修復ディスクを開いて、スタートアップの修復を行う。

この時、ちゃんとOSが表示されていればうまくいっているはず。

この方法はMBRを誤って壊したときやGrubを使わなくなったときに使える。

日本語でおｋ</description>
			<content type="html"><![CDATA[<p>SSDにWin7をインスコした際、めんどくさかったのでほかのHDDを接続したまま行ったせいか、</p>
<p>うんこWindows様はOSがインスコされたSSDにMBRを書き込まずに、別HDDに書き込んでしまいました。</p>
<p>その際の修復方法の備忘録です。</p>
<p>修復Disk or InstallDiskから修復モード選択後、ターミナルを開きます。</p>
<p>以下コマンドを</p>
<p><!-- raw HTML omitted --><strong>diskpart</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>list diskpart <!-- raw HTML omitted -->←ここでインストール先のdisk番号をメモ！<!-- raw HTML omitted --></strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>select disk [<!-- raw HTML omitted -->先ほどメモった番号を入力<!-- raw HTML omitted -->]<strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --></strong>list partition
<!-- raw HTML omitted -->←ここでインストールされているパーティッション<!-- raw HTML omitted --></strong><!-- raw HTML omitted -->番号をメモ！<!-- raw HTML omitted --><strong><!-- raw HTML omitted --><!-- raw HTML omitted --></strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>select partition
[<!-- raw HTML omitted -->先ほどメモった番号を入力<!-- raw HTML omitted -->]<strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --></strong>active</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>exit</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>bootrec
/fixboot</strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong>bootrec
/fixmbr</strong><!-- raw HTML omitted --></p>
<p>ここまでやってまだWin7が起動しなかった。でもmbrは書き込まれているみたい。</p>
<p><strong><!-- raw HTML omitted -->もっかい修復ディスクを開いて、スタートアップの修復を行う。<!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted -->この時、ちゃんとOSが表示されていればうまくいっているはず。<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted -->この方法はMBRを誤って壊したときやGrubを使わなくなったときに使える。<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><br>
<strong><!-- raw HTML omitted --><!-- raw HTML omitted -->日本語でおｋ<!-- raw HTML omitted --><!-- raw HTML omitted --></strong></p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntu 9.10にMongoDBをインストール</title>
			<link>https://github.pyyoshi.com/blog/2010/03/Ubuntu-9.10%E3%81%ABMongoDB%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</link>
			<pubDate>Fri, 26 Mar 2010 01:15:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/03/Ubuntu-9.10%E3%81%ABMongoDB%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB/</guid>
			<description>&amp;quot;sudo apt-get install mongodb&amp;rdquo; できる娘うぶんちゅたんなのでほいほい投げてみたけど、やっぱり無かったので、素直にgitから持ってきてコンパイルすることに。
下準備としてコンパイルに必要なパッケージをインストール
sudo apt-get install build-dep scons libreadline-dev libmozjs-dev libpcre++-dev libboost-dev
gitからソースを拝借
cd /usr/src
sudo git clone git://github.com/mongodb/mongo.git
cd mongo
sudo scons all
でやったらエラーはいてくれやがったので、ググる先生に聞いたら、SpiderMonkeyをUTF8形式でインスコしないとだめとかなんとか。
cd -
sudo wget ftp://ftp.mozilla.org/pub/mozilla.org/js/js-1.7.0.tar.gz
sudo tar zxvf js-1.7.0.tar.gz
mv js/src mongo/js
cd mongo/js
export CFLAGS=&amp;rdquo;-DJS_C_STRINGS_ARE_UTF8&amp;rdquo;
sudo make -f Makefile.ref
sudo env JS_DIST=/usr make -f Makefile.ref export
で、ここまでいれておｋ的なこと書いてあって&amp;quot;sudo scons all&amp;quot;したんだけど、同じエラーがでやがったぜばかやろー！
いろいろ調べたら、
sudo apt-get install xulrunner-dev
すりゃーいいらしい。
気を取り直して
cd
cd /usr/src/mongo
sudo scons all</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted -->&quot;sudo apt-get install mongodb&rdquo;
できる娘うぶんちゅたんなのでほいほい投げてみたけど、やっぱり無かった<!-- raw HTML omitted -->ので、素直にgitから持ってきてコンパイルすることに。</p>
<p>下準備としてコンパイルに必要なパッケージをインストール<br>
<strong><!-- raw HTML omitted -->sudo apt-get
install build-dep scons libreadline-dev libmozjs-dev libpcre++-dev
libboost-dev<!-- raw HTML omitted --></strong></p>
<p>gitからソースを拝借<br>
<strong>cd /usr/src</strong><br>
<strong>sudo git clone git://github.com/mongodb/mongo.git</strong><br>
<strong>cd mongo</strong><br>
<strong>sudo scons all</strong></p>
<p>でやったらエラーはいてくれやがったので、ググる先生に聞いたら、SpiderMonkeyをUTF8形式でインスコしないとだめとかなんとか。<br>
<strong>cd -</strong><br>
<strong>sudo wget <a href="ftp://ftp.mozilla.org/pub/mozilla.org/js/js-1.7.0.tar.gz">ftp://ftp.mozilla.org/pub/mozilla.org/js/js-1.7.0.tar.gz</a></strong><br>
<strong>sudo tar zxvf js-1.7.0.tar.gz</strong><br>
<strong>mv js/src mongo/js</strong><br>
<strong>cd mongo/js</strong><br>
<strong>export CFLAGS=&rdquo;-DJS_C_STRINGS_ARE_UTF8&rdquo;</strong><br>
<strong>sudo make -f Makefile.ref</strong><br>
<strong>sudo env JS_DIST=/usr make -f Makefile.ref export</strong></p>
<p>で、ここまでいれておｋ的なこと書いてあって&quot;sudo scons
all&quot;したんだけど、同じエラーがでやがったぜばかやろー！</p>
<p>いろいろ調べたら、<br>
<strong><!-- raw HTML omitted --><em>sudo apt-get
install xulrunner-dev</em><!-- raw HTML omitted --></strong><br>
すりゃーいいらしい。</p>
<p>気を取り直して<br>
<strong>cd</strong><br>
<strong>cd /usr/src/mongo</strong><br>
<strong>sudo scons all</strong><br>
<strong>sudo scons &ndash;prefix=/opt/mongo install</strong></p>
<p>これでインストールは完了しました。</p>
<p>&ldquo;<strong>/opt/mongo</strong>&ldquo;にインスコされていると思います。</p>
<p>あとは、ユーザを追加します。※ほんの一例</p>
<p>sudo adduser &ndash;system &ndash;home /opt/mongo/ &ndash;no-create-home &ndash;shell
/bin/bash &ndash;group &ndash;gecos &ldquo;mongoDB Admin&rdquo; mongo</p>
<p>DB置く場所はmongoユーザに書き込み読み込みの権限を渡してくださいね。<br>
<strong>sudo mkdir -p /data/db</strong><br>
<strong>sudo chown -R mongo /data/db</strong><br>
<strong>sudo chmod a+x /data/db</strong></p>
<p>残るは、MongoDBが起動時に立ち上げる方法ですが、こいつは割愛させていただきます。</p>
<p>起動方法は<br>
<strong>/opt/mongo/bin/mongod</strong><br>
です。</p>
<p>コンフィグはまだよーわからないので後ほどエントリーしたいと思います。</p>
<p><a href="http://tech.favoritemedium.com/2009/08/installing-mongodb-on-ubuntu-904-jaunty.html">ここ</a>とか<a href="http://groups.google.com/group/mongodb-user/browse_thread/thread/12653ca20b73eb95">ここ</a>を参考にすればいいかもYO！</p>
<p>先陣を切っている皆様方に敬意を込めて！</p>
<hr>
<p><!-- raw HTML omitted --><!-- raw HTML omitted -->おまけ<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<p>Pythonで使うには<br>
<strong>sudo apt-get install python-setuptool</strong><br>
<strong>sudo easy_install pymongo</strong><br>
**<br>
**<br>
FreeBSDだとPortsで普通に通った。<!-- raw HTML omitted -->FreeBSDってUbuntuよりできる子なのか！？<!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>Tumbler Photoバックアップスクリプトを作ったのだが…</title>
			<link>https://github.pyyoshi.com/blog/2010/03/Tumbler-Photo%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A0%E3%81%8C/</link>
			<pubDate>Sat, 06 Mar 2010 23:37:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/03/Tumbler-Photo%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%AE%E3%81%A0%E3%81%8C/</guid>
			<description>DL→Ziped→配布までするスクリプト書いたんだけど、I/Oがネックで時間かかりすぎた。なので、キューリスト作成だけでいいかと、コード書き直して実行したのですが、拡張子判定のために頻繁にI/Oでやっぱり時間喰う。 700位Photo投稿数あると10分くらいかかるｗ（最適化できるところはしたのだがただ、URLだけで良いというのであればAPIにアクセスするだけなのでそんなに時間はかからなかった。でも、拡張子判定されていないので各自で行って貰わなければいけないのだけれど。といううことで、クローラー作れば、いいんじゃね？って展開になったのだが。クローラー作る知識なくて＼(^o^)／状態ｗ幸いなことにPythonには数多くのモジュール＆情報が流れているので何とかなりそうなんだけど。一から作ることになったら、ついったーの皆さんに聞きまくりながらどうにかしたいところｗ（人頼みURLリストだけで良いよってかたがいたら、CGIにして公開しようと思います。</description>
			<content type="html"><![CDATA[<p><!-- raw HTML omitted --><!-- raw HTML omitted -->DL→Ziped→配布までするスクリプト書いたんだけど、I/Oがネックで時間かかりすぎた。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->なので、キューリスト作成だけでいいかと、コード書き直して実行したのですが、拡張子判定のために頻繁にI/Oでやっぱり時間喰う。 <!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->700位Photo投稿数あると10分くらいかかるｗ（<!-- raw HTML omitted -->最適化できるところはしたのだが<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->ただ、URLだけで良いというのであればAPIにアクセスするだけなのでそんなに時間はかからなかった。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->でも、拡張子判定されていないので各自で行って貰わなければいけないのだけれど。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->といううことで、クローラー作れば、いいんじゃね？って展開になったのだが。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><strong><!-- raw HTML omitted --><!-- raw HTML omitted -->クローラー作る知識なくて＼(^o^)／状態ｗ<!-- raw HTML omitted --><!-- raw HTML omitted --></strong><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted -->幸いなことにPythonには数多くのモジュール＆情報が流れているので何とかなりそうなんだけど。<!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->一から作ることになったら、ついったーの皆さんに聞きまくりながらどうにかしたいところｗ（人頼み<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted --><!-- raw HTML omitted --><strong><!-- raw HTML omitted -->URLリストだけで良いよってかたがいたら、CGIにして公開しようと思います。<!-- raw HTML omitted --></strong><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
]]></content>
		</item>
		
		<item>
			<title>初JavaScript&#43;初GoogleChromeExtensionで。</title>
			<link>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</link>
			<pubDate>Fri, 26 Feb 2010 16:41:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/02/%E5%88%9DJavaScript-%E5%88%9DGoogleChromeExtension%E3%81%A7/</guid>
			<description>ついったーに今閲覧している情報をついーとするExtensionを作成した。
Post Now Watching!
初JSで、もうわけわかめじょうたいでつくった。バグでるとおもう。
なんでつくったかというえば、Devfestの課題のため（笑）としか言いようがないけど、まぁ良い機会にはなったかな。
JavaScriptもやってみるとマゾッ気のある僕には適しているのかなとも思うけど
これはテキストエディタでやってたら頭がこんがらがるかもとも。
Aptanaたんのおかげで乗り越えられたけどね。
まぁそんなところ。</description>
			<content type="html"><![CDATA[<p>ついったーに今閲覧している情報をついーとするExtensionを作成した。</p>
<p><a href="https://chrome.google.com/extensions/detail/ooboohdinadoeanpleoaefomkllcnple">Post Now
Watching!</a></p>
<p>初JSで、もうわけわかめじょうたいでつくった。バグでるとおもう。</p>
<p>なんでつくったかというえば、Devfestの課題のため（笑）としか言いようがないけど、まぁ良い機会にはなったかな。</p>
<p>JavaScriptもやってみるとマゾッ気のある僕には適しているのかなとも思うけど</p>
<p>これはテキストエディタでやってたら頭がこんがらがるかもとも。</p>
<p>Aptanaたんのおかげで乗り越えられたけどね。</p>
<p>まぁそんなところ。</p>
]]></content>
		</item>
		
		<item>
			<title>EASEUS Disk CopyをブータブルUSBメモリで。</title>
			<link>https://github.pyyoshi.com/blog/2010/02/EASEUS-Disk-Copy%E3%82%92%E3%83%96%E3%83%BC%E3%82%BF%E3%83%96%E3%83%ABUSB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%A7/</link>
			<pubDate>Wed, 03 Feb 2010 14:56:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/02/EASEUS-Disk-Copy%E3%82%92%E3%83%96%E3%83%BC%E3%82%BF%E3%83%96%E3%83%ABUSB%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%A7/</guid>
			<description>EASEUS Disk Copy自体はDiskからの起動をサポートしていますが、ネットブックなどのドライブを持たないPCからは、USBドライブで使わなくてはいけなく非常にだるいですね。
とりあえずEASEUS Disk CopyをDLしてきてiso内を見たらGrubにより起動させているみたいなのでUnetbootinでいけるんじゃね？ということで試したらいけたのでその時のメモ。
手順
1、EASEUS Disk CopyをDLしてきましょう。
2、UnetbootinをDLしてきましょう。（僕はWindows版）
3、dc.zipを展開する。
4、Unetbootinを起動してDiskimageモードで、先程展開したdc.isoを選択します。
5、OKを押してしばらくすればブータブルUSBメモリーの完成です。
参考画像</description>
			<content type="html"><![CDATA[<p>EASEUS Disk
Copy自体はDiskからの起動をサポートしていますが、ネットブックなどのドライブを持たないPCからは、USBドライブで使わなくてはいけなく非常にだるいですね。<br>
とりあえずEASEUS Disk
CopyをDLしてきてiso内を見たらGrubにより起動させているみたいなのでUnetbootinでいけるんじゃね？ということで試したらいけたのでその時のメモ。</p>
<p>手順</p>
<p>1、<a href="http://www.easeus.com/disk-copy/">EASEUS Disk
Copy</a>をDLしてきましょう。</p>
<p>2、<a href="http://unetbootin.sourceforge.net/">Unetbootin</a>をDLしてきましょう。（僕はWindows版）</p>
<p>3、dc.zipを展開する。</p>
<p>4、Unetbootinを起動してDiskimageモードで、先程展開したdc.isoを選択します。</p>
<p>5、OKを押してしばらくすればブータブルUSBメモリーの完成です。</p>
<p>参考画像</p>
<p><a href="/images/2010-02-03-easeus-disk-copywobutaburuusbmemoride-sawdasfe.png"><img src="/images/2010-02-03-easeus-disk-copywobutaburuusbmemoride-sawdasfe.png" alt=""></a></p>
]]></content>
		</item>
		
		<item>
			<title>NicoRoid</title>
			<link>https://github.pyyoshi.com/blog/2010/01/NicoRoid/</link>
			<pubDate>Tue, 05 Jan 2010 23:34:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/01/NicoRoid/</guid>
			<description>NicoRoidはAndroidでニコニコ動画を楽しむアプリです。
とか言っておく。
夏コミリリースに向けて Java･C++の勉強を兼ねてとかなんとか。
ついったーぼっと作成意欲も薄れたし、新たな目標が出来て良かった。</description>
			<content type="html"><![CDATA[<p>NicoRoidはAndroidでニコニコ動画を楽しむアプリです。</p>
<p>とか言っておく。</p>
<p>夏コミリリースに向けて Java･C++の勉強を兼ねてとかなんとか。</p>
<p>ついったーぼっと作成意欲も薄れたし、新たな目標が出来て良かった。</p>
]]></content>
		</item>
		
		<item>
			<title>Android端末買った。</title>
			<link>https://github.pyyoshi.com/blog/2010/01/Android%E7%AB%AF%E6%9C%AB%E8%B2%B7%E3%81%A3%E3%81%9F/</link>
			<pubDate>Tue, 05 Jan 2010 22:57:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2010/01/Android%E7%AB%AF%E6%9C%AB%E8%B2%B7%E3%81%A3%E3%81%9F/</guid>
			<description>あけましておめでとうございます。
さてAndroid端末の件ですが、思い切ってauからDoCoMoへMNPでHT-03Aを0円で入手。
今のところさくさく動いてるところ。
カスタムROM云々あるけど、サポート効かなくなるのでやらない方向だけれど
別機種を入手したら開発用端末としていろいろ弄る予定。
プランなどの使用形態は
SSバリュー,bizホダブル,モペラUライト,ケータイ補償をつけた。
パケは初月だけフル使用で、あとはCMR-250で芋を使い、2000円弱/月に抑えようと考えている。
さっそく作りたいものが出来たのでJavaのお勉強しないと（ぇ</description>
			<content type="html"><![CDATA[<p>あけましておめでとうございます。</p>
<p>さてAndroid端末の件ですが、思い切ってauからDoCoMoへMNPでHT-03Aを0円で入手。</p>
<p>今のところさくさく動いてるところ。</p>
<p>カスタムROM云々あるけど、サポート効かなくなるのでやらない方向だけれど</p>
<p>別機種を入手したら開発用端末としていろいろ弄る予定。</p>
<p>プランなどの使用形態は</p>
<p>SSバリュー,bizホダブル,モペラUライト,ケータイ補償をつけた。</p>
<p>パケは初月だけフル使用で、あとは<a href="https://www.amazon.co.jp/dp/B002MZYLJC?tag=kimin-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=B002MZYLJC&amp;adid=1C439MQ26Y7B2360PBP4&amp;">CMR-250</a>で芋を使い、2000円弱/月に抑えようと考えている。</p>
<p>さっそく作りたいものが出来たのでJavaのお勉強しないと（ぇ</p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntuサーバ再構築(４)</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%89%EF%BC%94/</link>
			<pubDate>Sun, 27 Dec 2009 19:20:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%89%EF%BC%94/</guid>
			<description>DynamicDNSに登録してもIPころころ変わっては意味がないのでなんとか対応したい！そういう時にスクリプト書いて対応するのは良いのだが管理が大変になるかも。そーいうときはDiCEを使おう！
ということでDiCE導入から設定まで
cd /usr/local/binsudo wget http://www.hi-ho.ne.jp/cgi-bin/user/yoshihiro_e/download.cgi?p=diced019sudo tar zxvf diced01914.tar.gzsudo rm &amp;ldquo;diced01914.tar.gz&amp;quot;
※端末の文字コードをEUCへ変更する
sudo ./diced
:setupIPアドレスの検出方法を指定してください(0) 自動検出(1) ローカルのネットワークアダプタから検出(2) 外部のスクリプトから検出&amp;lt;現在:0&amp;gt;(N)変更しない (P)戻る&amp;gt;2&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-スクリプトのURLを入力してください&amp;lt;現在:&amp;gt;(N)変更しない (P)戻る&amp;gt;http://ipcheck.ieserver.net/&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-プライベートIPアドレスも検出対象ですか？ (Y/N)&amp;lt;現在:いいえ&amp;gt;(P)戻る&amp;gt;n&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-IPアドレスの検出をテストしますか？ (Y/N)(P)戻る&amp;gt;y検出IPアドレス&amp;gt;*******&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-IPアドレスの検出をテストしますか？ (Y/N)(P)戻る&amp;gt;n&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-IPアドレスをチェックする間隔を指定してください(分)設定可能範囲は5分以上です&amp;lt;現在:10&amp;gt;(N)変更しない (P)戻る&amp;gt;5=================================================DNSサーバーの負荷を軽減するために頻繁なDNS更新を防ぐ必要があります前回の更新から一定時間DNS更新処理を行わないように保護時間を設定してください(分) 設定可能範囲は10分から1440分です&amp;lt;現在:60&amp;gt;(N)変更しない (P)戻る&amp;gt;30=================================================設定を保存しますか? (Y/N)(P)戻る&amp;gt;y設定を保存しました=================================================ieServerを例に
:add新しくイベントを追加しますDynamicDNSサービス名を入力してください&amp;rdquo;?&amp;ldquo;で対応しているサービスを一覧表示します(P)戻る&amp;gt;ieServer&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;lt;&amp;lt; ieServer Project &amp;gt;&amp;gt;URL: http://www.ieserver.net/&amp;lt;/span&amp;gt;
*** 情報 ***IPアドレスはサーバー側で自動検出します。IPアドレスの指定は出来ません。（入力しても無視されます）=================================================ドメイン名を入力してください&amp;rdquo;?&amp;ldquo;でドメイン一覧を表示します(P)戻る&amp;gt;dip.jp=================================================ドメイン名を入力してください&amp;rdquo;?&amp;ldquo;でドメイン一覧を表示します(P)戻る&amp;gt;dip.jp=================================================ホスト名を入力してください(P)戻る&amp;gt;*****=================================================ログインユーザ名を入力してください(P)戻る&amp;gt;*****=================================================ログインパスワードを入力してください(P)戻る&amp;gt;*****=================================================登録するIPアドレスを入力してください空白にすると現在のIPアドレスを自動検出します(P)戻る&amp;gt;=================================================このイベントに題名を付けてください(P)戻る&amp;gt;*****=================================================このイベントを実行するスケジュールを設定します&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-実行する頻度を指定してください (番号入力)(0)１回のみ (1)１日１回 (2)１週間に１回 (3)１ヵ月に１回(4)その他の周期 (5)IPアドレス変化時 (6)起動時(P)戻る&amp;gt;5&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-IPアドレスがあまり変化しない環境の場合、更新せずに一定期間を過ぎるとアカウントを削除されてしまうことがありますIPアドレスの変化が無い時に実行する間隔を指定してください(0)7日毎 (1)14日毎 (2)21日毎 (3)28日毎(4)35日毎 (5)56日毎 (6)84日毎(P)戻る&amp;gt;0=================================================詳細オプションを設定します&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-[ オフライン ](0)No (1)Yes 番号&amp;gt;0=================================================このイベントを有効にしますか? (Y/N)(イベントの有効/無効は&amp;quot;EN/DIS&amp;quot;コマンドで切替えられます)&amp;gt;y=================================================イベントを保存しますか? (Y/N)&amp;gt;yイベント&amp;rdquo;*******&amp;ldquo;を保存しました=================================================:exitコマンド一覧は&amp;rdquo;?&amp;ldquo;で表示可能
exit DiCEを終了します
start DiCEを開始します
startd DiCEをバックグラウンドで開始します
setup DiCEの環境設定を行います
list 登録済のイベント一覧を表示します
add イベントを追加します
ed[it] &amp;lt;番号&amp;gt; イベントを編集します
del &amp;lt;番号&amp;gt; イベントを削除します</description>
			<content type="html"><![CDATA[<p>DynamicDNSに登録してもIPころころ変わっては意味がないのでなんとか対応したい！そういう時にスクリプト書いて対応するのは良いのだが管理が大変になるかも。そーいうときはDiCEを使おう！</p>
<p>ということでDiCE導入から設定まで</p>
<p><strong><!-- raw HTML omitted -->cd /usr/local/bin<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo wget
<a href="http://www.hi-ho.ne.jp/cgi-bin/user/yoshihiro">http://www.hi-ho.ne.jp/cgi-bin/user/yoshihiro</a>_e/download.cgi?p=diced019<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo tar zxvf diced01914.tar.gz<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo rm &ldquo;diced01914.tar.gz&quot;<!-- raw HTML omitted --></strong></p>
<p>※端末の文字コードをEUCへ変更する</p>
<p><strong>sudo ./diced</strong><br>
<!-- raw HTML omitted -->:setup<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスの検出方法を指定してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(0) 自動検出<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(1)
ローカルのネットワークアダプタから検出<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(2) 外部のスクリプトから検出<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;現在:0&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(N)変更しない  (P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;2<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->スクリプトのURLを入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;現在:&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(N)変更しない  (P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;http://ipcheck.ieserver.net/<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->プライベートIPアドレスも検出対象ですか？
(Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;現在:いいえ&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;n<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスの検出をテストしますか？
(Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;y<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->検出IPアドレス&gt;*******<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスの検出をテストしますか？
(Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;n<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスをチェックする間隔を指定してください(分)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->設定可能範囲は5分以上です<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;現在:10&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(N)変更しない  (P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;5<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->DNSサーバーの負荷を軽減するために頻繁なDNS更新を防ぐ必要があります<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->前回の更新から一定時間DNS更新処理を行わないように保護時間を設定して<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ください(分) 
設定可能範囲は10分から1440分です<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;現在:60&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(N)変更しない  (P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;30<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->設定を保存しますか? (Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;y<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->設定を保存しました<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --></p>
<p>ieServerを例に</p>
<p><!-- raw HTML omitted -->:add<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->新しくイベントを追加します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->DynamicDNSサービス名を入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&rdquo;?&ldquo;で対応しているサービスを一覧表示します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;ieServer<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&lt;&lt; ieServer Project &gt;&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->URL: <a href="http://www.ieserver.net/%3C/span%3E">http://www.ieserver.net/&lt;/span&gt;</a><br>
<!-- raw HTML omitted -->*** 情報 ***<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスはサーバー側で自動検出します。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスの指定は出来ません。<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->（入力しても無視されます）<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ドメイン名を入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&rdquo;?&ldquo;でドメイン一覧を表示します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;dip.jp<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ドメイン名を入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&rdquo;?&ldquo;でドメイン一覧を表示します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;dip.jp<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ホスト名を入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;*****<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ログインユーザ名を入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;*****<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->ログインパスワードを入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;*****<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->登録するIPアドレスを入力してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->空白にすると現在のIPアドレスを自動検出します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->このイベントに題名を付けてください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;*****<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->このイベントを実行するスケジュールを設定します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->実行する頻度を指定してください
(番号入力)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(0)１回のみ (1)１日１回 (2)１週間に１回
(3)１ヵ月に１回<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(4)その他の周期 (5)IPアドレス変化時
(6)起動時<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;5<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスがあまり変化しない環境の場合、更新せずに一定期間を過ぎると<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->アカウントを削除されてしまうことがあります<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->IPアドレスの変化が無い時に実行する間隔を指定してください<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(0)7日毎   (1)14日毎  (2)21日毎 
(3)28日毎<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(4)35日毎  (5)56日毎  (6)84日毎<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(P)戻る<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;0<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->詳細オプションを設定します<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->[ オフライン ]<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(0)No (1)Yes <!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->番号&gt;0<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->このイベントを有効にしますか? (Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->(イベントの有効/無効は&quot;EN/DIS&quot;コマンドで切替えられます)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;y<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->イベントを保存しますか? (Y/N)<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->&gt;y<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->イベント&rdquo;*******&ldquo;を保存しました<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->=================================================<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->:exit<!-- raw HTML omitted --></p>
<p>コマンド一覧は&rdquo;?&ldquo;で表示可能<br>
exit             DiCEを終了します<br>
start            DiCEを開始します<br>
startd           DiCEをバックグラウンドで開始します<br>
setup            DiCEの環境設定を行います<br>
list             登録済のイベント一覧を表示します<br>
add              イベントを追加します<br>
ed[it] &lt;番号&gt;    イベントを編集します<br>
del &lt;番号&gt;       イベントを削除します<br>
en[able] &lt;番号&gt;  イベントを有効にします<br>
dis[able] &lt;番号&gt; イベントを無効にします<br>
ev[ent] &lt;番号&gt;   イベントの情報を表示します<br>
ex[ec] &lt;番号&gt;    イベントを今すぐ実行します<br>
logcr            ログをクリアします</p>
<p>次にシステム起動時のスクリプトを設定</p>
<p><strong><!-- raw HTML omitted -->cd /etc/init.d/<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->sudo cp skelton diced<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->vim diced<!-- raw HTML omitted --></strong></p>
<p>以下編集した部分<br>
<!-- raw HTML omitted -->DESC=&quot;DiCE Daemon&quot;<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->NAME=diced<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->DAEMON=/usr/local/bin/DiCE/$NAME<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->PIDFILE=/var/run/$NAME.pid<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->SCRIPTNAME=/etc/init.d/$NAME<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->do_start() {<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->start-stop-daemon &ndash;start &ndash;quiet &ndash;pidfile
$PIDFILE \ &ndash;exec $DAEMON &ndash; -d -l<!-- raw HTML omitted --><br>
<!-- raw HTML omitted -->}<!-- raw HTML omitted --></p>
<p><strong>sudo update-rc.d diced defaults 96 5</strong></p>
<p>あとはシステム再起してプロセス確認して立ち上がっていればおｋ</p>
]]></content>
		</item>
		
		<item>
			<title>Qt4環境を構築</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Qt4%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</link>
			<pubDate>Sun, 27 Dec 2009 17:04:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Qt4%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/</guid>
			<description>sudo apt-get install libqt4-opengl-dev qt4-dev-tools libqt4-webkit-dbg libqt4-xmlpatterns-dbg libqt4-dbg　qt4-doc qt4-demos-dbg</description>
			<content type="html"><![CDATA[<p><strong>sudo apt-get install libqt4-opengl-dev qt4-dev-tools libqt4-webkit-dbg
libqt4-xmlpatterns-dbg libqt4-dbg　qt4-doc qt4-demos-dbg</strong></p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntu 64bit環境で32bitアプリを使う場合</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A732bit%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88/</link>
			<pubDate>Sun, 27 Dec 2009 16:35:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu-64bit%E7%92%B0%E5%A2%83%E3%81%A732bit%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E5%A0%B4%E5%90%88/</guid>
			<description>**sudo apt-get install ia32-libs
**
でパッケージをインスコ。</description>
			<content type="html"><![CDATA[<p>**sudo apt-get install ia32-libs<br>
**</p>
<p>でパッケージをインスコ。</p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntuサーバ再構築(3)</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%893/</link>
			<pubDate>Sun, 27 Dec 2009 15:51:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%893/</guid>
			<description>OpenSSHインスコ
sudo apt-get install ssh
設定(参考)
vim /etc/ssh/sshd_config
#プロトコル
Protocol 2,1
#rootのログインの許可
PermitRootLogin no
でおｋ
あとはクライアントからログインでリモート操作出来ると思う。
出来ない場合はFWall関係を調べてみるといいだろう。</description>
			<content type="html"><![CDATA[<p>OpenSSHインスコ</p>
<p><strong>sudo apt-get install ssh</strong></p>
<p>設定(<a href="http://www.nina.jp/server/slackware/openssh/sshd_config.html">参考</a>)</p>
<p><strong>vim /etc/ssh/sshd_config</strong></p>
<p>#プロトコル</p>
<p>Protocol 2,1</p>
<p>#rootのログインの許可</p>
<p>PermitRootLogin no</p>
<p>でおｋ</p>
<p>あとはクライアントからログインでリモート操作出来ると思う。</p>
<p>出来ない場合はFWall関係を調べてみるといいだろう。</p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntuサーバ再構築(2)</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%892/</link>
			<pubDate>Thu, 24 Dec 2009 15:33:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%892/</guid>
			<description>vsftpdをインスコ
sudo apt-get install vsftpd
次にconfig弄りなのだが、そのまえにvimをインスコ(vimデビューなう)
sudo apt-get install vim-full
sudo.vimもついでに。(参考)
sudo wget -P /usr/share/vim/addons/plugin -O sudo.vim &amp;ldquo;http://www.vim.org/scripts/download_script.php?src_id=3477&amp;rdquo;
vimの使い方はこちらを参照
標準のエディタの変更は
sudo update-alternatives &amp;ndash;config editor
で行える。
さて、気を取り直してvsftpdのconfigを弄る
基本的にvsftpd.confは/etc直下にあるが、ないという場合は以下を叩いてファイル位置を確認しよう。
dpkg -L vsftpd
vsftpd.confで弄った部分(参考１)(参考２)
#匿名ログインを許可
anonymous_enable=NO
#ローカルユーザのログインを許可
local_enable=YES
#書き込み許可
write_enable=YES
#デフォルトのumaskを022へ
local_umask=022
#ログ保存位置
xferlog_file=/var/log/vsftpd.log
#ログフォーマット
xferlog_std_fomat=NO
#アスキーモードでのアップロード許可
ascii_upload_enable=YES
#アスキーモードでのダウンロード許可
ascii_download_enable=YES
#ftpサーバ名 バージョンを表示させない。代替メッセージ
ftpd_banner=Welcome to my FTP serer.
#/homeより上層へのアクセスを制限
chroot_local_user=YES#/homeより上層へのアクセスを制限するリストの有効化
chroot_list_enable=YES#/homeより上層へのアクセスを制限リストの場所
chroot_list_file=/etc/vsftpd/chroot_list#Dirごと削除できるようにする。
ls_recurse_enable=YES
service start vsftpd
最低限設定したほうがいいやつを上げた。あとは自分の構築したい環境に適宜変更よろ。</description>
			<content type="html"><![CDATA[<p>vsftpdをインスコ</p>
<p><strong><!-- raw HTML omitted -->sudo apt-get install vsftpd<!-- raw HTML omitted --></strong></p>
<p>次にconfig弄りなのだが、そのまえにvimをインスコ(vimデビューなう)</p>
<p><strong>sudo apt-get install vim-full</strong></p>
<p>sudo.vimもついでに。(<a href="http://nanasi.jp/articles/vim/sudo_vim.html">参考</a>)</p>
<p><strong>sudo wget -P /usr/share/vim/addons/plugin -O sudo.vim
&ldquo;<a href="http://www.vim.org/scripts/download">http://www.vim.org/scripts/download</a>_script.php?src_id=3477&rdquo;</strong><br>
 <br>
vimの使い方は<a href="http://www15.ocn.ne.jp/%7Etusr/vim/vim_text0.html">こちら</a>を参照</p>
<p>標準のエディタの変更は</p>
<p><strong>sudo update-alternatives &ndash;config editor</strong></p>
<p>で行える。</p>
<p>さて、気を取り直してvsftpdのconfigを弄る</p>
<p>基本的にvsftpd.confは/etc直下にあるが、ないという場合は以下を叩いてファイル位置を確認しよう。</p>
<p><strong>dpkg -L vsftpd</strong></p>
<p>vsftpd.confで弄った部分(<a href="http://www.nina.jp/server/slackware/vsftpd/vsftpd.conf.html">参考１</a>)(<a href="http://centossrv.com/vsftpd.shtml">参考２</a>)</p>
<p>#匿名ログインを許可</p>
<p>anonymous_enable=NO</p>
<p>#ローカルユーザのログインを許可</p>
<p>local_enable=YES</p>
<p>#書き込み許可</p>
<p>write_enable=YES</p>
<p>#デフォルトのumaskを022へ</p>
<p>local_umask=022</p>
<p>#ログ保存位置</p>
<p>xferlog_file=/var/log/vsftpd.log</p>
<p>#ログフォーマット</p>
<p>xferlog_std_fomat=NO</p>
<p>#アスキーモードでのアップロード許可</p>
<p>ascii_upload_enable=YES</p>
<p>#アスキーモードでのダウンロード許可</p>
<p>ascii_download_enable=YES</p>
<p>#ftpサーバ名 バージョンを表示させない。代替メッセージ</p>
<p>ftpd_banner=Welcome to my FTP serer.</p>
<p>#/homeより上層へのアクセスを制限</p>
<p><!-- raw HTML omitted -->chroot_local_user=YES<!-- raw HTML omitted -->
#/homeより上層へのアクセスを制限するリストの有効化</p>
<p><!-- raw HTML omitted -->chroot_list_enable=YES<!-- raw HTML omitted -->
#/homeより上層へのアクセスを制限リストの場所</p>
<p><!-- raw HTML omitted -->chroot_list_file=/etc/vsftpd/chroot_list<!-- raw HTML omitted -->
#Dirごと削除できるようにする。</p>
<p>ls_recurse_enable=YES</p>
<p><strong>service start vsftpd</strong><br>
最低限設定したほうがいいやつを上げた。あとは自分の構築したい環境に適宜変更よろ。</p>
]]></content>
		</item>
		
		<item>
			<title>メモリ使用量の確認コマンド</title>
			<link>https://github.pyyoshi.com/blog/2009/12/%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</link>
			<pubDate>Wed, 23 Dec 2009 00:52:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/%E3%83%A1%E3%83%A2%E3%83%AA%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%AE%E7%A2%BA%E8%AA%8D%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/</guid>
			<description>free
でおｋ。</description>
			<content type="html"><![CDATA[<p><strong>free</strong></p>
<p>でおｋ。</p>
]]></content>
		</item>
		
		<item>
			<title>Ubuntuサーバ再構築(1)</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%891/</link>
			<pubDate>Tue, 22 Dec 2009 23:54:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Ubuntu%E3%82%B5%E3%83%BC%E3%83%90%E5%86%8D%E6%A7%8B%E7%AF%891/</guid>
			<description>結構前に触ったきりでちょい不安になったので、OS再インスコすることにした。
ディストリはUbuntu9.04。9.10はバグがアルらしく様子見（どんなバグがあるか詳しく調べていない） DNS Server LAMP Server OpenSSH Server  を選択。
BasicUbuntuServerに何が入っているのか分からないのでひとまずこれで。
ネットインスコだったけど念のため
sudo apt-get update / sudo apt-get upgrade
を叩いた。
ついでにGUI環境もということでLXDEを。
sudo apt-get install lxde 
鯖構築終わったら、lxdeを起動時に立ち上げないようにすることを忘れずに。
次回は vsftpd apache2 Python FireWall などの設定構築。</description>
			<content type="html"><![CDATA[<p>結構前に触ったきりでちょい不安になったので、OS再インスコすることにした。<br>
ディストリは<!-- raw HTML omitted -->Ubuntu9.04<!-- raw HTML omitted -->。9.10はバグがアルらしく様子見（どんなバグがあるか詳しく調べていない）<!-- raw HTML omitted --><!-- raw HTML omitted --></p>
<ol>
<li>DNS Server</li>
<li>LAMP Server</li>
<li>OpenSSH Server</li>
</ol>
<p>を選択。</p>
<p>BasicUbuntuServerに何が入っているのか分からないのでひとまずこれで。</p>
<p>ネットインスコだったけど念のため</p>
<p><strong>sudo apt-get update / sudo apt-get upgrade</strong></p>
<p>を叩いた。</p>
<p>ついでにGUI環境もということで<strong><!-- raw HTML omitted -->LXDE<!-- raw HTML omitted --></strong>を。</p>
<p><strong><!-- raw HTML omitted -->sudo apt-get install lxde <!-- raw HTML omitted --></strong></p>
<p>鯖構築終わったら、lxdeを起動時に立ち上げないようにすることを忘れずに。</p>
<p>次回は vsftpd apache2 Python FireWall などの設定構築。</p>
]]></content>
		</item>
		
		<item>
			<title>CSVモジュールでのエラー解決！</title>
			<link>https://github.pyyoshi.com/blog/2009/12/CSV%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA/</link>
			<pubDate>Mon, 21 Dec 2009 21:02:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/CSV%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA/</guid>
			<description>この記事でとっても悩んでいたのですが、ついったーでこの問題を解決していただきました。 以下がやりとりです。
Dirにあるファイルのプライオリティが高いみたいです。
こーいう問題にぶち当たる辺り、ちゃんとどういう動作をしているのか意識しながらやらないといけないのかな。触り始めたばかり、なんて言って逃げたくはないので頑張ろう。</description>
			<content type="html"><![CDATA[<p><a href="/2009/12/csv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C/">この</a>記事でとっても悩んでいたのですが、ついったーでこの問題を解決していただきました。
以下がやりとりです。</p>
<p>Dirにあるファイルのプライオリティが高いみたいです。<br>
こーいう問題にぶち当たる辺り、ちゃんとどういう動作をしているのか意識しながらやらないといけないのかな。触り始めたばかり、なんて言って逃げたくはないので頑張ろう。</p>
]]></content>
		</item>
		
		<item>
			<title>DoCoMoでスマフォ生活</title>
			<link>https://github.pyyoshi.com/blog/2009/12/DoCoMo%E3%81%A7%E3%82%B9%E3%83%9E%E3%83%95%E3%82%A9%E7%94%9F%E6%B4%BB/</link>
			<pubDate>Sat, 19 Dec 2009 19:06:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/DoCoMo%E3%81%A7%E3%82%B9%E3%83%9E%E3%83%95%E3%82%A9%E7%94%9F%E6%B4%BB/</guid>
			<description>DoCoMoのサイトで見て、てきとーに計算した。
タイプSS バリュー(ひとりでも割50)　934円(税込980円)/月
mopera U(Uライトプラン)　300円(税込315円)/月
Biz・ホーダイ ダブル　5,700円(税込5,985円)/月
計　6,916円(税込7,280円)/月
うむ。結構良い値段。これに端末代をいくらかずつ払うとなると8000～9000円になるだろう。
芋場とauを解約すれば何とかなるなぁ。
追記
以下サイトが詳しくかいてあった。
http://www40.atwiki.jp/ht03a2ch/</description>
			<content type="html"><![CDATA[<p>DoCoMoのサイトで見て、てきとーに計算した。</p>
<p>タイプSS バリュー(ひとりでも割50)　934円(税込980円)/月<br>
mopera U(Uライトプラン)　300円(税込315円)/月<br>
Biz・ホーダイ ダブル　5,700円(税込5,985円)/月<br>
計　6,916円(税込7,280円)/月</p>
<p>うむ。結構良い値段。これに端末代をいくらかずつ払うとなると8000～9000円になるだろう。<br>
芋場とauを解約すれば何とかなるなぁ。</p>
<p>追記<br>
以下サイトが詳しくかいてあった。<br>
<a href="http://www40.atwiki.jp/ht03a2ch/">http://www40.atwiki.jp/ht03a2ch/</a></p>
]]></content>
		</item>
		
		<item>
			<title>なんか残念なFirefoxさん</title>
			<link>https://github.pyyoshi.com/blog/2009/12/%E3%81%AA%E3%82%93%E3%81%8B%E6%AE%8B%E5%BF%B5%E3%81%AAFirefox%E3%81%95%E3%82%93/</link>
			<pubDate>Wed, 16 Dec 2009 23:46:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/%E3%81%AA%E3%82%93%E3%81%8B%E6%AE%8B%E5%BF%B5%E3%81%AAFirefox%E3%81%95%E3%82%93/</guid>
			<description>アップデートを促してきて指示に従ったのだが、更新できませんでした。っと言うのダサいなぁ～とか思った。まぁそれだけ。</description>
			<content type="html"><![CDATA[<p>アップデートを促してきて指示に従ったのだが、更新できませんでした。っと言うのダサいなぁ～とか思った。まぁそれだけ。</p>
]]></content>
		</item>
		
		<item>
			<title>自鯖の中身を引越した。</title>
			<link>https://github.pyyoshi.com/blog/2009/12/%E8%87%AA%E9%AF%96%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E5%BC%95%E8%B6%8A%E3%81%97%E3%81%9F/</link>
			<pubDate>Mon, 14 Dec 2009 00:18:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/%E8%87%AA%E9%AF%96%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E5%BC%95%E8%B6%8A%E3%81%97%E3%81%9F/</guid>
			<description>以前のケースがMini-ITX用で鯖に不向きだったのでATXケースに換装。
まぁこんな感じに。
構成は
MB:D945GCLF2D
RAM:2GB
POW:100W(AC)
HDD:160GB(HGST)
これに、爆熱チップセットのヒートシンクをHV-3747BL、サウスブリッジのチップセットにYH-3020Aをつけた。あとは8センチファンを2重にした糸で固定して完成（笑）。
ケースはDPC-2768BKを3980円で入手。
久しぶりのアキバでものすごく疲れたけど、楽しめたので良しとしよう。</description>
			<content type="html"><![CDATA[<p>以前のケースがMini-ITX用で鯖に不向きだったのでATXケースに換装。<br>
<img src="/images/2009-12-14-zi-qing-nozhong-shen-woyin-yue-shita-TS3H0092.jpg" alt=""></p>
<p><img src="/images/2009-12-14-zi-qing-nozhong-shen-woyin-yue-shita-TS3H0094.jpg" alt=""></p>
<p>まぁこんな感じに。</p>
<p>構成は</p>
<p>MB:<a href="https://www.amazon.co.jp/dp/B001FBWYGG?tag=kimin-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=B001FBWYGG&amp;adid=0H7MNMQ43CT0FSVQ7DDY&amp;">D945GCLF2D</a></p>
<p>RAM:2GB<br>
POW:100W(AC)<br>
HDD:160GB(HGST)<br>
これに、爆熱チップセットのヒートシンクを<a href="https://www.amazon.co.jp/dp/B000X9M27C?tag=kimin-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=B000X9M27C&amp;adid=06DZZ3DKXD5CRH11G1FE&amp;">HV-3747BL</a>、サウスブリッジのチップセットに<a href="https://www.amazon.co.jp/dp/B000VADFTM?tag=kimin-22&amp;camp=243&amp;creative=1615&amp;linkCode=as1&amp;creativeASIN=B000VADFTM&amp;adid=1PSESRDAHN5DT56SN9Z9&amp;">YH-3020A</a>をつけた。あとは8センチファンを2重にした糸で固定して完成（笑）。<br>
ケースは<a href="http://akiba.kakaku.com/pc/0806/20/110000.php">DPC-2768BK</a>を3980円で入手。<br>
久しぶりのアキバでものすごく疲れたけど、楽しめたので良しとしよう。</p>
]]></content>
		</item>
		
		<item>
			<title>csvモジュールが・・・・</title>
			<link>https://github.pyyoshi.com/blog/2009/12/csv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C/</link>
			<pubDate>Sat, 12 Dec 2009 17:23:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/csv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8C/</guid>
			<description>下のようなコードを実行すると、「AttributeError: &amp;lsquo;module&amp;rsquo; object has no attribute &amp;lsquo;reader&amp;rsquo;」っと出るんですよね・・・。
import csv csvfile = &#39;a.csv&#39; reader = csv.reader(open(csvfile, &#39;r&#39;)) for row in reader: print row  謎すぎる。解決策をぼちぼち調べないと・・・
追記：
問題解決しました。→記事</description>
			<content type="html"><![CDATA[<p>下のようなコードを実行すると、「AttributeError: &lsquo;module&rsquo; object has no
attribute &lsquo;reader&rsquo;」っと出るんですよね・・・。</p>
<pre><code>import csv
csvfile = 'a.csv'
reader = csv.reader(open(csvfile, 'r'))
for row in reader:
    print row
</code></pre>
<p>謎すぎる。解決策をぼちぼち調べないと・・・</p>
<p>追記：<br>
<!-- raw HTML omitted -->問題解決しました。<!-- raw HTML omitted -->
→<a href="/2009/12/CSV%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%A7%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA/">記事</a></p>
]]></content>
		</item>
		
		<item>
			<title>当ブログについて</title>
			<link>https://github.pyyoshi.com/blog/2009/12/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Sat, 12 Dec 2009 00:21:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/%E5%BD%93%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>まず最初に書かなくてはいけないノだけれども。
とりあえず、このブログはRenax64のメモ ノートとして使ってます。
ぶちあった問題などをとりあえず書いていきます。</description>
			<content type="html"><![CDATA[<p>まず最初に書かなくてはいけないノだけれども。<br>
とりあえず、このブログはRenax64のメモ ノートとして使ってます。<br>
ぶちあった問題などをとりあえず書いていきます。</p>
]]></content>
		</item>
		
		<item>
			<title>PythonのcsvモジュールがUTF-16に対応していない件について</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%AEcsv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8CUTF-16%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
			<pubDate>Sat, 12 Dec 2009 00:07:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%AEcsv%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%8CUTF-16%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E4%BB%B6%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
			<description>なんどやってもエラー吐くのでｇｇってみたら、案の定だめっぽい。
どうしても読みたい場合はココのサンプルを利用すればいいっぽい。
まぁ、ファイルの文字コードにUTF-16を避けることに注意すればおｋですね。
ここも参考になるかも。</description>
			<content type="html"><![CDATA[<p>なんどやってもエラー吐くのでｇｇってみたら、案の定だめっぽい。<br>
どうしても読みたい場合は<a href="http://www.python.jp/doc/2.5/lib/csv-examples.html">ココ</a>のサンプルを利用すればいいっぽい。<br>
まぁ、ファイルの文字コードにUTF-16を避けることに注意すればおｋですね。<br>
<a href="http://d.hatena.ne.jp/bonlife/20070831/1188564822">ここ</a>も参考になるかも。</p>
]]></content>
		</item>
		
		<item>
			<title>SQLiteでデータ型指定の有無</title>
			<link>https://github.pyyoshi.com/blog/2009/12/SQLite%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E6%8C%87%E5%AE%9A%E3%81%AE%E6%9C%89%E7%84%A1/</link>
			<pubDate>Fri, 11 Dec 2009 20:53:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/SQLite%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E6%8C%87%E5%AE%9A%E3%81%AE%E6%9C%89%E7%84%A1/</guid>
			<description>詳しくはどうなっているか分からないけど、データ型を指定しなくても通る。
INSERT INTOで『&#39;&#39;』で括っているか否かで判定しているのかな？</description>
			<content type="html"><![CDATA[<p>詳しくはどうなっているか分からないけど、データ型を指定しなくても通る。<br>
INSERT INTOで『''』で括っているか否かで判定しているのかな？</p>
]]></content>
		</item>
		
		<item>
			<title>CSV2SQLなるものを見つけた。</title>
			<link>https://github.pyyoshi.com/blog/2009/12/CSV2SQL%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F/</link>
			<pubDate>Thu, 10 Dec 2009 23:37:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/CSV2SQL%E3%81%AA%E3%82%8B%E3%82%82%E3%81%AE%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F/</guid>
			<description>題通りなんか見つけた。とりあえず参考にしながら自分でもCSV2SQL for Pythonを作ってみようと思う。
import sqlite3 import csv # SQLite内のデータはutf-8を想定 def sqlite2csv(db_name, table_name, out_filename): dbh = sqlite3.connect(db_name) writer = csv.writer(file(out_filename, &#39;w&#39;)) for row in dbh.execute(&#39;SELECT * FROM %(table_name)s&#39; % locals()): writer.writerow([col.encode(&#39;utf-8&#39;) if isinstance(col, unicode) else col for col in row]) dbh.close() # csvのセパレータはカンマを想定 def csv2sqlite(db_name, table_name, in_filename): dbh = sqlite3.connect(db_name) reader = csv.reader(open(&amp;quot;import.csv&amp;quot;, &amp;quot;rb&amp;quot;)) for row in reader: ph = &amp;quot;?,&amp;quot; * (len(row) - 1) + &amp;quot;?&amp;quot; dbh.execute(&amp;quot;INSERT INTO %(table_name)s VALUES(%(ph)s)&amp;quot; % locals(), tuple(row)) dbh.</description>
			<content type="html"><![CDATA[<p>題通りなんか見つけた。とりあえず参考にしながら自分でもCSV2SQL for
Pythonを作ってみようと思う。</p>
<pre><code>import sqlite3
import csv 
# SQLite内のデータはutf-8を想定
def sqlite2csv(db_name, table_name, out_filename):
  dbh = sqlite3.connect(db_name)
  writer = csv.writer(file(out_filename, 'w'))
  for row in dbh.execute('SELECT * FROM %(table_name)s' % locals()):
    writer.writerow([col.encode('utf-8') if isinstance(col, unicode) else col for col in row])
  dbh.close()
 
# csvのセパレータはカンマを想定
def csv2sqlite(db_name, table_name, in_filename):
  dbh = sqlite3.connect(db_name)
  reader = csv.reader(open(&quot;import.csv&quot;, &quot;rb&quot;))
  for row in reader:
    ph = &quot;?,&quot; * (len(row) - 1) + &quot;?&quot;
    dbh.execute(&quot;INSERT INTO %(table_name)s VALUES(%(ph)s)&quot; % locals(), tuple(row))
  dbh.commit()
  dbh.close()
</code></pre>
<p>引用:<strong><a href="http://taichino.com/engineer-life/database/1016">http://taichino.com/engineer-life/database/1016</a></strong></p>
]]></content>
		</item>
		
		<item>
			<title>CSS small-caps</title>
			<link>https://github.pyyoshi.com/blog/2009/12/CSS-small-caps/</link>
			<pubDate>Thu, 10 Dec 2009 00:38:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/CSS-small-caps/</guid>
			<description>英小文字をやや小さなサイズの英大文字に変える</description>
			<content type="html"><![CDATA[<p>英小文字をやや小さなサイズの英大文字に変える</p>
]]></content>
		</item>
		
		<item>
			<title>カラム名でDBからデータを取得する方法</title>
			<link>https://github.pyyoshi.com/blog/2009/12/%E3%82%AB%E3%83%A9%E3%83%A0%E5%90%8D%E3%81%A7DB%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
			<pubDate>Tue, 08 Dec 2009 23:41:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/%E3%82%AB%E3%83%A9%E3%83%A0%E5%90%8D%E3%81%A7DB%E3%81%8B%E3%82%89%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
			<description>row_factory = sqlite3.Rowを利用する。
ex)
db = sqlite3.connect(&#39;xxx&#39;, isolation_level=None) sql = u”select * from hoge” db.row_factory = sqlite3.Row c = db.execute(sql) for row in c: print row[&amp;quot;カラム名を指定&amp;quot;]  </description>
			<content type="html"><![CDATA[<p>row_factory = sqlite3.Rowを利用する。<br>
ex)</p>
<pre><code>db = sqlite3.connect('xxx', isolation_level=None)
sql = u”select * from hoge”
db.row_factory = sqlite3.Row
c = db.execute(sql)
for row in c:
print row[&quot;カラム名を指定&quot;]
</code></pre>
]]></content>
		</item>
		
		<item>
			<title>Pythonでの関数定義</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%9A%E7%BE%A9/</link>
			<pubDate>Tue, 08 Dec 2009 23:00:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E5%AE%9A%E7%BE%A9/</guid>
			<description>def hoge():
処理内容 : インデントすること。
ex)
def hoge(): print &#39;Hello Python&#39; hoge()  最初は何処まで定義されるのか分からなかったが、インデントされたか否かで判定してるっぽいです。
コードが綺麗に見えると言われる理由の一つなのかな？</description>
			<content type="html"><![CDATA[<p>def hoge():<br>
    処理内容 : インデントすること。</p>
<p>ex)</p>
<pre><code>def hoge():
    print 'Hello Python'
hoge()
</code></pre>
<p>最初は何処まで定義されるのか分からなかったが、インデントされたか否かで判定してるっぽいです。<br>
コードが綺麗に見えると言われる理由の一つなのかな？</p>
]]></content>
		</item>
		
		<item>
			<title>Pythonで特定の行を読み込ませる</title>
			<link>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E8%A1%8C%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BE%E3%81%9B%E3%82%8B/</link>
			<pubDate>Tue, 08 Dec 2009 22:53:00 +0900</pubDate>
			
			<guid>https://github.pyyoshi.com/blog/2009/12/Python%E3%81%A7%E7%89%B9%E5%AE%9A%E3%81%AE%E8%A1%8C%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BE%E3%81%9B%E3%82%8B/</guid>
			<description>readlines()[n]
nに読み込みたい行を入れるだけ。
ex)
f = ‘fopeninout.txt’ fp = open(f, ‘r’) Str = fp.readlines()[1] fp.close print Str
fopeninout.txt
test1
test2
test3</description>
			<content type="html"><![CDATA[<p>readlines()[n]<br>
nに読み込みたい行を入れるだけ。</p>
<p>ex)<br>
f = ‘fopeninout.txt’
fp = open(f, ‘r’)
Str = fp.readlines()[1]
fp.close
print Str</p>
<p>fopeninout.txt<br>
test1<br>
test2<br>
test3</p>
]]></content>
		</item>
		
	</channel>
</rss>
